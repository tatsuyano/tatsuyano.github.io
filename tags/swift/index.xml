<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/swift/</link>
    <description>Recent content in Swift on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 06 Jan 2016 10:40:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SwiftからObjective-Cを呼ぶ方法</title>
      <link>http://tatsuyano.github.io/2016/01/06/how-to-call-objective-c-from-swift/</link>
      <pubDate>Wed, 06 Jan 2016 10:40:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/01/06/how-to-call-objective-c-from-swift/</guid>
      <description> Swiftで開発していて、Objective-Cのライブラリを使いたいケースがよくあります。 試しに、LUKeychainAccessというKeychain ServicesのラッパークラスををSwiftから呼び出したいと思います。 今回はLUKeychainAccessのインストールは、CocoaPodなどを使わず手動で行います
実装の流れ 実装の流れは以下のようになります。
 Swiftのプロジェクトを作成し、Objective-Cのライブラリを追加 ブリッジファイルを作成し、Objective-Cのライブラリのをimport SwiftのからObjective-Cのコードを呼び出す  Swiftのプロジェクトを作成し、Objective-Cのライブラリを追加 まずは、いつもどおりSwiftのプロジェクトを作成します。 テンプレートは「SingleViewApplication」、プロジェクト名は「LUKeychainFromSwift」で作成します。
次にダウンロードしたLUKeychainAccessのヘッダーファイルなどが入っているディレクトリ(LUKeychainAccess/LUKeychainAccess)をD&amp;amp;Dで、プロジェクトにコピーします。 今回はプロジェクト内にライブラリを追加したいので、Copy items if neededとCreate groupsにチェックを入れてください。
ライブラリを追加すると、自動でBuild Phases &amp;gt; Compile Sources にLUKeychainAccess.mとLUKeychainServices.mが追加されます。 追加されていない場合は手動で追加してください。
ブリッジファイルを作成し、Objective-Cのライブラリをimport ブリッジファイルを作成して、呼び出したいライブラリ(ヘッダーファイル)を指定(import)します。
File &amp;gt; New &amp;gt; File... &amp;gt; Header File からヘッダーファイルを選択し、ブリッジファイル「LUKeychainFromSwift-Bridging-Header.h」を作成します。 作成したブリッジファイルにimport先のライブラリ(LUKeychainAccess.h)を指定します。
※ 今回は自前でObjective-Cのクラスを実装しないので、手動でブリッジファイルを用意しましたが、 新規にObjective-Cのファイルを作成することで、自動でブリッジファイルを作成することが可能です。くわしくは下記サイトを確認してください。
 Bridging Headerのファイル作成と設定を簡単に行う手順  Build Setting に作成したブリッジファイルを指定する 次にBuild Setting &amp;gt; Swift Compiler - Code Generation &amp;gt; Objective-C Bridgeing Headerに作成したブリッジファイル名を設定します。 以上で設定は完了です。
SwiftのからObjective-Cのコードを参照する 設定が正常に完了していれば、コード補完が機能されます。
ためしに実行してみると、Keychain Servicesに保存した値が引っ張ってこれることが確認できます。
参考サイト  Objective-CプログラムをSwiftから呼び出す方法 Bridging Headerのファイル作成と設定を簡単に行う手順 How to call Objective C code from Swift Undefined symbols for architecture armv7:〜という警告が出たときの対策方法  </description>
    </item>
    
  </channel>
</rss>