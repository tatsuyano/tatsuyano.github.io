<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/linux/</link>
    <description>Recent content in Linux on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 11 Apr 2016 14:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>netcatを使って、ポートの状況を確認する</title>
      <link>http://tatsuyano.github.io/2016/04/11/check-the-status-of-the-port-using-the-netcat/</link>
      <pubDate>Mon, 11 Apr 2016 14:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/11/check-the-status-of-the-port-using-the-netcat/</guid>
      <description> ローカルマシン(今回はWindows)から、ホストのLinux(ローカルマシン内のVagrant)に、 メッセージを送ってポートの確認を行う方法
netcatのインストール まずはyumでLinuxにインストール
sudo yum -y install nc.x86_64  次に下記URLからWindowsにインストール
 windows版のnetcat  WindowsからLinuxの指定のポートにメッセージを送る Windowsのコンソールを立ち上げ、Linux(192.168,33.10)の(例えば)8082ポートにecho これで8082ポートが開いている確認できる
C:\Program Files (x86)\netcat&amp;gt; echo &#39;hello&#39; | nc 192.168.33.10 8082  次に Linux側で8082ポートをListen。すると期待どおりメッセージが表示される
$ nc -l 8082 &#39;hello&#39;  ホスト側の現在開いているポートを確認する ホスト側でポート状況を確認するには、以下のパラーメータをつける
$ netstat -ant  オプション  -t TCPポートを表示する -u UDPポートを表示する -a すべての有効なポートを表示する -n 一切の名前解決を行なわない  参考サイト  Netcat でネットワークをもう少し活用する netstatコマンドを使いこなす netstat（1）――TCP通信の接続状況を調べる  </description>
    </item>
    
    <item>
      <title>htopコマンドをインストール</title>
      <link>http://tatsuyano.github.io/2015/02/18/how-to-install-htop/</link>
      <pubDate>Wed, 18 Feb 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/how-to-install-htop/</guid>
      <description> centos6とamazon-linuxにhtopをインストールしたときのメモです。
yumでインストール # wget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
rpm -Uhv rpmforge-release*.rf.x86_64.rpm yum &amp;ndash;enablerepo=epel install -y htop  参考サイト  top の代わりに htop を使ってみた。 Install htop in CentOS htopを使ってサーバのプロセスの状態を詳しく見る方法 htopのCPU付加とメモリ使用量の色の意味  </description>
    </item>
    
    <item>
      <title>jqをインストールする</title>
      <link>http://tatsuyano.github.io/2014/09/25/how-to-install-and-setup-jq/</link>
      <pubDate>Thu, 25 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/25/how-to-install-and-setup-jq/</guid>
      <description>こちらのサイトを参考に、jqをインストールしてみました。
思っていた以上に必要なライブラリがあって、ちょっと時間がかかりました。
libtoolとflexのインストール $ sudo yum -y install libtool flex  bisonのインストール バージョン3.0以上が必要です。
configure: error: You need bison version 3.0 or greater.
初めはyumでインストールしましたが、バージョンが2.4.1だったので、手動でmakeしました。
$ sudo bash # cd /usr/local/src # wget http://ftp.gnu.org/gnu/bison/bison-3.0.2.tar.gz # tar xvzf bison-3.0.2.tar.gz # cd bison-3.0.2 # ./configure # make # make install # ln -s /usr/local/bin/bison /usr/bin/bison  bisonにyaccコマンドをaliasする $ alias yacc=&#39;bison&#39; /usr/bin/bison   yacc command not found and y.tab.c error 127 after installing bison  鬼車のインストール oniguruma-5.</description>
    </item>
    
    <item>
      <title>sudoでroot昇格した時に環境変数を引き継ぐ</title>
      <link>http://tatsuyano.github.io/2014/08/14/take-over-the-environment/</link>
      <pubDate>Thu, 14 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/14/take-over-the-environment/</guid>
      <description>知らなかった。
$ sudo -E bash   sudoで環境変数を引き継ぎたい  </description>
    </item>
    
    <item>
      <title>moshを使ってみる</title>
      <link>http://tatsuyano.github.io/2013/03/17/mosh/</link>
      <pubDate>Sun, 17 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/17/mosh/</guid>
      <description>去年ぐらいから流行っているmoshを入れてみる。
moshを利用するには、クライアント、サーバー両方にmoshをインストールする必要がある。
またmosh内でsshを利用するため、sshの代価というわけではない。
centosにmoshをmake install git cloneして、インストールスクリプトを実行したほうがいいかも。。
yum --enablerepo=epel install -y protobuf-compiler protobuf-devel boost-devel wget https://github.com/downloads/keithw/mosh/mosh-1.2.3.tar.gz tar xvzf mosh-1.2.3.tar.gz cd mosh-1.2.3 ./configure make make install # インストール先 which mosh /usr/local/bin/mosh  iptablesに追加 emacs /etc/sysconfig/iptables -A INPUT -p udp -m udp --dport 60000:61000 -j ACCEPT /etc/init.d/iptables restart  macにmoshにインストール mosh(mobile-shell)をbrewでインストール
brew update brew install mobile-shell  IO::Ptyというperlモジュールも必要なので、cpanmでインストール
cpanm IO::Pty  zshrcに補完関数を追加
cat &amp;gt;&amp;gt; .zshrc # moshcompdef mosh=ssh  利用方法 利用方法はsshと同じ。</description>
    </item>
    
    <item>
      <title>tmuxのコピーモードで、標準出力を見る方法</title>
      <link>http://tatsuyano.github.io/2013/03/12/tmux-copy/</link>
      <pubDate>Tue, 12 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/12/tmux-copy/</guid>
      <description>tmux.confに「set-window-option -g mode-mouse on」を追加する方法もあるが、
これだと、「カーソルで文字を反転させて(文字を選んで)、コピペ」ができなくなってしまう。
なので、代わりにコピーモードで標準出力を見る方法
C-z [ # コピーモード、C-n、C-pで上下に移動 q # コピーモードをぬける  </description>
    </item>
    
    <item>
      <title>tmuxinatorのインストール</title>
      <link>http://tatsuyano.github.io/2013/01/28/tmuxinator/</link>
      <pubDate>Mon, 28 Jan 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/01/28/tmuxinator/</guid>
      <description>RubyGemsからtmuxinatorのインストール 念のため、RubyGemsをupdateしてからインストール
gem update gem install tmuxinator  tmuxinatorがインストールされているか確認
gem which tmuxinator usr/local/Cellar/ruby/1.9.3-p0/lib/ruby/gems/1.9.1/gems/tmuxinator-0.5.0/lib/tmuxinator.rb  メッセージに従い、初期設定 echo &amp;quot;[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] &amp;amp;&amp;amp; source $HOME/.tmuxinator/scripts/tmuxinator&amp;quot; &amp;gt;&amp;gt; ~/.zshrc source ~/.zshrc  $SHELL、$EDITORの確認 設定が必須なので確認
echo $EDITOR $SHELL emacs /bin/bash  .tmuxinatorを移動させる 他のdotfile同様、Dropboxのディレクトリ配下に移動させ、リンクをはる。
ただし「.tmuxinator」をリネームして「tmuxinator」としてはいけない。
隠しファイルでないと、再度「.tmuxinator」というディレクトリが作成されてしまう。
mv .tmuxinator Dropbox/dotfile/ ln -s Dropbox/dotfile/.tmuxinator .tmuxinator  RubyGemsの環境変数をbash_profileに設定 cat .bash_profile export GEM_BIN=$(ruby -e &#39;require &amp;quot;rubygems&amp;quot;; puts Gem::bindir&#39;) export PATH=$GEM_BIN:$PATH source .bash_profile  環境変数の確認
printenv | grep ruby GEM_BIN=/usr/local/Cellar/ruby/1.9.3-p0/bin PATH=/usr/local/Cellar/ruby/1.</description>
    </item>
    
  </channel>
</rss>