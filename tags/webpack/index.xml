<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webpack on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/webpack/</link>
    <description>Recent content in Webpack on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 03 Jun 2015 01:00:00 +0900</lastBuildDate>
    <atom:link href="http://tatsuyano.github.io/tags/webpack/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>webpackを使ってes6-promiseを読み込む</title>
      <link>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</link>
      <pubDate>Wed, 03 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</guid>
      <description>

&lt;p&gt;最近勉強中のPromiseですが、現段階(15/06/03)ではIE11に対応していません。
PromiseをIEに対応させるためには、es6-promiseというNode.jsのライブラリをフロントエンドで読み込む必要があります。&lt;/p&gt;

&lt;p&gt;しかしNode.jsのライブラリは、そのままではフロントエンドで使えないので、
webpackでフロントエンド向けにBuildする必要があります。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-webpackは他にも多くの機能がありますが、ここではNode.jsのモジュールをフロントエンドで使うため方法のみにフォーカスします。-&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;webpackを使うための準備:bf105b025d29d59e69f389ae56581628&#34;&gt;webpackを使うための準備&lt;/h3&gt;

&lt;p&gt;まずは本体のインストール。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;次に適当なディレクトリを作成します。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir webpack-sample &amp;amp;&amp;amp; cd webpack-sample
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;今回使うライブラリ(es6-promise)をディレクトリにインストールします。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install es6-promise
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ライブラリはglobalではなく、ディレクトリ直下(/webpack-sample/node_modules)にインストールしてください。&lt;/p&gt;

&lt;h3 id=&#34;jsのbuild方法:bf105b025d29d59e69f389ae56581628&#34;&gt;JsのBuild方法&lt;/h3&gt;

&lt;p&gt;次に(Node.jsの)ライブラリを読み込むJs(main.js)をビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ webpack main.js bundle.js
Hash: de7b4a8a87c6e52d026f
Version: webpack 1.9.10
Time: 109ms
    Asset     Size  Chunks             Chunk Names
bundle.js  40.1 kB       0  [emitted]  main
   [0] ./main.js 255 bytes {0} [built]
   + 6 hidden modules
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

BuildしたJs(bundle.js)は、main.jsが依存しているライブラリ(es6-promise等)も含んだ一つのファイルに圧縮されます。
このJsのみをHTMLに読み込むだけで、Node.jsが利用できるようになります。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;script&amp;nbsp;src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

&lt;b&gt;main.js&lt;/b&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;
var Promise = require(&#39;es6-promise&#39;).Promise;

var promise = function(code) {
    return new Promise(function (resolve,reject) {
        resolve(&#39;Hello Promise !!&#39;);
    });
}

promise().then(function (result) {
    console.log(result);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

### 確認

今回は、node.jsのhttp-serverを使って確認しようと思います。

* [Node.jsのhttp-serverっていうコマンドラインのウェブサーバーが便利](https://firegoby.jp/archives/5706)

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g http-server
$ http-server -p 4000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サーバー起動し、IEのconsoleにメッセージが表示されれば、確認OKです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/use-webpack-to-read-the-es6-promise_01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:bf105b025d29d59e69f389ae56581628&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webpack.github.io/&#34;&gt;webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jakearchibald/es6-promise&#34;&gt;es6-promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ameblo.jp/ca-1pixel/entry-11884453208.html&#34;&gt;RequireJS等はもう古い。WebPackとは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thujikun.github.io/blog/2014/12/07/webpack/&#34;&gt;Webpackを使い倒す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.twopipe.com/front-end/2014/12/22/react-webpack-env.html&#34;&gt;ReactとStylusをwebpackで使うための開発環境構築&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:bf105b025d29d59e69f389ae56581628&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/&#34;&gt;Promiseを使って、非同期処理を任意のタイミングで実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>