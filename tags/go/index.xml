<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/go/</link>
    <description>Recent content in Go on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 27 Aug 2014 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ghqをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-ghq/</link>
      <pubDate>Wed, 27 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-ghq/</guid>
      <description>ghqというローカルリポジトリを一元的に 管理するツールをインストールしてみました。こちらのツールを使うとgolangと同じようなディレクトリ構成で リポジトリを管理できるようになります。
また今回はこちらの記事を参考に(というかまんま同じに)、 リポジトリ(ソース)を管理するようにしてみました。
golangのディレクトリ構成 まずはGOPATHを$HOMEに設定し、以下のようなディレクトリ構成にします。
.zshrc
## golang export GOPATH=$HOME export PATH=$PATH:$GOPATH/bin  $HOME配下の構成
. ├── bin ├── pkg └── src └── github.com ├── clone ├── codegangsta ├── mattn └── peco  これでgolangのリポジトリ(ソース)は、src配下に作成されます。 また今回はghqを使ってインストール(clone)するgolang以外のリポジトリもsrc配下にインストールするよう設定します。
ghqのインストール $ go get github.com/motemen/ghq  $HOME/.gitconfigにghqを使ってインストールするディレクトリ先を指定します。
[ghq] root = ~/src  これでghqコマンドを使って、インストールできるようになります。
$ ghq get https://github.com/zsh-users/zsh-syntax-highlighting.git  srcディレクトリ配下にインストールされます。
src └── github.com └── zsh-users └── zsh-syntax-highlighting  ghqでインストールしたリポジトリの一覧を表示し、移動するスクリプト # peco-src # (http://blog.kentarok.org/entry/2014/06/03/135300) function peco-src () { local selected_dir=$(ghq list --full-path | peco --query &amp;quot;$LBUFFER&amp;quot;) if [ -n &amp;quot;$selected_dir&amp;quot; ]; then BUFFER=&amp;quot;cd ${selected_dir}&amp;quot; zle accept-line fi zle clear-screen } zle -N peco-src bindkey &#39;^S&#39; peco-src  まとめ 今までの自己流から、ずいぶん分かりやすくなりました。</description>
    </item>
    
    <item>
      <title>pecoで接続先hostを選ぶスクリプトを書いた</title>
      <link>http://tatsuyano.github.io/2014/08/21/select-host-for-peco/</link>
      <pubDate>Thu, 21 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/21/select-host-for-peco/</guid>
      <description> pecoを使って、sshするhostを選択するスクリプトを書きました。
.oh-my-zsh/custom/peco.zsh
function peco-select-host () { host=$(grep -iE &#39;^host\s+(\w|\d)+&#39; ~/.ssh/config | awk &#39;{print $2}&#39; | peco) if [ -n &amp;quot;$host&amp;quot; ]; then ssh $host fi } alias hs=peco-select-host  元々ある~/.ssh/configをgrepしてhost名を渡してるだけ。
1、2文字のキーバインド(ストローク？)がなかったので、aliasでhsにしました。
$ hs QUERY&amp;gt; clgit support test01 ghost #&amp;lt;-接続先のhostを選ぶ  peco楽しいですね。お疲れ様でした。
関連する記事  流行りのpecoをcentosにインストールしました goパッケージ(peco)のバージョンを上げる  </description>
    </item>
    
    <item>
      <title>goパッケージ(peco)のバージョンを上げる</title>
      <link>http://tatsuyano.github.io/2014/08/14/updating-the-package-go/</link>
      <pubDate>Thu, 14 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/14/updating-the-package-go/</guid>
      <description> --prompt オプションを使いたかったので、バージョンをv0.1-&amp;gt;v0.2.4にあげました。
GOROOTとGOPATHの設定が必要なので、環境変数が引き継いだ状態でroot昇格します。
$ sudo -E bash # printenv |grep GO GOROOT=/usr/local/go GOPATH=/usr/local/mygo  go get -uでアップデートされます。
# go get -u github.com/peco/peco/cmd/peco  バージョンが上がりました。
# peco --verision peco: v0.2.4   How does Go update third-party packages?  関連する記事  流行りのpecoをcentosにインストールしました  </description>
    </item>
    
    <item>
      <title>流行りのpecoをcentosにインストールしました</title>
      <link>http://tatsuyano.github.io/2014/07/02/installed-the-peco-to-centos/</link>
      <pubDate>Wed, 02 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/02/installed-the-peco-to-centos/</guid>
      <description>最近購読しているブログとかに、pecoインストールしました的な記事をよく見かけるようになったので、御多分に洩れず入れてみました。
で、そもそもpecoって何なの？って話なんですが、READMEに書いてあるように、コマンドの履歴をいい感じにフィルタリングしてくれるツールみたいです。
元々はpercolというpythonで作られたツールを、JPAのMakiさんがgolangで作りなおしたものらしいです。 ツール作るのに、golang流行ってますね。。
こうやってperlの人が他の言語で開発しているのを見ると、少しノスタルジックな気持ちになるのは秘密です。
golangのインストール anyenvでバージョン管理できるのかなと思ったけどなかった &amp;amp; yumのリストになかった(2014&amp;frasl;06)ので、手動でmake?しました。 まずはgolangのパッケージを選びます。対象はcentos6の64bit(2014&amp;frasl;06)。
インストール方法は、詳しくは本家の翻訳サイトに乗っています。
$ sudo bash $ cd /usr/local/src # wget http://golang.org/dl/go1.3.linux-amd64.tar.gz # tar -C /usr/local -xzf go1.3.linux-amd64.tar.gz  golangの環境変数 今回はシステムワイドにインストールしたので、/etc/profileに設定します。
# emacs /etc/profile export GOROOT=/usr/local/go export GOPATH=/usr/local/mygo export PATH=$PATH:$GOPATH/bin:$GOROOT/bin # source /etc/profile # which go /usr/local/go/bin/go  GOPATHには、golangのソフトウェア(pecoとか)が入ります。
pecoのインストール golangのソフトウェアは、go getコマンドを使うみたいです。
# go get github.com/peco/peco/cmd/peco # which peco /usr/local/mygo/bin/peco   Ctrl-r &amp;hellip; リスト(履歴)の表示 Ctrl-g &amp;hellip; リストから抜ける  pecoの設定 pecoの設定はこちら(pecoを使い始めた)を参考にさせてもらいました。</description>
    </item>
    
  </channel>
</rss>