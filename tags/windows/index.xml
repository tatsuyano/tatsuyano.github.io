<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/windows/</link>
    <description>Recent content in Windows on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 17 Sep 2017 14:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>fishをインストールする</title>
      <link>http://tatsuyano.github.io/2017/09/17/install-fish/</link>
      <pubDate>Sun, 17 Sep 2017 14:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2017/09/17/install-fish/</guid>
      <description>fish &amp;amp; fishermanのインストール macを新調したので、shellもzshからfishに乗り換えてみた。
install fish $ brew install fish $ fish -v fish, version 2.6.0  fishをログインシェルにせず、bashから起動する ログインシェルをfishにするとfishに問題があったときにterminalが動かなくなってしまうので、bash_profileの一番下でexec fishを実行する。 またanyenvがfishに 完全に対応していないので、bashでanyenvを動かしてからfishを動かす。
＄HOME/.bash_profile
if [ -d $HOME/.anyenv ]; then export PATH=$HOME/.anyenv/bin:$PATH eval &amp;quot;$(anyenv init -)&amp;quot; fi exec fish   ログインシェルはbashのままfishを利用する fishシェルでanyenvを設定したときにcalled during startupエラーが出る  install fisherman PluginManagerはfishermanを選択
$ curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs https://git.io/fisher $ fisher -v fisherman version 2.13.1 ~/.config/fish/functions/fisher.fish   fisherman/fisherman oh-my-fish は古い！fisherman で置き換えられる fishのプラグインマネージャ比較  テーマはOhMyFishのagnosterを選択。別のテーマに変更する場合は、再度installすると変更される</description>
    </item>
    
    <item>
      <title>netcatを使って、ポートの状況を確認する</title>
      <link>http://tatsuyano.github.io/2016/04/11/check-the-status-of-the-port-using-the-netcat/</link>
      <pubDate>Mon, 11 Apr 2016 14:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/11/check-the-status-of-the-port-using-the-netcat/</guid>
      <description> ローカルマシン(今回はWindows)から、ホストのLinux(ローカルマシン内のVagrant)に、 メッセージを送ってポートの確認を行う方法
netcatのインストール まずはyumでLinuxにインストール
sudo yum -y install nc.x86_64  次に下記URLからWindowsにインストール
 windows版のnetcat  WindowsからLinuxの指定のポートにメッセージを送る Windowsのコンソールを立ち上げ、Linux(192.168,33.10)の(例えば)8082ポートにecho これで8082ポートが開いている確認できる
C:\Program Files (x86)\netcat&amp;gt; echo &#39;hello&#39; | nc 192.168.33.10 8082  次に Linux側で8082ポートをListen。すると期待どおりメッセージが表示される
$ nc -l 8082 &#39;hello&#39;  ホスト側の現在開いているポートを確認する ホスト側でポート状況を確認するには、以下のパラーメータをつける
$ netstat -ant  オプション  -t TCPポートを表示する -u UDPポートを表示する -a すべての有効なポートを表示する -n 一切の名前解決を行なわない  参考サイト  Netcat でネットワークをもう少し活用する netstatコマンドを使いこなす netstat（1）――TCP通信の接続状況を調べる  </description>
    </item>
    
  </channel>
</rss>