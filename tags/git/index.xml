<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/git/</link>
    <description>Recent content in Git on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 16 Apr 2013 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>git-gutter.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/04/16/emacs-git-gutter/</link>
      <pubDate>Tue, 16 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/16/emacs-git-gutter/</guid>
      <description>gitの差分を表示してくれる git-gutter を入れてみました。
インストール はじめREADME.mdにかいてあるとおり、M-x package-install git-gutter で
  Installation You can install git-gutter.el from MELPA with package.el (M-x package-install git-gutter). And you can also install it with el-get.
  ELPA経由インストールしてみたが、versionが0.28と少し古くエラーがでたので、el-getのrecipeを用意してインストールした。
(:name emacs-git-gutter :type github :website &amp;quot;https://github.com/syohex/emacs-git-gutter&amp;quot; :description &amp;quot;[My Recipes] git-gutter.el is port of GitGutter which is a plugin of Sublime Text.&amp;quot; :pkgname &amp;quot;syohex/emacs-git-gutter&amp;quot;)  設定 とりあえず差分の表示だけがほしいので、最小限の設定に。
.emacs.d/conf/81-git-gutter.el
(require &#39;git-gutter) ;;(global-git-gutter-mode t) (setq git-gutter:separator-sign &amp;quot;|&amp;quot;) (set-face-foreground &#39;git-gutter:separator &amp;quot;yellow&amp;quot;) (add-hook &#39;cperl-mode-hook &#39;git-gutter-mode) (add-hook &#39;js2-mode-hook &#39;git-gutter-mode) (add-hook &#39;php-mode-hook &#39;git-gutter-mode) (add-hook &#39;ruby-mode-hook &#39;git-gutter-mode)  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>gistのファイルをダウンロード(参照)する</title>
      <link>http://tatsuyano.github.io/2013/03/19/gist/</link>
      <pubDate>Tue, 19 Mar 2013 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/gist/</guid>
      <description>gistのファイルをダウンロードするには、通常 git clone を利用するが、ファイル(rawファイル)を直接 wget などしたい場合がある。
その場合は下記のURLで取得する
https://raw.github.com/gist/&amp;lt;パラメータ&amp;gt;/&amp;lt;ファイル名&amp;gt;
例)
https://gist.github.com/zqwell/1021706
↓
https://raw.github.com/gist/1021706/init-loader.el</description>
    </item>
    
    <item>
      <title>リモートリポジトリの変更を取得する(git fetch)</title>
      <link>http://tatsuyano.github.io/2013/02/25/git-fetch/</link>
      <pubDate>Mon, 25 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/25/git-fetch/</guid>
      <description> confilictを起こさないためにも、git pullは使わずにgit fetchを使ったほうがいい。
リモートリポジトリの変更を取得する
git fetch # これによって、FETCH_HEADを使って、以下のようにログや差分を見られるようになる。  リモートリポジトリのコミットのログを見る
git log FETCH_HEAD  リモートリポジトリとローカルのHEADの差分を見る
git diff HEAD FETCH_HEAD  リモートリポジトリと変更をローカルにマージする
git merge FETCH_HEAD  リモートリポジトリの変更を取得してローカルにマージする
git pull # git pull は git fetch + git merge  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 git fetch ( git pull )  </description>
    </item>
    
    <item>
      <title>作業ごとにブランチを切る(git branch)</title>
      <link>http://tatsuyano.github.io/2013/02/23/git-branch/</link>
      <pubDate>Sat, 23 Feb 2013 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/23/git-branch/</guid>
      <description>branchを切る 機能追加、バグ修正など、作業ごとにブランチを切るべき
ブランチの作成
git branch new-branch  ブランチを確認する
git branch -a * master # &amp;lt;- 現在のブランチがmasterであることがわかる new-branch remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master  作成したブランチに切り替える
git checkout new-branch Switched to branch &#39;new-branch&#39;  ブランチを作成すると同時にブランチを切り替える
git checkout -b new-branch Switched to a new branch &#39;new-branch&#39;  ブランチの削除
git branch -d new-branch Deleted branch new-branch (was 6de2d75). # 削除対象のブランチを選択していると削除できない git branch -d new-branch error: Cannot delete the branch &#39;new-branch&#39; which you are currently on.</description>
    </item>
    
    <item>
      <title>conflictしたファイルを修正しpushする</title>
      <link>http://tatsuyano.github.io/2013/02/23/git-conflict/</link>
      <pubDate>Sat, 23 Feb 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/23/git-conflict/</guid>
      <description>pullした後に、commitしたファイルdummy.txtがconflictした場合
git pull Auto-merging dummy.txt # &amp;lt;- dummy.txtがconflictして、auto-mergeされた CONFLICT (content): Merge conflict in dummy.txt Automatic merge failed; fix conflicts and then commit the result.  conflictしたファイルを修正する
emacs dummy.txt &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD local ======= remote &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 58da51ee64bf7f793167ddb40d035815e39566b4  修正後、git commit -aで再度commitしpush
git commit -a -m &#39;merge dummy&#39; [master 102b6c6] merge dummy git push  git commit -a は git add -u した後すぐにgit commitしたのと同義
conflictしているファイルの表示
git ls-files -u  </description>
    </item>
    
    <item>
      <title>master以外のbranchをリモート(origin)にpushする</title>
      <link>http://tatsuyano.github.io/2013/02/23/git-push-origin-newbranch/</link>
      <pubDate>Sat, 23 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/23/git-push-origin-newbranch/</guid>
      <description>master以外の別branchをリモートにpushする
git push origin new-branch git branch -a master * new-branch remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master remotes/origin/new-branch # &amp;lt;- 追加される  origin/master以外のリモートにあるbranchをローカルに追加する
git branch new-branch origin/new-branch # &amp;lt;- 本来ならこれでうまくいくのだが # なぜかすでにローカルにあるリポジトリから、新たに追加されたリモートのブランチが参照されていない git branch -a * master remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master # remotes/origin/new-branch &amp;lt;- 本来参照されるはずのブランチ  うまくいかないので、いったんローカルのリポジトリを破棄し、新たにcloneしなおしてみる
mv local-repository local-repository.bk git clone ssh://hoge/var/git/remote-repository.git local-repository cd local-repository/ git branch -a * master remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master remotes/origin/new-branch # &amp;lt;- 追加されている  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>Nike Flyknit Lunar1&#43;</title>
      <link>http://tatsuyano.github.io/2013/02/18/nike-flyknit-lunar-plus/</link>
      <pubDate>Mon, 18 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/18/nike-flyknit-lunar-plus/</guid>
      <description>青系のシューズがほしくて、いろいろなメーカのものを眺めていたが、つい買ってしまいました。Nike Flyknit Lunar1+。
このFlyknitシリーズは3種類、Racer、Trainer+、Lunar1+とあって、Luna1+はエントリーモデルになる。
Nikeショップの人の話しでは、Racerがサブ３、Trainer+がサブ４、Lunar1+が4〜4.5時間ぐらいが目安とのことだったのでLunar1+をチョイス。
サイズ 自分の正確なサイズは24.5〜25.0(甲高)なので、いつもはだいたい25インチを買っているのだが、このLunar1+では甲の部分に圧迫感があったので、25.5インチにした。
軽さ 人によって違うだろうが、自分がいつも履いてるadidas Boston2と較べて明らかに軽さを体感できた。ただ10km、20kmだとあまりその軽さの良さを感じない。
たぶんフルマラソンぐらいじゃないと、その軽さの恩恵を感じないと思う。
クッション性 見た目はそれなりに厚みがあるが、自分は少しクッション性は低いと感じた。
たぶんいつも履いているadidas Boston2がクッション性が高いシューズだからだと思う。ただ軽さを考えれば、十分だと思う。
ソックス 自分はシューズと同じ色に合わせたい派なので、同じNikeの「ランニング エリート リサイクル クッション ローカット タブ ソックス」のネオタークのLサイズを購入。
このソックス、実によくできていて、くるぶしの前後ろの２箇所が厚くなっており、靴ずれを防いでくれている。
Nikeはこういう細かい部分もよく考えているなあと少し感心。
総評 値段は少し高め(14,800円)のシューズではあるが、その軽さやデザイン性を考えると「買い」だったと思う。
まだ10kmちょっとしか走っていないので、もう少し走りこんでから、改めてレビューをまとめたいと思う。</description>
    </item>
    
    <item>
      <title>ファイルを指定したコミットの状態に戻す(git checkout)</title>
      <link>http://tatsuyano.github.io/2013/02/10/git-checkout/</link>
      <pubDate>Sun, 10 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/10/git-checkout/</guid>
      <description>指定したファイルの、過去のコミット一覧を表示する
git log --oneline Controller/TasksController.php a8eb2ff task add,edit,delete 995bfc9 To move the program 4b5e3dd check score today 187cf30 add Tasks  現在の状態と、過去のコミットを比較する
git diff 995bfc9 Controller/TasksController.php diff --git a/Controller/TasksController.php b/Controller/TasksController.php index e6ab27a..9dc9b45 100644 --- a/Controller/TasksController.php +++ b/Controller/TasksController.php @@ -6,6 +6,7 @@ App::uses(&#39;AppController&#39;, &#39;Controller&#39;); * @property Task $Task */ class TasksController extends AppController { + public $uses = array(&#39;Task&#39;,&#39;User&#39;); /** * index method @@ -37,12 +38,19 @@ class TasksController extends AppController { * * @return void */ - public function add() { + public function add($user_id = null) { + $this-&amp;gt;User-&amp;gt;id = $user_id; + if (!</description>
    </item>
    
  </channel>
</rss>