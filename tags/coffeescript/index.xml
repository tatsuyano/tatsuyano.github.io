<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffeescript on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/coffeescript/</link>
    <description>Recent content in Coffeescript on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 19 Mar 2013 03:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/coffeescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>coffee-modeでauto-completeを使えるようにする</title>
      <link>http://tatsuyano.github.io/2013/03/19/coffee-mode-used-ac-dict/</link>
      <pubDate>Tue, 19 Mar 2013 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/coffee-mode-used-ac-dict/</guid>
      <description> まずは coffee-mode.el を el-get で通常通りにインストールします。
auto-complete で補完に使うdict(辞書)について 補完をするときに参照している辞書は、.emacs.d/elisp/el-get/auto-complete/dict/ 配下にあります。
デフォルトでは、coffee-mode 用のdictがないので、js2-mode 用に公開されていた辞書をインストールします。
cd .emacs.d/elisp/el-get/auto-complete/dict/ wget https://raw.github.com/sandai/dotfiles/master/.emacs.d/ac-dict/js2-mode  設定 coffee-mode でauto-complete を使えるようにし、指定した辞書で補完するようにします。
52-coffee-mode.el
(require &#39;coffee-mode) ;; デフォルトだとインデントが８スペースなので、２スペースに変更 ;; http://qiita.com/items/a8d96ae95a1838500e37 (defun coffee-custom () &amp;quot;coffee-mode-hook&amp;quot; (set (make-local-variable &#39;tab-width) 2) (setq coffee-tab-width 2)) (add-hook &#39;coffee-mode-hook &#39;(lambda() (coffee-custom))) ;; auto-complete (add-to-list &#39;ac-modes &#39;coffee-mode) ;; coffee-modeでACを使えるようにする ;; coffee-modeで、追加したjs2-modeのdict(辞書)で補完するようにする ;; wget https://raw.github.com/sandai/dotfiles/master/.emacs.d/ac-dict/js2-mode (add-hook &#39;coffee-mode-hook &#39;(lambda () (add-to-list &#39;ac-dictionary-files &amp;quot;~/.emacs.d/elisp/el-get/auto-complete/dict/js2-mode&amp;quot;) ))  </description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その４(クラス、Jquery)</title>
      <link>http://tatsuyano.github.io/2013/03/12/coffee-script-study-jquery/</link>
      <pubDate>Tue, 12 Mar 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/12/coffee-script-study-jquery/</guid>
      <description>クラス class Animal constructor:(name) - @name = name say:(word) - console.log &#34;#{@name} said: #{word}&#34; class Dog extends Animal constructor:(name) - super name say:(word) - super &#34;Bowwow, #{word}&#34; dog = new Dog(&#34;Bob&#34;) dog.say(&#34;hello&#34;)  #### 静的なプロパティ クラスの静的なプロパティを定義するには変数名の頭に@を付けます。 class Dog @TYPE_CHIHUAHUA = 1  コンパイル結果↓
var Dog; Dog = (function() { function Dog() {} Dog.TYPE_CHIHUAHUA = 1; return Dog; })();  クラスの静的なプロパティの使い方というか、そもそもJsのオブジェクト指向、クロージャの実装がしっかりと理解していない。ここは後日勉強する。 無名関数 setTimeoutなど引数に無名関数を渡したい場合は、次の行頭にカンマを付けます。
setTimeout - console.log(&#34;ok&#34;) ,1000  コンパイル結果↓
setTimeout(function() { return console.</description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その３(オブジェクト)</title>
      <link>http://tatsuyano.github.io/2013/03/11/coffee-scirpt-study-object/</link>
      <pubDate>Mon, 11 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/11/coffee-scirpt-study-object/</guid>
      <description>Objectの生成 this.x の代わりに @x と書くことができる
pos = x:100 y:200 dump: - console.log &#34;x:#{@x},y:#{@y}&#34; pos.dump()  コンパイル結果↓
var pos; pos = { x: 100, y: 200, dump: function() { return console.log(&#34;x:&#34; + this.x + &#34;, y:&#34; + this.y); } };  一行で書く場合、「,」で区切る
size = width:100, height:200  コンパイル結果↓
var size; size = { width: 100, height: 100 };  #### 配列 for .. in でループが書けます。 seq = [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;] for x in seq console.</description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その２(構文)</title>
      <link>http://tatsuyano.github.io/2013/03/08/coffee-script-study/</link>
      <pubDate>Fri, 08 Mar 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/08/coffee-script-study/</guid>
      <description>Hello World $ emacs test.coffee hello = -&amp;gt; console.log(&amp;ldquo;Hello World!&amp;rdquo;)
hello() 
コンパイル coffee -&amp;gt; js。 test.jsというJsファイルが生成される
$ coffee -c test.coffee  生成したJsの実行
$ node test.js Hello World!  生成されたJsの中身
(function() { var hello; hello = function() { return console.log(&#34;Hello World!&#34;); }; hello(); }).call(this);  コンパイルせずに直接実行
$ coffee test.coffee Hello World!  coffee &amp;lt;ファイル名&amp;gt; と入力するのが面倒なので、zshのaliasを設定する
emacs $HOME/.zshrc alias -s coffee=coffee
source $HOME/.zshrc 
今後は、ファイル名を入力するだけで実行される
$ ./test.coffee Hello World!  オプション  -c (&amp;ndash;compile) .</description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その１(インストール、環境構築)</title>
      <link>http://tatsuyano.github.io/2013/03/08/coffee-script-emacs/</link>
      <pubDate>Fri, 08 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/08/coffee-script-emacs/</guid>
      <description>npm(node.js)でのインストール # node.jsのversionを指定 nvm ls v0.8.14 v0.9.4 current: v0.9.4 nvm use 0.9.4 Now using node v0.9.4 npm install -g coffee-script $ coffee -v CoffeeScript version 1.6.1  今後頻繁にCoffeeScriptを使いそうなので、zshrcにnode.jsのバージョンを指定しておく
$HOME/.zshrc [[ -s $HOME/.nvm/nvm.sh ]] &amp;amp;&amp;amp; nvm use 0.9.4
source $HOME/.zshrc 
emacsにcoffee-modeをインストール cd $HOME/.emacs.d/elisp git clone git://github.com/defunkt/coffee-mode.git  $HOME/.emacs.d/conf/52_coffee.el (add-to-list &amp;lsquo;load-path &amp;ldquo;~/.emacs.d/elisp/coffee-mode&amp;rdquo;) (require &amp;lsquo;coffee-mode)
;; デフォルトだとインデントが Space 8 なので、Space 2 に変更 ;; http://qiita.com/items/a8d96ae95a1838500e37 (defun coffee-custom () &amp;ldquo;coffee-mode-hook&amp;rdquo; (set (make-local-variable &amp;lsquo;tab-width) 2) (setq coffee-tab-width 2))</description>
    </item>
    
  </channel>
</rss>