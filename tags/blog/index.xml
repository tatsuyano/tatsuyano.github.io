<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/blog/</link>
    <description>Recent content in Blog on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 18 Sep 2017 20:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>hugoを再インストールした</title>
      <link>http://tatsuyano.github.io/2017/09/18/re-installed-hugo/</link>
      <pubDate>Mon, 18 Sep 2017 20:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2017/09/18/re-installed-hugo/</guid>
      <description>久々にblogに記事を書こうと新しいmacにhugoをインストールしたが、まったく動かなかっていたので自分用にメモ。
ちなみに構成は、Hugo本体をbitbucketのリポジトリに非公開で管理し、生成した記事(HTML)をgithub pagesで管理している。
Install Hugo 今回はhomebrewでインストール。
$ brew install hugo $ hugo version Hugo Static Site Generator v0.27.1 darwin/amd64 BuildDate: 2017-09-16T19:35:01+09:00   Quick Start  Add submodule まずgithub pageでブログを公開するために、github上に生成したHTMLを管理するリポジトリをsubmoduleとして管理している。
そもそもsubmoduleの仕組みだが、git submodule addすると、リポジトリの直下に.gitmodules、.git/config、.git/modulesの３箇所に記載、ファイルが追加される。
しかし今回のように、すでにある(add moduleした)リポジトリをcloneした場合.git/modules中にファイルが存在しない。 なので一旦git rm publicでsubmoduleを削除し(すると上記３ファイルの記載が消える)、再度git submodule addする。
$ git rm public $ git submodule add git@github.com:tatsuyano/tatsuyano.github.io.git ##.gitsubmodules [submodule &amp;quot;public&amp;quot;] path = public url = git@github.com:tatsuyano/tatsuyano.github.io.git ## .git/config [submodule &amp;quot;public&amp;quot;] url = git@github.com:tatsuyano/tatsuyano.github.io.git ## git/modules $ ll .</description>
    </item>
    
    <item>
      <title>Hugoに独自ドメインを適応したので、sitemap.xmlを置換する</title>
      <link>http://tatsuyano.github.io/2015/07/26/replacing-sitemap-of-hugo/</link>
      <pubDate>Sun, 26 Jul 2015 21:15:01 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/26/replacing-sitemap-of-hugo/</guid>
      <description>Hugoに独自ドメインを適応したところ、自動生成されるsitemap.xmlが
Github pagesのURLで生成されていたので、deploy.shにsedコマンドを追加した。
sedコマンドで上書き置換(sed -i)したら、バックアップファイルが自動で生成
されるを止めるのはどうしたらいいのだろうか。。
 </description>
    </item>
    
    <item>
      <title>ブログをGhostからHugoに移行した</title>
      <link>http://tatsuyano.github.io/2015/07/25/switch-hugo/</link>
      <pubDate>Sat, 25 Jul 2015 18:15:01 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/25/switch-hugo/</guid>
      <description> 今までaws上でブログ(Ghost)を運用していたが、無料期間が終わったら月2000円
ちょっとかかったので、またGithub Pages上にブログを移行させた。
以前はGithub PagesでOctopressを使っていたが、最近はHugoというのが流行っているらしいので使ってみた。
記事が思いの外多かったので、エクスポート用のコードをrubyで書いた。
コードを書くのに思ったより時間がかかったが、久々にrubyを使って楽しかった。
 参考サイト  HugoとCircleCIでGitHub PagesにBlogを公開してみたら超簡単だった Hugoを使ってみたときのメモ Hugo + Github Pages + Wercker CI = ¥0（無料）でコマンド 1 発  </description>
    </item>
    
    <item>
      <title>Ghostをv0.5にアップグレードする</title>
      <link>http://tatsuyano.github.io/2014/09/10/upgrade-to-v05-ghost/</link>
      <pubDate>Wed, 10 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/10/upgrade-to-v05-ghost/</guid>
      <description>運用中のGhost(v0.4)にGhost(v0.5)のファイルを一部コピーするだけで、アップグレードすることができます。
以下のような構成で話をすすめます。
$ tree $HOME/app -d -L 1 $HOME/app ├── ghost #&amp;lt;- 運用中のGhost(v0.4) └── ghost.v5 #&amp;lt;- コピー元のGhost(v0.5)  Ghost v0.5のダウンロード $ cd app $ curl -L https://ghost.org/zip/ghost-latest.zip -o ghost.zip $ unzip -uo ghost.zip -d ghost.v5  Ghost v0.5から一部ファイルをコピーする コピーする前にforeverを止めてください。
$ cd $HOME/app/ghost $ NODE_ENV=production forever stop index.js  　$ cd ../ghost.v5/ $ cp -a *.md *.js *.json ../ghost/ $ cp -R core ../ghost $ cp -R content/themes/casper ../ghost/content/themes  nodeパッケージを再インストール</description>
    </item>
    
    <item>
      <title>Amazon LinuxにGhostをインストールする</title>
      <link>http://tatsuyano.github.io/2014/09/09/how-to-install-and-setup-ghost-on-amazon-linux/</link>
      <pubDate>Tue, 09 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/09/how-to-install-and-setup-ghost-on-amazon-linux/</guid>
      <description>新たにt2.microのインスタンスを立ち上げたので、Ghost を新規でインストールしようと思います。
Node.js のインストール anyenvを使って、0.10.0以上のNode.js をインストールしてください。
$ which node HOME/.anyenv/envs/ndenv/shims/node $ which npm $HOME/.anyenv/envs/ndenv/shims/npm $ node --version v0.10.26   anyenvをインストールする  nginx のインストール yumでのバージョンは1.4.7と少し古いですが、面倒なのでインストール
$ sudo yum -y install nginx $ /usr/sbin/nginx -v nginx version: nginx/1.4.7 $ sudo chkconfig nginx on $ sudo chkconfig --list | grep nginx nginx 0:off 1:off 2:on 3:on 4:on 5:on 6:off  念のため起動テスト
$ sudo /etc/init.d/nginx start  confの設定 特定のドメインのみを停止(切り離)したりするために、 設定ファイルのリンクを貼ったディレクトリをincludeします。
sites-availableにはドメインごとの設定ファイル、 sites-enabledには設定ファイルのリンクを貼ります。</description>
    </item>
    
    <item>
      <title>GhostにGoogle Analyticsに設置しアクセス元IPを取得する</title>
      <link>http://tatsuyano.github.io/2014/08/10/get-access-ip-installed-google-analytics-to-ghost/</link>
      <pubDate>Sun, 10 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/10/get-access-ip-installed-google-analytics-to-ghost/</guid>
      <description>アクセス元IPを取得するには、Google Analyticsのデフォルト設定ではできません。 IPを取得、集計するには
 Google Analyticsにdimensionを設定し、アクセス元IPを集計できるようにする PHPを使って、blogの参照時のIPを取得する 取得したIPをdimensionに渡す 集計結果をGoogle Analyticsで参照できるよう、カスタムレポートを作成する  という手順で対応します。
この記事で紹介するシステム構成  CentOS6 Ghost Nginx  何はともあれ、まずはGoogleAnalyticsを導入してください。
 初心者必見！【Google Analytics(アナリティクス)】の導入と使い方 How to Add Google Analytics to Ghost  Google Analyticsにdimensionを設定し、アクセス元IPを集計できるようにする Analyticsが提供していない値(今回でいうところのアクセス元IP)を集計するには、dimension(変数)を設定し、その変数に値を代入することで、集計することができるようになります。
アナリティクス設定 &amp;gt; カスタム定義 &amp;gt; カスタム ディメンション 新しいカスタム ディメンション &amp;gt; カスタム ディメンションを編集 &amp;gt; 保存 保存するとdimension1という変数がAnalyticsに設定されます。
PHPを使って、blogが参照された時のIPを取得する このblogにはGhostを動かすための最小の設定しかしていなかったので、まずはNginx上でPHPが動く環境を整えます。
# yum -y install php php-fpm  次に、事前に用意したdomainをバーチャルホスト(VH)に割り振り、そのVHに対してPHPが動くように設定します。
/etc/nginx/conf.d/php.conf
```` server { listen 80; server_name ga.10rane.com;
location / { root /var/www/html; index index.</description>
    </item>
    
    <item>
      <title>blogをoctopressからghostに乗り換えました。</title>
      <link>http://tatsuyano.github.io/2014/05/08/change-to-ghost-from-octopress/</link>
      <pubDate>Thu, 08 May 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/05/08/change-to-ghost-from-octopress/</guid>
      <description>深い理由はないのですが、何となく乗り換えてみました。
また備忘がてらのんびり書いていきたいと思います。</description>
    </item>
    
    <item>
      <title>Octopressのコードスニペットの設定</title>
      <link>http://tatsuyano.github.io/2013/05/10/octopress-clippit/</link>
      <pubDate>Fri, 10 May 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/05/10/octopress-clippit/</guid>
      <description>Octopressの標準設定 rdiscountの場合、```で囲う。色は付かない。
ls CHANGELOG.markdown Gemfile.lock Rakefile config.rb plugins sass Gemfile README.markdown _config.yml config.ru public source  scheme ``` schemeで囲う。自分はelispの場合などに使っている。
(defvar dvar 1 &amp;quot;実験用&amp;quot;) ;; -&amp;gt; 1 (defvar dvar 2) ;; -&amp;gt; 1 値が上書きされない (setq dvar 3) ;; -&amp;gt; 3 defvar以外で宣言(代入)された場合は上書きされてしまう。  Js codeblock lang:jsで囲う。
class Animal constructor:(name) - @name = name say:(word) - console.log &#34;#{@name} said: #{word}&#34; class Dog extends Animal constructor:(name) - super name say:(word) - super &#34;Bowwow, #{word}&#34;</description>
    </item>
    
    <item>
      <title>octopressをインストールする</title>
      <link>http://tatsuyano.github.io/2013/05/09/octopress-install/</link>
      <pubDate>Thu, 09 May 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/05/09/octopress-install/</guid>
      <description>Octopressとは github上にブログを構築できるruby製のフレームワーク。
インストール 複数PCで更新したいので、Dropbox上にインストール。手順は公式サイトと同じです。
事前にrbenvかRVMでruby1.9.3以上をインストールしておいてください。
cd $HOME/Dropbox/ git clone git://github.com/imathis/octopress.git octopress cd octopress gem install bundler rbenv rehash bundle install  rake インストール時にエラー rakeをインストールしたさいにOctopressで使うバージョンが違うというエラーがでた。
rake install rake aborted! You have already activated rake 10.0.4, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.  gemのバージョンは、Gemfileに設定されているので、rakeのバージョンを 10.0 から 0.9に変更し、再度 rake install を行う
octopress/Gemfile
source &amp;quot;http://rubygems.org&amp;quot; group :development do gem &#39;rake&#39;, &#39;~&amp;gt; 0.9&#39; # 10.0 -&amp;gt; 0.9 gem &#39;jekyll&#39;, &#39;~&amp;gt; 0.</description>
    </item>
    
  </channel>
</rss>