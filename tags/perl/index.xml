<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/perl/</link>
    <description>Recent content in Perl on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 22 Aug 2015 08:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/perl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>YAPC::Asia2015に行ってきた</title>
      <link>http://tatsuyano.github.io/2015/08/22/yapc-asia-2015/</link>
      <pubDate>Sat, 22 Aug 2015 08:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/22/yapc-asia-2015/</guid>
      <description>6年ぶりにYAPCに行ってきた。思っていた以上に混んでいて、 メイン会場以外での人気のセッションだと、部屋にも入れないほどの盛況ぶりだった。
前の会社の同僚も結構来ていてみたいだったので、顔を合わせたら声かけようと思っていたが、 見ていたセッションがまったくかぶらず、開発言語が変わると(自分はPerlから今はPHPをメインで使っている)、 こうも趣向が変わるのかと少し切なかった。
2日目は1日目の失敗を踏まえ、なるべく部屋を移動しないよう工夫してみたが、結局ランチセッションは逃した。
予定していたセッションは半分ぐらいしか聞けなかったが、セッションを聞いているうち、無性にプログラミングがしたくなったので途中で帰った。
セッションの自体はYoutubeなどにすぐに上がるし、 ただ見たいだけなら直接行くメリットは実はあまりないんだけど、こうやって熱に当てられることで頑張ろうと思えるところが、 イベントのイイトコなのかなと思う。
最後に楽しいイベント、ありがとうございました。</description>
    </item>
    
    <item>
      <title>ディレクトリ中のファイルサイズの合計値を再帰的に集計したい その２</title>
      <link>http://tatsuyano.github.io/2013/04/07/find-cmd-on-mac-2/</link>
      <pubDate>Sun, 07 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/07/find-cmd-on-mac-2/</guid>
      <description>前回のディレクトリ中のファイルサイズの合計値を再帰的に集計したい その１でmac用、linux用のワンライナーを関数として登録したのですが、 mac用のワンライナーが厳密には、期待した結果とは違うので、作り直してみました。
#!/usr/bin/env perl use strict; use constant DELETED_STDOUT =&amp;gt; &amp;quot;\x1b[1A&amp;quot;; use constant INITIALIZE_STDOUT =&amp;gt; &amp;quot; &amp;quot;; my $dir = $ARGV[0] || &amp;quot;.&amp;quot;; my $info = file_info($dir); printf INITIALIZE_STDOUT; print_info($info); sub file_info { my $dir = shift; my @list = (); my $info = { file_size =&amp;gt; 0, directories =&amp;gt; 0, files =&amp;gt; 0 }; opendir(DIR, $dir) or die(&amp;quot;Can not open directory:$dir ($!)&amp;quot;); @list = readdir(DIR); closedir(DIR); foreach my $file (sort @list){ next if $file =~ /^\.</description>
    </item>
    
    <item>
      <title>ディレクトリ中のファイルサイズの合計値を再帰的に集計したい その１</title>
      <link>http://tatsuyano.github.io/2013/04/06/find-cmd-on-mac-1/</link>
      <pubDate>Sat, 06 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/06/find-cmd-on-mac-1/</guid>
      <description>たまにディレクトリ中のファイルサイズの合計値を、再帰的に集計したいときがある。
で、いつも考えなしにこちらのサイトで紹介されているコマンドを叩いていたわけなんですが、
ディレクトリ中のファイルサイズ合計値を バイト表示
find -type f -printf &amp;quot;%s\n&amp;quot; |perl -ne &#39;$i++; $byte += $_; $str = &amp;quot;\r$i files, $byte byte&amp;quot;; $str =~ s/(\d{1,3})(?=(?:\d\d\d)+(?!\d))/$1,/g; print $str&#39;  mac(osx)だと動かない。どうやらmacのfindのオプションに printf がないもよう。
Why does Mac&amp;rsquo;s $find not have the option -printf?
そこで printf f &amp;lsquo;%s\n&amp;rsquo; のかわりに stat -f &amp;lsquo;%z&amp;rsquo; を代用してみた。
find ./ -print0 | xargs -0 stat -f &#39;%z&#39; | perl -ne &#39;$i++; $byte += $_; $str = &amp;quot;\r$i files, $byte byte&amp;quot;; $str =~ s/(\d{1,3})(?</description>
    </item>
    
    <item>
      <title>cpanmでDBD::mysqlをインストールしようとすると、mysql.hがないと怒られる</title>
      <link>http://tatsuyano.github.io/2012/09/04/cpanm-dbd-mysql/</link>
      <pubDate>Tue, 04 Sep 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/09/04/cpanm-dbd-mysql/</guid>
      <description> インストール cpanm DBD::mysql  しようするとエラーが。。build.logを確認してみると
emacs .cpanm/build.log ... dbdimp.h:24:49: error: mysql.h: そのようなファイルやディレクトリはありません  とのこと。ググったところ、「mysql.h」は「mysql-devel」に入っているらしいので、mysql-develをインストールし、再度 cpanm DBD::mysqlを実行。
sudo yum -y install mysql-devel ... cpanm DBD::mysql  今度は
emacs .cpanm/build.log ... make: *** [test_dynamic] エラー 255  エラーの原因がよくわからなかったので、再度で検索したところ、下記のサイトの方法で対応できました。
Mac OS XにDBD::mysqlをインストール
cd .cpanm/latest-build/DBD-mysql* perl Makefile.PL --testuser=&#39;hoge&#39; --testpassword=&#39;piyo&#39; make make test make install  mysqlの接続でしけていたんですね。勉強になりました。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Mac OS XにDBD::mysqlをインストール Rails3の bundle install で mysql.h が見つからないというエラー  </description>
    </item>
    
    <item>
      <title>perltidyをインストールし、emacsでも使えるように設定する</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-perltidy/</link>
      <pubDate>Tue, 21 Aug 2012 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-perltidy/</guid>
      <description>はじめに perltidyとはperlのソースを指定したフォーマットに整形してくれるツールです。
インストール 私の環境はCentOSなので、yumでインストールします。
macとCentOS両方同じ方法でインストールしたいので、Perlモジュールのperltidyを使用することにします。
cpanm Perl::Tidy  フォーマットを指定する ホームディレクトリに「.perltidyrc」というファイルを生成し、フォーマットを指定します。
以下の設定は、書籍「Perl Best Practices」のものらしいです。。
cat &amp;gt; .perltidyrc -l=78 # Max line width is 78 cols -i=4 # Indent level is 4 cols -ci=4 # Continuation indent is 4 cols -st # Output to STDOUT -se # Errors to STDERR -vt=2 # Maximal vertical tightness -cti=0 # No extra indentation for closing brackets -pt=1 # Medium parenthesis tightness -bt=1 # Medium brace tightness -sbt=1 # Medium square brace tightness -bbt=1 # Medium block brace tightness -nsfs # No space before semicolons -nolq # Don&#39;t outdent long quoted strings -wbb=&amp;quot;% + - * / x !</description>
    </item>
    
    <item>
      <title>flymakeを設定し、perlのシンタックスチェックをする</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-flymake/</link>
      <pubDate>Tue, 21 Aug 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-flymake/</guid>
      <description>はじめに perlのシンタックスチェックをflymakeで行うには、事前に「set-perl5lib.el」をインストールする必要があります。
set-perl5lib.elのインストール cd .emacs.d/elisp/ wget http://svn.coderepos.org/share/lang/elisp/set-perl5lib/set-perl5lib.el  .emacsの設定 ;; flymake for perl (require &#39;flymake) (require &#39;set-perl5lib) ;; http://svn.coderepos.org/share/lang/elisp/set-perl5lib/set-perl5lib.el (defvar flymake-perl-err-line-patterns &#39;((&amp;quot;\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]&amp;quot; 2 3 nil 1))) (defconst flymake-allowed-perl-file-name-masks &#39;((&amp;quot;\\.pl$&amp;quot; flymake-perl-init) (&amp;quot;\\.pm$&amp;quot; flymake-perl-init) (&amp;quot;\\.t$&amp;quot; flymake-perl-init) )) (defun flymake-perl-init () (let* ((temp-file (flymake-init-create-temp-buffer-copy &#39;flymake-create-temp-inplace)) (local-file (file-relative-name temp-file (file-name-directory buffer-file-name)))) (list &amp;quot;perl&amp;quot; (list &amp;quot;-wc&amp;quot; local-file)))) (defun flymake-perl-load () (interactive) (set-perl5lib) (defadvice flymake-post-syntax-check (before flymake-force-check-was-interrupted) (setq flymake-check-was-interrupted t)) (ad-activate &#39;flymake-post-syntax-check) (setq flymake-allowed-file-name-masks (append flymake-allowed-file-name-masks flymake-allowed-perl-file-name-masks)) (setq flymake-err-line-patterns flymake-perl-err-line-patterns) (flymake-mode t)) (add-hook &#39;cperl-mode-hook &#39;(lambda () (flymake-perl-load))) (defun next-flymake-error () (interactive) (flymake-goto-next-error) (let ((err (get-char-property (point) &#39;help-echo))) (when err (message err)))) (global-set-key &amp;quot;\M-e&amp;quot; &#39;next-flymake-error)  実行画面 参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>perl-completion.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-perl-completion/</link>
      <pubDate>Mon, 20 Aug 2012 04:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-perl-completion/</guid>
      <description> はじめに すでにauto-intall.elがインストールされている前提で話をすすめます。
auto-installのインストール手順はこちらをご覧ください。
インストール手順 emacsを起動し、
M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: perl-completionn &amp;lt;RET&amp;gt;  auto-isntall-batchを実行、次にインストールしたいパッケージ名(perl-completion)を入力します。
すると自動で複数ソースのダウンロードが始まります。
ダウンロードし終わると「モード行」に
Type C-c C-c to continue; Type C-c C-d for view diff; Type C-c C-q to quit.  というメッセージが出てくるので、「C-c C-c」と入力し、ダウンロードしたソースを順番にコンパイルしていきます。
すべてコンパイルし終えると、以下のようなメッセージが表示され、インストールが完了します。
Installation is completed.  .emacsの設定 cperl-mode時に、auto-completion(とauto-complete)を有効にするように設定します。
;; perl-completion (add-hook &#39;cperl-mode-hook (lambda () (require &#39;auto-complete) (require &#39;perl-completion) (add-to-list &#39;ac-sources &#39;ac-source-perl-completion) (perl-completion-mode t)))  実行画面 </description>
    </item>
    
  </channel>
</rss>