<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/php/</link>
    <description>Recent content in Php on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 04 Dec 2014 01:00:00 +0900</lastBuildDate>
    <atom:link href="http://tatsuyano.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>phpenvを導入する</title>
      <link>http://tatsuyano.github.io/2014/12/04/how-to-install-and-setup-phpenv/</link>
      <pubDate>Thu, 04 Dec 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/12/04/how-to-install-and-setup-phpenv/</guid>
      <description>

&lt;p&gt;phpもanyenvで管理できるようなので入れてみた。&lt;/p&gt;

&lt;p&gt;anyenv本体のインストールは&lt;a href=&#34;http://tatsuyano.github.io/2014/08/19/install-anyenv/&#34;&gt;こちら&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;phpenvのインストール:5ec93e3fb5ee99a57424f7e5d9f76c90&#34;&gt;phpenvのインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ anyenv install phpenv
$ source $HOME/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;phpenv には2種類あるらしく、anyenv でインストールされるのは &lt;a href=&#34;https://github.com/phpenv/phpenv&#34;&gt;phpenv/phpenv&lt;/a&gt;。
この phpenv/phpenv だと、anyenv だとうごかなかったので、&lt;a href=&#34;https://github.com/CHH/phpenv&#34;&gt;CHH/phpenv&lt;/a&gt; に差し替える必要がある。&lt;/p&gt;

&lt;h3 id=&#34;phpenvの差し替え:5ec93e3fb5ee99a57424f7e5d9f76c90&#34;&gt;phpenvの差し替え&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ~/.anyenv/envs/phpenv
$ git clone https://github.com/CHH/php-build.git plugins/php-build
$ rm libexec/phpenv-install
&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;

### PHPのインストール

結構必要なライブラリが多い。面倒なので、参考サイトに記載のあったライブラリを全部いれた。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum install -y re2c libxml2-devel openssl-devel libcurl-devel libjpeg-turbo-devel libpng-devel libmcrypt-devel readline-devel libtidy-devel libxslt-devel
$ phpenv install 5.5.17
$ phpenv global 5.5.17
$ source $HOME/.zshrc
$ which php
/home/noguchi/.anyenv/envs/phpenv/shims/php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php.ini も anyenv 以下に作成される
&lt;code&gt;/home/noguchi/.anyenv/envs/phpenv/versions/5.5.17/etc/php.ini&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:5ec93e3fb5ee99a57424f7e5d9f76c90&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://y-uti.hatenablog.jp/entry/2014/10/13/232540&#34;&gt;anyenv + phpenv + php-build で複数のバージョンの PHP を切り替える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nishimiyahara.net/2014/06/25/071123&#34;&gt;anyenvのphpenvを入れ替える方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:5ec93e3fb5ee99a57424f7e5d9f76c90&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2014/08/19/install-anyenv/&#34;&gt;anyenvをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>require_onceを使わず、Composerを使う</title>
      <link>http://tatsuyano.github.io/2014/12/02/without-using-require-once-use-composer/</link>
      <pubDate>Tue, 02 Dec 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/12/02/without-using-require-once-use-composer/</guid>
      <description>

&lt;p&gt;毎回&lt;code&gt;require_once&lt;/code&gt;を書くのがだるかったので、ローカルのパッケージを自動で読み込む方法を調べてみたら、
PHP5.3以上ならComposerが使えることを知ったので試してみた。&lt;/p&gt;

&lt;p&gt;ただ前提として読み込まれる側のソース(パッケージ)は、Gitなど
バージョンコントロールシステム(vcs)で管理されている必要がある。&lt;/p&gt;

&lt;h3 id=&#34;composer-のインストール:d79e389d4b88a2f77afff7061c12ad28&#34;&gt;Composer のインストール&lt;/h3&gt;

&lt;p&gt;まずはComposerのインストールから。
今回はすでにpathの通っている&lt;code&gt;/usr/local/bin&lt;/code&gt;にインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo bash
# cd /usr/local/bin
# curl -sS https://getcomposer.org/installer | php

$ which composer.phar
/usr/local/bin/composer.phar
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

### ローカルパッケージの構成

読み込まれる(require_onceされる)側の構成は以下のようにした。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer-test
│
├── composer.json
└── src
    └── Tatsuyano
        ├── ParentClass
        │   └── ChildClass.php
        └── ParentClass.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まずは作成したパッケージ(&lt;code&gt;composer-test&lt;/code&gt;)をかならず&lt;code&gt;git commit&lt;/code&gt;する。&lt;br /&gt;
というのも、たとえ読み込む側、読み込まれる側、両方が同じローカル環境内にあっても
読み込む側は、Git 経由でソースを読み込む(インストールする)ので、
&lt;code&gt;commit&lt;/code&gt;した内容しか反映されない。&lt;/p&gt;

&lt;h4 id=&#34;composer-json:d79e389d4b88a2f77afff7061c12ad28&#34;&gt;composer.json&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{
    &#34;name&#34;: &#34;composer-test/tatsuyano&#34;,
    &#34;description&#34;: &#34;Composerを使ってのファイルのロードテスト&#34;,
    &#34;license&#34;: &#34;MIT&#34;,
    &#34;autoload&#34;: {
        &#34;psr-0&#34;: {
            &#34;Tatsuyano\\&#34;: &#34;src/&#34;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

#### ParentClass.php

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;namespace Tatsuyano;

class ParentClass
{
    public static function name()
    {
        return &#34;ParentClass&#34;;
    }

    public static function nameOfChild()
    {
        return ParentClass\ChildClass::name();
    }

    public static function child($class_name = &#39;ChildClass&#39;)
    {
        # namespaceを切ったクラスを生成する場合、&#39;\&#39;で区切る必要があるが
        #クラスを動的に生成する場合は、sprintfで指定しないと
        #シンタックスエラーになる
        $class = sprintf(&#34;Tatsuyano\ParentClass\%s&#34;,$class_name);
        return new $class();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あえて&lt;code&gt;use&lt;/code&gt;は使わずに namespace をすべて指定している。
結局&lt;code&gt;use&lt;/code&gt;を使いまくると&lt;code&gt;require_once&lt;/code&gt;を使いまくるのと同じになってしまうのと、
動的にクラスを生成したい場合、実装時にクラスを明示(&lt;code&gt;use&lt;/code&gt;)できないため。&lt;/p&gt;

&lt;h4 id=&#34;childclass-php:d79e389d4b88a2f77afff7061c12ad28&#34;&gt;ChildClass.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;namespace Tatsuyano\ParentClass;

class ChildClass
{
    public static function name()
    {
        return &#34;ChildClass&#34;;
    }

    public function say()
    {
        return &#34;hello&#34;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

### パッケージの読み込み

読み込む側の構成は以下とする。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.
├── composer.json
├── test.php #-&gt; composer-testパッケージを利用する側のソース
└── vendor #-&gt; Composerでパッケージをインストールしたあとに生成される
    ├── autoload.php
    └── composer
    └── composer-test #-&gt; インストールされたパッケージ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージを読み込む(インストール)には
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer.pear update
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;code&gt;vendor&lt;/code&gt;ディレクトリ以下にインストールしたソースを直接編集したあとに
再度&lt;code&gt;$ composer.pear update&lt;/code&gt;しても、編集したソースは更新(上書き)されない。&lt;/p&gt;

&lt;h4 id=&#34;composer-json-1:d79e389d4b88a2f77afff7061c12ad28&#34;&gt;composer.json&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;repositories/url&lt;/code&gt;ディレクティブには、
読み込まれる側の&lt;code&gt;composer.json&lt;/code&gt;が入っているディレクトリを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{
    &#34;repositories&#34;: [
        {
            &#34;type&#34;: &#34;vcs&#34;,
            &#34;url&#34;: &#34;/home/noguchi/src/git/composer-test/&#34;
        }
    ],
    &#34;require&#34;: {
        &#34;composer-test/tatsuyano&#34; : &#34;dev-master&#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、BitBucket の非公開リポジトリを設定することもできる。&lt;br /&gt;
&lt;code&gt;&amp;quot;url&amp;quot;: &amp;quot;git@bitbucket.org:tatsuyano/composer-test.git&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;test-php-読み込む側のプログラム:d79e389d4b88a2f77afff7061c12ad28&#34;&gt;test.php(読み込む側のプログラム)&lt;/h4&gt;

&lt;p&gt;インストールされたパッケージを使うには&lt;code&gt;include_once &amp;quot;vendor/autoload.php&amp;quot;&lt;/code&gt;で。&lt;br /&gt;
まとめてソースを&lt;code&gt;include&lt;/code&gt;することができる。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;include_once &amp;ldquo;vendor/autoload.php&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;use Tatsuyano\ParentClass;&lt;/p&gt;

&lt;p&gt;print ParentClass::name() . &amp;ldquo;\n&amp;rdquo;;
print ParentClass::nameOfChild() . &amp;ldquo;\n&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;$child = ParentClass::child();
print $child-&amp;gt;say() . &amp;ldquo;\n&amp;rdquo;;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:d79e389d4b88a2f77afff7061c12ad28&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/misogi@github/items/8d02f2eac9a91b4e6215&#34;&gt;PHPで、spl_autoload_registerを使って、require_once地獄を脱出しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kore1server.com/182/Composer%E3%81%A7%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E5%8F%96%E3%82%8A%E8%BE%BC%E3%82%80&#34;&gt;Composerでローカルのパッケージを取り込む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP Conference 2014にいってきた</title>
      <link>http://tatsuyano.github.io/2014/10/18/i-went-to-php-conference-2014/</link>
      <pubDate>Sat, 18 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/18/i-went-to-php-conference-2014/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i_went_to_php_conference_2014_01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;仕事でPHPをつかうようになったので、&lt;a href=&#34;http://phpcon.php.gr.jp/w/2014/&#34;&gt;PHPのカンファレンス&lt;/a&gt;に参加してきた。&lt;/p&gt;

&lt;h3 id=&#34;会場の雰囲気:78399f912e62e0f4658f2cfe4456005d&#34;&gt;会場の雰囲気&lt;/h3&gt;

&lt;p&gt;本当は朝一から行きたかったが、やることがあって12:10分の部から参加。&lt;br /&gt;
申込時、定員オーバーしてたので、すごく混んでいると思ったが意外と空いていた。&lt;/p&gt;

&lt;h3 id=&#34;セッション:78399f912e62e0f4658f2cfe4456005d&#34;&gt;セッション&lt;/h3&gt;

&lt;p&gt;Perlでも言えることだけど、やっぱり歴史ある言語だけに、あらためて発表することが少ないのか、自社のシステム構成や、ミドルウェアについてのセッションが多かったような気がする。&lt;/p&gt;

&lt;p&gt;自分が見れた中で面白かったのは「PHPerがAWSと出会ってDevOpsを目指した話」と「Lightning Talks(無差別級)」のPHP7の話。&lt;/p&gt;

&lt;p&gt;AWSについては、そろそろ実務でバリバリ触れる環境に身を置いておかないと、
今後AWSなどクラウドを提供する側が推奨するベストプラクティスに乗っかった上での
開発手法みたいなのに乗り遅れるなあと感じた。&lt;/p&gt;

&lt;p&gt;PHP7がPHP6をすっ飛ばした話は、なんか少しノスタルジックな気分になった。&lt;/p&gt;

&lt;h3 id=&#34;感想:78399f912e62e0f4658f2cfe4456005d&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;今まで自分はあまりPHPを好きではなかった理由の一つに、PHPのコミュニティがわかりずらい(PHPの有名人の顔が見えにくい)というのがあったんだけど、今回少しPHPのコミュニティの匂いが感じられてよかった。&lt;/p&gt;

&lt;p&gt;あと「PHPer」の読み方が「ペチパー」だということがわかって良かった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>herokuでfuelphpをデプロイ</title>
      <link>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</link>
      <pubDate>Tue, 07 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</guid>
      <description>

&lt;p&gt;まずはherokuの準備をしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/10/07/start-heroku/&#34;&gt;herokuことはじめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;herokuにデプロイするアプリを、github上に用意してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/10/06/git-management-of-fuelphp/&#34;&gt;fuelphpアプリのgit管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;herokuにアプリを登録:d97ffc7c51a6f7d385101bece8ee02c7&#34;&gt;herokuにアプリを登録&lt;/h4&gt;

&lt;p&gt;今回は sample-of-chat という名前のアプリを登録します。
アプリ名はわかりやすいように、リポジトリと同じ名前がいいと思います。
また、アプリ名がURLになるので、注意してください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://sample-of-chat.herokuapp.com&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd sample-of-chat
$ heroku create sample-of-chat

git remote -v
heroku  git@heroku.com:sample-of-chat.git (fetch)
heroku  git@heroku.com:sample-of-chat.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;webサーバーと&lt;code&gt;DocumentRoot&lt;/code&gt;を指定するファイル&lt;code&gt;Procfile&lt;/code&gt;を作成します。
webサーバーは&lt;code&gt;apache&lt;/code&gt;か&lt;code&gt;nginx&lt;/code&gt;から選択します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd sample-of-chat
$ cat &gt; Procfile
web: vendor/bin/heroku-php-apache2 public/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/custom-php-settings#setting-the-document-root&#34;&gt;Setting the document root&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次に、&lt;code&gt;.gitignore&lt;/code&gt;から&lt;code&gt;composer.lock&lt;/code&gt;をコメントアウトし、&lt;br /&gt;
&lt;code&gt;composer.json&lt;/code&gt;に設定(&lt;code&gt;bin-dir&lt;/code&gt;)を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;config&#34;: {
    &#34;bin-dir&#34;: &#34;vendor/bin&#34;,
    &#34;vendor-dir&#34;: &#34;fuel/vendor&#34;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;herokuにデプロイ:d97ffc7c51a6f7d385101bece8ee02c7&#34;&gt;herokuにデプロイ&lt;/h4&gt;

&lt;p&gt;herokuに&lt;code&gt;push&lt;/code&gt;することで、デプロイが行われます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでデプロイ完了です。デプロイが完了すると、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://sample-of-chat.herokuapp.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;にアクセスが可能になります。&lt;/p&gt;

&lt;p&gt;またデプロイされたアプリは、一定時間アクセスがないと、自動で&lt;code&gt;sleep&lt;/code&gt;状態になります。&lt;/p&gt;

&lt;h4 id=&#34;関連する記事:d97ffc7c51a6f7d385101bece8ee02c7&#34;&gt;関連する記事&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/10/07/start-heroku/&#34;&gt;herokuことはじめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/10/06/git-management-of-fuelphp/&#34;&gt;fuelphpアプリのgit管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;参考にしたサイト:d97ffc7c51a6f7d385101bece8ee02c7&#34;&gt;参考にしたサイト&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://exfreeter.hatenablog.com/entry/2013/12/09/235902&#34;&gt;Herokuの使い方まとめ(2013年12月時点、Rails使用)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spicy-space.hatenablog.com/entry/2014/06/22/013708&#34;&gt;HerokuがPHPに正式対応したのでFuelPHP動かしてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/custom-php-settings#setting-the-document-root&#34;&gt;Setting the document root&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>fuelphpアプリのgit管理</title>
      <link>http://tatsuyano.github.io/2014/10/06/git-management-of-fuelphp/</link>
      <pubDate>Mon, 06 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/06/git-management-of-fuelphp/</guid>
      <description>&lt;p&gt;fuelphpをcreate(clone)した状態だと、push先が&lt;code&gt;fuel&lt;/code&gt;を向いているので、アプリをgit管理するために&lt;code&gt;git init&lt;/code&gt;し直す必要がある。&lt;/p&gt;

&lt;p&gt;まずはfuelphpをインストールするための&lt;code&gt;oil&lt;/code&gt;コマンドをインストールし、アプリのひな形を作成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl get.fuelphp.com/oil | sh

$ cd Sites/
$ oil create sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要のないファイルを削除&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf .git .gitmodules *.md docs fuel/core fuel/packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fuel/core&lt;/code&gt;、&lt;code&gt;fuel/packages&lt;/code&gt;を&lt;code&gt;git submodule&lt;/code&gt;で新たにインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd sample
$ git init
$ git submodule add git://github.com/fuel/core.git fuel/core
$ git submodule add git://github.com/fuel/oil.git fuel/packages/oil
$ git submodule add git://github.com/fuel/auth.git fuel/packages/auth
$ git submodule add git://github.com/fuel/parser.git fuel/packages/parser
$ git submodule add git://github.com/fuel/orm.git fuel/packages/orm
$ git submodule add git://github.com/fuel/email.git fuel/packages/email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;push先(GitHubなど)、remote/originを設定する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote add origin git@github.com:tatsuyano/sample.git
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>anyenvをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/19/install-anyenv/</link>
      <pubDate>Tue, 19 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/19/install-anyenv/</guid>
      <description>

&lt;p&gt;以前導入したanyenvのインストール方法を忘れないようメモしておきます。&lt;/p&gt;

&lt;p&gt;anyenvは ruby、perl、python、nodejs、php(phpenv) のバージョン管理を一元化してくれるツールです。これでhome直下がずいぶんスッキリ。素敵です。&lt;/p&gt;

&lt;h3 id=&#34;インストール:14bcb1cdd9b62f61ca95a6e6fd5293c5&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;ダウンロード&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/riywo/anyenv ~/.anyenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$HOME/.zshrc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;export PATH=&amp;quot;$HOME/.anyenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc
$ echo &#39;eval &amp;quot;$(anyenv init - zsh)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私は&lt;code&gt;oh-my-zsh&lt;/code&gt;を使っているので、実際は&lt;code&gt;~/.zshrc&lt;/code&gt;ではなく、&lt;code&gt;~/.oh-my-zsh/custom/main.zsh&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;p&gt;シェルを再実行し、anyenvの設定を反映させます。&lt;br /&gt;
&lt;code&gt;source $HOME/.zshrc&lt;/code&gt; でも結構です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ exec $SHELL -l
$ which anyenv
~/.anyenv/bin/anyenv
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/luckypool/items/f1e756e9d3e9786ad9ea&#34;&gt;anyenvで開発環境を整える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/DQNEO/items/ebf50c39f83970f1127c&#34;&gt;completions/plenv.bash:16: command not found: completeの対処法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rubyのインストール:14bcb1cdd9b62f61ca95a6e6fd5293c5&#34;&gt;rubyのインストール&lt;/h3&gt;

&lt;p&gt;とりあえずanyenv経由でrubyをインストールします。
rubyをインストールするには、事前にOpenSSL系のライブラリが必要なのでインストールしておきます。&lt;/p&gt;

&lt;p&gt;また&lt;a href=&#34;http://blog.10rane.com/2014/09/01/set-up-ruby-mode-of-emacs/&#34;&gt;別記事&lt;/a&gt;で紹介している&lt;code&gt;robe&lt;/code&gt;を使うには、&lt;code&gt;read-line&lt;/code&gt;が必要なので、入れておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum -y install openssl-devel
$ sudo yum -y install readline-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://futurismo.biz/archives/1389&#34;&gt;CentOSに rbenv 経路で Ruby 2.0.0-p195を入れようとしたら、エラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずはrbenvはインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ anyenv install rbenv
$ anyenv versions
rbenv:
* system (set by /home/$USER/.anyenv/envs/rbenv/version)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンは2.1.0を入れてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv install 2.1.0
$ rbenv global 2.1.0

$ anyenv versions
rbenv:
system
* 2.1.0 (set by /home/$USER/.anyenv/envs/rbenv/version)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;反映されない時は&lt;/em&gt;&lt;code&gt;source $HOME/.zshrc&lt;/code&gt;&lt;em&gt;で設定を読み込み直して下さい。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;試しに&lt;code&gt;bundler&lt;/code&gt;をインストールしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which gem
/home/$USER/.anyenv/envs/rbenv/shims/gem
$ gem install bundler
$ which bundle
/home/$USER/.anyenv/envs/rbenv/shims/bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pythonのインストール:14bcb1cdd9b62f61ca95a6e6fd5293c5&#34;&gt;pythonのインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum -y install patch
$ anyenv install pyenv
$ pyenv install 3.3.3
$ pyenv global 3.3.3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;node-jsのインストール:14bcb1cdd9b62f61ca95a6e6fd5293c5&#34;&gt;node.jsのインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ anyenv install ndenv
$ ndenv install v0.10.26
$ ndenv global v0.10.26
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他の言語も流れは同じです。&lt;br /&gt;
お疲れ様でした。&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:14bcb1cdd9b62f61ca95a6e6fd5293c5&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/luckypool/items/f1e756e9d3e9786ad9ea&#34;&gt;anyenvで開発環境を整える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/DQNEO/items/ebf50c39f83970f1127c&#34;&gt;completions/plenv.bash:16: command not found: completeの対処法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:14bcb1cdd9b62f61ca95a6e6fd5293c5&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2014/12/04/how-to-install-and-setup-phpenv/&#34;&gt;phpenvを導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>memcachedのインストール</title>
      <link>http://tatsuyano.github.io/2014/07/29/install-memcached/</link>
      <pubDate>Tue, 29 Jul 2014 04:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/install-memcached/</guid>
      <description>

&lt;p&gt;まずはyumでmemcachedのインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum install -y memcached memcached-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;libmemcachedのインストール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://launchpad.net/libmemcached/+download&#34;&gt;最新のソース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# cd /usr/local/src
# wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz
# tar xvzf libmemcached-1.0.18.tar.gz
# ./configure
# make
# make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/etc/sysconfig/memcached&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PORT=&amp;quot;11211&amp;quot;
USER=&amp;quot;apache&amp;quot;
MAXCONN=&amp;quot;1024&amp;quot;
CACHESIZE=&amp;quot;64&amp;quot;
OPTIONS=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;phpで使うために以下の設定:903ff49946c18317e229ef4fb1b593c4&#34;&gt;PHPで使うために以下の設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# yum install -y php-pecl-memcached
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP Extensionのインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# git clone https://github.com/php-memcached-dev/php-memcached.git
# cd php-memcached
# phpize
# ./configure --with-libmemcached-dir=/usr/local
# make
# make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHPで設定が有効になっているか確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php -i | grep memcached

memcached
memcached support =&amp;gt; enabled
libmemcached version =&amp;gt; 1.0.18
memcached.compression_factor =&amp;gt; 1.3 =&amp;gt; 1.3
memcached.compression_threshold =&amp;gt; 2000 =&amp;gt; 2000
memcached.compression_type =&amp;gt; fastlz =&amp;gt; fastlz
memcached.serializer =&amp;gt; php =&amp;gt; php
memcached.sess_binary =&amp;gt; 0 =&amp;gt; 0
memcached.sess_connect_timeout =&amp;gt; 1000 =&amp;gt; 1000
memcached.sess_consistent_hash =&amp;gt; 0 =&amp;gt; 0
memcached.sess_lock_expire =&amp;gt; 0 =&amp;gt; 0
memcached.sess_lock_max_wait =&amp;gt; 0 =&amp;gt; 0
memcached.sess_lock_wait =&amp;gt; 150000 =&amp;gt; 150000
memcached.sess_locking =&amp;gt; 1 =&amp;gt; 1
memcached.sess_number_of_replicas =&amp;gt; 0 =&amp;gt; 0
memcached.sess_prefix =&amp;gt; memc.sess.key. =&amp;gt; memc.sess.key.
memcached.sess_randomize_replica_read =&amp;gt; 0 =&amp;gt; 0
memcached.sess_remove_failed =&amp;gt; 0 =&amp;gt; 0
memcached.sess_sasl_password =&amp;gt; no value =&amp;gt; no value
memcached.sess_sasl_username =&amp;gt; no value =&amp;gt; no value
memcached.store_retry_count =&amp;gt; 2 =&amp;gt; 2
memcached.use_sasl =&amp;gt; 0 =&amp;gt; 0
Registered save handlers =&amp;gt; files user memcached
PWD =&amp;gt; /tmp/php-memcached
_SERVER[&amp;quot;PWD&amp;quot;] =&amp;gt; /tmp/php-memcached
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /etc/init.d/memcached start
# /etc/init.d/httpd restart

ps auxwww|grep mem
apache   24255  0.0  0.0 330844   988 ?        Ssl  18:04   0:00 memcached -d -p 11211 -u apache -m 64 -c 1024 -P /var/run/memcached/memcached.pid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;memcachedに保存されている情報の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ memcached-tool localhost display
$ memcached-tool localhost dump | strings
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/modified/20130107/1357553481&#34;&gt;memcached のインストール。作業メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://9ensan.com/blog/programming/php/fuelphp-cache-memcached/&#34;&gt;FuelPHPのキャッシュライブラリ – memcached編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takashi-kun.hatenablog.com/entry/2013/11/23/031343&#34;&gt;PHPのMemcachedモジュールをインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://c-brains.jp/blog/wsg/10/07/30-105035.php&#34;&gt;memcached の中身を確認するなら memcached-tool コマンド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://colopl.co.jp/tech/blog/2012/06/1877/&#34;&gt;Memcached の key 一覧を取得するまでの過程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/masayuki14/touch/20120710/1341877792&#34;&gt;PHPでmemcachedを使うときのモジュールパフォーマンス比較&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://l-w-i.net/t/memcached/command_001.txt&#34;&gt;memcachedコマンド一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お疲れ様でした。&lt;/p&gt;

&lt;h4 id=&#34;関連する記事:903ff49946c18317e229ef4fb1b593c4&#34;&gt;関連する記事&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/07/29/install-deamontools/&#34;&gt;deamontoolsのインストール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>fuelphpでAgentClassを設定する</title>
      <link>http://tatsuyano.github.io/2014/07/29/fuelphp-use-agent-class/</link>
      <pubDate>Tue, 29 Jul 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/fuelphp-use-agent-class/</guid>
      <description>

&lt;p&gt;ブラウザの識別やモバイルフォンとPCの識別をするには、fuelではAgentクラスを使用する。&lt;/p&gt;

&lt;p&gt;AgentクラスはPHPのget_browser関数を利用する。&lt;/p&gt;

&lt;p&gt;get_browser関数は、UA情報を&lt;a href=&#34;http://tempdownloads.browserscap.com/&#34;&gt;Browser Capabilities Project&lt;/a&gt;というサイトから取得する。
fuelではこのサイトからUA情報を取得(キャッシュ化し2回目のアクセスからキャッシュを参照)し、識別する。&lt;/p&gt;

&lt;h4 id=&#34;configファイルにua情報-サイト-の取得先urlなどを設定:46b9b5ce7f3c77f59a7ac57dcd96ae9b&#34;&gt;configファイルにUA情報(サイト)の取得先URLなどを設定&lt;/h4&gt;

&lt;p&gt;fuel/app/config/config.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;browscap&#39; =&amp;gt; array(
    &#39;enabled&#39; =&amp;gt; true,
    &#39;url&#39;     =&amp;gt; &#39;http://browsers.garykeith.com/stream.asp?BrowsCapINI&#39;,
    &#39;method&#39; =&amp;gt; &#39;wrapper&#39;,
    &#39;file&#39;   =&amp;gt; &#39;/tmp/php_browscap.ini&#39;,
),
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;キャッシュの保存先について:46b9b5ce7f3c77f59a7ac57dcd96ae9b&#34;&gt;キャッシュの保存先について&lt;/h4&gt;

&lt;p&gt;fuelでは fuel/app/cache にキャシュを保存している&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cache
└── fuel
    └── agent
            ├── browscap.cache
            └── browscap_file.cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;キャッシュ周りで権限エラーがでたので、権限を&lt;code&gt;777&lt;/code&gt;にする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod -R 777 fuel/app/cache/
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;agentクラスの実装:46b9b5ce7f3c77f59a7ac57dcd96ae9b&#34;&gt;Agentクラスの実装&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Agent::is_mobiledevice();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考サイト:46b9b5ce7f3c77f59a7ac57dcd96ae9b&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://btt.hatenablog.com/entry/2012/07/04/001254&#34;&gt;FuelPHPのAgentクラスと拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fuelphp.com/docs/classes/agent/config.html&#34;&gt;Agent Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fuelphp.seesaa.net/article/279094100.html&#34;&gt;FuelPHPのAgentクラスによる端末振り分けが簡単すぎる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:46b9b5ce7f3c77f59a7ac57dcd96ae9b&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/07/29/fuelphp-validation/&#34;&gt;fuelphpのエラー文言を日本語化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/07/28/use-the-redis-in-fuelphp/&#34;&gt;fuelphpでredisを使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>fuelphpのエラー文言を日本語化する</title>
      <link>http://tatsuyano.github.io/2014/07/29/fuelphp-validation/</link>
      <pubDate>Tue, 29 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/fuelphp-validation/</guid>
      <description>

&lt;h4 id=&#34;config-phpに設定を追加:c686d533785df368c7d44ebfce4543f8&#34;&gt;config.phpに設定を追加&lt;/h4&gt;

&lt;p&gt;app/config/config.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//&#39;language&#39;           =&amp;gt; &#39;en&#39;, // Default language
//&#39;language_fallback&#39;  =&amp;gt; &#39;en&#39;, // Fallback language when file isn&#39;t available for default language
//&#39;locale&#39;             =&amp;gt; &#39;en_US&#39;, // PHP set_locale() setting, null to not set
&#39;language&#39;           =&amp;gt; &#39;ja&#39;,
&#39;language_fallback&#39;  =&amp;gt; &#39;en&#39;,
&#39;locale&#39;             =&amp;gt; &#39;ja_JP.UTF-8&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;langディレクトリに日本語用のディレクトリを作成:c686d533785df368c7d44ebfce4543f8&#34;&gt;langディレクトリに日本語用のディレクトリを作成&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;mkdir app/lang/ja
touch app/lang/ja/validation.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;validation.phpの設定は core/lang/en/validation.php を参照
設定されているkey(メソッド)は、core/classes/validation.phpで設定されている&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
return array(
    &#39;required&#39;         =&amp;gt; &#39;「:label」は必須です&#39;,
    &#39;min_length&#39;       =&amp;gt; &#39;「:label」は:param:1文字以上で入力してください&#39;,
    &#39;max_length&#39;       =&amp;gt; &#39;「:label」は:param:1文字以内で入力してください&#39;,
    &#39;exact_length&#39;     =&amp;gt; &#39;「:label」は:param:1文字で入力してください&#39;,
    &#39;match_value&#39;      =&amp;gt; &#39;「:label」は「:param:1」と一致していません&#39;,
    &#39;match_pattern&#39;    =&amp;gt; &#39;「:label」はパターン「:param:1」と一致しません&#39;,
    &#39;match_field&#39;      =&amp;gt; &#39;「:label」は「:param:1」と一致していません&#39;,
    &#39;valid_email&#39;      =&amp;gt; &#39;「:label」はメールアドレスが不正です&#39;,
    &#39;valid_emails&#39;     =&amp;gt; &#39;「:label」に不正なメールアドレスが含まれてます&#39;,
    &#39;valid_url&#39;        =&amp;gt; &#39;「:label」は不正なURLです&#39;,
    &#39;valid_ip&#39;         =&amp;gt; &#39;「:label」は不正なIPアドレスです&#39;,
    &#39;numeric_min&#39;      =&amp;gt; &#39;「:label」は:param:1以上で入力してください&#39;,
    &#39;numeric_max&#39;      =&amp;gt; &#39;「:label」は:param:1以内で入力してください&#39;,
    &#39;valid_string&#39;     =&amp;gt; &#39;「:label」は:param:1で入力する必要があります&#39;,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;自前のvalidation-helperクラス-を作成する:c686d533785df368c7d44ebfce4543f8&#34;&gt;自前のvalidation(helperクラス)を作成する&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;mkdir app/classes/helper
touch app/classes/helper/myvalidation.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/classes/helper/myvalidation.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Helper_MyValidation
{
    /**
     * 数字をチェックするバリデーション
     *
     * @param  string val
     * @return bool   numeric or blank is &#39;true&#39;.
     */
    public static function _validation_numeric_only($val)
    {
        mb_regex_encoding(&amp;quot;UTF-8&amp;quot;);
        return preg_match(&amp;quot;/^[\d]*$/&amp;quot;, $val) === 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;自作したメソッドのアラートを登録する:c686d533785df368c7d44ebfce4543f8&#34;&gt;自作したメソッドのアラートを登録する&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;cat fuel/app/lang/ja/validation.php | grep numeric_only
&#39;numeric_only&#39;     =&amp;gt; &#39;「:label」は数字のみで入力してください&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;controllerで自作のバリデーションの呼び出し:c686d533785df368c7d44ebfce4543f8&#34;&gt;controllerで自作のバリデーションの呼び出し&lt;/h4&gt;

&lt;p&gt;app/classes/controller/hoge.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function action_create()
{
  $val = Validation::forge();
  $val-&amp;gt;add_callable(&#39;Helper_MyValidation&#39;);
  $val-&amp;gt;add_field(&#39;name&#39;,&#39;名前&#39;,&#39;required|min_length[2]|max_length[30]&#39;);
  $val-&amp;gt;add_field(&#39;email&#39;,&#39;Email&#39;,&#39;required|valid_email&#39;);
  $val-&amp;gt;add_field(&#39;tel&#39;,&#39;電話番号&#39;,&#39;numeric_only&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;どこでバリデーションを呼ぶべきか:c686d533785df368c7d44ebfce4543f8&#34;&gt;どこでバリデーションを呼ぶべきか&lt;/h3&gt;

&lt;p&gt;modelかcontroller どちらに実装すべきかは迷いましたが、今回はcontrollerに実装するようにしました。
理由はfieldsetを使わないからです。&lt;/p&gt;

&lt;p&gt;fieldsetは便利ですが、どうしても細かいところに手が届かないのと、デザイナーさんと分業するには、少し勝手が悪いかなあと思いました。&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:c686d533785df368c7d44ebfce4543f8&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fuelphp.jp/docs/1.7/classes/validation/validation.html&#34;&gt;Validation クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://raining.bear-life.com/fuelphp/%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B&#34;&gt;バリデーションのルールを追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:c686d533785df368c7d44ebfce4543f8&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/07/29/fuelphp-use-agent-class/&#34;&gt;fuelphpでAgentClassを設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/07/28/use-the-redis-in-fuelphp/&#34;&gt;fuelphpでredisを使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PHP5.4から error_reportingのE_ALLにE_RISTRICTが加わった</title>
      <link>http://tatsuyano.github.io/2014/07/28/e_ristrict-is-added-to-the-e_all/</link>
      <pubDate>Mon, 28 Jul 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/28/e_ristrict-is-added-to-the-e_all/</guid>
      <description>

&lt;p&gt;fuelphp案件でcomposer経由でxml_rpc2をインストールしたら、以下のようなエラーが出た&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Uncaught exception Fuel\Core\PhpErrorException: Non-static method PEAR::loadExtension() should not be called statically
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初はソースの依存関係が原因かなあと思ったが、調べてみるとそうではなく
PHP5.4から &lt;code&gt;error_reportingのE_ALL&lt;/code&gt;に&lt;code&gt;E_RISTRICT&lt;/code&gt;が加わったことで、エラーと判定されるようになった&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://life.co-hey.com/2013/04/php5-4%E3%81%8B%E3%82%89%E3%81%AFerror_reporting%E3%81%AEe_all%E3%81%ABe_ristrict%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B/&#34;&gt;php5.4からはerror_reportingのE_ALLにE_RISTRICTが含まれる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.thingslabo.com/archives/000184.html&#34;&gt;PHPでHTML上にエラー表示/非表示する php.ini 設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;対象箇所でのみerror-reportingを止めることにした:30914d35f563b3c38cf63575b62c0153&#34;&gt;対象箇所でのみerror_reportingを止めることにした&lt;/h4&gt;

&lt;p&gt;production環境以外で、かつ一部分でのみ&lt;code&gt;error_reporting&lt;/code&gt;を止めたかったので、対象箇所の前後で一時的に解除した&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$before_level = error_reporting(0); // error_report解除

$options = array(&#39;prefix&#39; =&amp;gt; &#39;package.&#39;);
$client = \XML_RPC2_Client::create(&#39;http://pear.php.net/xmlrpc.php&#39;, $options);
$result = $client-&amp;gt;info(&#39;XML_RPC2&#39;);
print_r($result);

error_reporting($before_level); // error_reportを元に戻す
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/ja/function.error-reporting.php&#34;&gt;error_reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.php.net/manual/ja/errorfunc.constants.php&#34;&gt;定義済み定数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>fuelphpでredisを使う</title>
      <link>http://tatsuyano.github.io/2014/07/28/use-the-redis-in-fuelphp/</link>
      <pubDate>Mon, 28 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/28/use-the-redis-in-fuelphp/</guid>
      <description>

&lt;p&gt;まずはredisのインストールから&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yum --enablerepo=epel install -y redis
$ /etc/init.d/redis start
redis-server を起動中:                                  [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;confの場所&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emacs /etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;redisが正常にインストールされているか確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli
redis 127.0.0.1:6379&amp;gt; set name &#39;hoge&#39;
OK
redis 127.0.0.1:6379&amp;gt; get name
&amp;quot;hoge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存されているKEYを表示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli

redis 127.0.0.1:6379&amp;gt; KEYS *
1) &amp;quot;particles&amp;quot;
2) &amp;quot;name&amp;quot;
redis 127.0.0.1:6379&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fuelphpの設定:e4a364e23391fc6a82f3c0ef76f3e375&#34;&gt;fuelphpの設定&lt;/h4&gt;

&lt;p&gt;config/db.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;redis&#39; =&amp;gt; array(
    &#39;default&#39; =&amp;gt; array(
    &#39;hostname&#39; =&amp;gt; &#39;127.0.0.1&#39;,
    &#39;port&#39;     =&amp;gt; 6379
  )
),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;config.session.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;driver&#39; =&amp;gt; &#39;redis&#39;,
....
// specific configuration settings for redis based sessions
&#39;redis&#39; =&amp;gt; array(
  &#39;cookie_name&#39; =&amp;gt; &#39;fuelrid&#39;, // name of the session cookie 
  &#39;database&#39;    =&amp;gt; &#39;default&#39;  // name of the redis database to use
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考サイト:e4a364e23391fc6a82f3c0ef76f3e375&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://konboi.hatenablog.com/entry/2013/03/05/155107&#34;&gt;redisサーバー構築メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://w.koshigoe.jp/study/?%5BKVS%5D%5BRedis%5D+Redis+%A5%B3%A5%DE%A5%F3%A5%C9%B0%EC%CD%F7&#34;&gt;KOSHIGOE学習帳 - [KVS][Redis] Redis コマンド一覧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fuelphp.jp/docs/1.7/classes/redis.html&#34;&gt;Redis_Db クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://btt.hatenablog.com/entry/2012/06/28/004230&#34;&gt;FuelPHPでRedisを使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/akishin999/20130607/1370580692&#34;&gt;Redis でお手軽に複数台構成の検証環境を作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:e4a364e23391fc6a82f3c0ef76f3e375&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/07/29/fuelphp-use-agent-class/&#34;&gt;fuelphpでAgentClassを設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.10rane.com/2014/07/29/fuelphp-validation/&#34;&gt;fuelphpのエラー文言を日本語化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HandlerSocketをインストールする</title>
      <link>http://tatsuyano.github.io/2013/06/10/handlersocket-install/</link>
      <pubDate>Mon, 10 Jun 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/06/10/handlersocket-install/</guid>
      <description>

&lt;h2 id=&#34;インストールする内容:70ecf40fc52ac5a33c486956612d2368&#34;&gt;インストールする内容&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;rpm版 MySQL 5.1.68&lt;/li&gt;
&lt;li&gt;HandlerSocket-Plugin-for-MySQL 最新版(2013/06/05)&lt;/li&gt;
&lt;li&gt;php-handlersocket 0.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;作業の流れ:70ecf40fc52ac5a33c486956612d2368&#34;&gt;作業の流れ&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;すでにyumでインストールしてあるMySQLの削除&lt;/li&gt;
&lt;li&gt;MySQL(rpm版)のインストール&lt;/li&gt;
&lt;li&gt;Handler Socketのインストール&lt;/li&gt;
&lt;li&gt;php-handlersocketのインストール&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;すでにyumでインストールしてあるmysqlの削除:70ecf40fc52ac5a33c486956612d2368&#34;&gt;すでにyumでインストールしてあるMySQLの削除&lt;/h2&gt;

&lt;p&gt;前にテスト導入で成功したバージョンにあわせるため、yumでインストールしたMySQLを削除&lt;/p&gt;

&lt;h3 id=&#34;インストール済みのmysqlを確認:70ecf40fc52ac5a33c486956612d2368&#34;&gt;インストール済みのMySQLを確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;yum list installed | grep mysql
mysql.x86_64            5.1.69-1.el6_4  @updates
mysql-libs.x86_64       5.1.69-1.el6_4  @updates
mysql-server.x86_64     5.1.69-1.el6_4  @updates
php-mysql.x86_64        5.3.3-22.el6    @base
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;chkconfigからmysqldをoff:70ecf40fc52ac5a33c486956612d2368&#34;&gt;chkconfigからmysqldをoff&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;chkconfig --list mysqld
mysqld          0:off   1:off   2:on    3:on    4:on    5:on    6:off

chkconfig mysqld off
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;yumでインストールしたmysqlを削除:70ecf40fc52ac5a33c486956612d2368&#34;&gt;yumでインストールしたMySQLを削除&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;yum -y remove mysql mysql-server mysql-libs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-rpm版-のインストール:70ecf40fc52ac5a33c486956612d2368&#34;&gt;MySQL(rpm版)のインストール&lt;/h2&gt;

&lt;p&gt;過去にインストールしたmysqlのバージョンは5.1.66 だったが見つからなかったので、&lt;br /&gt;
近いバージョンの5.1.68をインストールすることにした。&lt;/p&gt;

&lt;h3 id=&#34;インストール先のディレクトリ作成:70ecf40fc52ac5a33c486956612d2368&#34;&gt;インストール先のディレクトリ作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /usr/src/redhat/RPMS/x86_64/
cd /usr/src/redhat/
mkdir BUILD SOURCES SPECS SRPMS
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rpmファイルのダウンロード:70ecf40fc52ac5a33c486956612d2368&#34;&gt;rpmファイルのダウンロード&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/src/redhat/RPMS/x86_64/
wget http://download.softagency.net/MySQL/Downloads/MySQL-5.1/MySQL-client-community-5.1.68-1.rhel5.x86_64.rpm
wget http://download.softagency.net/MySQL/Downloads/MySQL-5.1/MySQL-server-community-5.1.68-1.rhel5.x86_64.rpm
wget http://download.softagency.net/MySQL/Downloads/MySQL-5.1/MySQL-devel-community-5.1.68-1.rhel5.x86_64.rpm
wget http://download.softagency.net/MySQL/Downloads/MySQL-5.1/MySQL-shared-community-5.1.68-1.rhel5.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;インストール:70ecf40fc52ac5a33c486956612d2368&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;rpm -ivh MySQL*.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;インストールの確認:70ecf40fc52ac5a33c486956612d2368&#34;&gt;インストールの確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/mysql start
/usr/bin/mysql -uroot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handler-socketのインストール:70ecf40fc52ac5a33c486956612d2368&#34;&gt;Handler Socketのインストール&lt;/h2&gt;

&lt;p&gt;Handler Socketをインストールするには、MySQLのソース版とgitが必要。&lt;/p&gt;

&lt;h3 id=&#34;起動中のmysqlを停止させる-念のため:70ecf40fc52ac5a33c486956612d2368&#34;&gt;起動中のMySQLを停止させる(念のため)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/mysql stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mysqlのソース版をダウンロード:70ecf40fc52ac5a33c486956612d2368&#34;&gt;MySQLのソース版をダウンロード&lt;/h3&gt;

&lt;p&gt;ダウンロードするソースは、先ほどインストールしたMySQL 5.1.68と合わせること。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/src/redhat/SRPMS/
wget http://download.softagency.net/MySQL/Downloads/MySQL-5.1/MySQL-community-5.1.68-1.rhel5.src.rpm
rpm -ivh MySQL-community-5.1.68-1.rhel5.src.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/src/redhat/SOURCES/
wget http://download.softagency.net/MySQL/Downloads/MySQL-5.1/mysql-5.1.68.tar.gz
tar xvzf mysql-5.1.68.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;必要なライブラリなどをyumでインストール:70ecf40fc52ac5a33c486956612d2368&#34;&gt;必要なライブラリなどをyumでインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;yum -y install libtool gcc gcc-c++ openssl-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;handlersocket-plugin-for-mysqlをダウンロード-git-clone:70ecf40fc52ac5a33c486956612d2368&#34;&gt;HandlerSocket-Plugin-for-MySQLをダウンロード(git clone)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/
git clone git://github.com/ahiguti/HandlerSocket-Plugin-for-MySQL.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configure-and-make-install:70ecf40fc52ac5a33c486956612d2368&#34;&gt;configure and make install&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/HandlerSocket-Plugin-for-MySQL/

./autogen.sh

./configure \
--with-mysql-source=/usr/src/redhat/SOURCES/mysql-5.1.68 \
--with-mysql-bindir=/usr/bin \
--with-mysql-plugindir=/usr/lib64/mysql/plugin
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;with-mysql-source&amp;hellip;.. MySQLのソースコードのトップディレクトリを指定します。&lt;/li&gt;
&lt;li&gt;with-mysql-bindir&amp;hellip;.. インストール済みのMySQLのmysql_configコマンドが有るディレクトリを指定します。&amp;rdquo;which mysql_config&amp;rdquo;で調べます。&lt;/li&gt;
&lt;li&gt;with-mysql-plugindir.. MySQLのpluginディレクトリを指定します。以下のコマンドで確認できます。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/src/redhat/RPMS/x86_64/
rpm -ql MySQL-server-community-5.1.68-1.rhel5 | grep plugin
/usr/lib64/mysql/plugin/ha_innodb_plugin.so
/usr/lib64/mysql/plugin/ha_innodb_plugin.so.0
/usr/lib64/mysql/plugin/ha_innodb_plugin.so.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configure-時の注意:70ecf40fc52ac5a33c486956612d2368&#34;&gt;configure 時の注意&lt;/h3&gt;

&lt;p&gt;自分は &amp;ndash;with-mysql-plugindirのパスを間違えて、&lt;br /&gt;
&amp;ndash;with-mysql-plugindir=/usr/lib64/mysql/plugin ではなく、&lt;br /&gt;
&amp;ndash;with-mysql-plugindir=/usr/lib/mysql/plugin で指定したために、&lt;br /&gt;
「libtool: link: only absolute run-paths are allowed」とうエラーが出てしまいうまくいかなった。&lt;br /&gt;
うまくいかないときは、一度 make clean して再度 configure のパラメータを確認すること。&lt;/p&gt;

&lt;h3 id=&#34;handlersocketのpluginが入っているか-インストールがうまくいっているかの-確認:70ecf40fc52ac5a33c486956612d2368&#34;&gt;handlersocketのpluginが入っているか(インストールがうまくいっているかの)確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ll /usr/lib64/mysql/plugin/handlersocket*
-rw-r--r-- 1 root root  3519732  6月  7 10:16 2013 handlersocket.a
-rwxr-xr-x 1 root root      972  6月  7 10:16 2013 handlersocket.la
lrwxrwxrwx 1 root root       22  6月  7 10:16 2013 handlersocket.so -&amp;gt; handlersocket.so.0.0.0
lrwxrwxrwx 1 root root       22  6月  7 10:16 2013 handlersocket.so.0 -&amp;gt; handlersocket.so.0.0.0
-rwxr-xr-x 1 root root  1708138  6月  7 10:16 2013 handlersocket.so.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pluginのインストール:70ecf40fc52ac5a33c486956612d2368&#34;&gt;pluginのインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/mysql start
mysql -uroot;

mysql&amp;gt; install plugin handlersocket soname &#39;handlersocket.so&#39;;
mysql&amp;gt; show plugin;
+---------------+----------+----------------+------------------+---------+
| Name          | Status   | Type           | Library          | License |
+---------------+----------+----------------+------------------+---------+
| binlog        | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| partition     | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| ARCHIVE       | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| BLACKHOLE     | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| CSV           | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| FEDERATED     | DISABLED | STORAGE ENGINE | NULL             | GPL     |
| MEMORY        | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| InnoDB        | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| MyISAM        | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| MRG_MYISAM    | ACTIVE   | STORAGE ENGINE | NULL             | GPL     |
| handlersocket | ACTIVE   | DAEMON         | handlersocket.so | BSD     |
+---------------+----------+----------------+------------------+---------+
11 rows in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;my-cnf-の設定:70ecf40fc52ac5a33c486956612d2368&#34;&gt;my.cnf の設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/mysql stop
cat &amp;gt; /etc/my.cnf
[mysqld]
handlersocket_port =    9998 # handlersocketが接続を受け付けるポート(参照系リクエスト用)
handlersocket_port_wr = 9999 # handlersocketが接続を受け付けるポート(更新系リクエスト用)
handlersocket_address =      # handlersocketがバインドするアドレス(空のままでOK)
handlersocket_verbose = 0    # デバッグ用
handlersocket_timeout = 300  # 通信タイムアウト(秒)
handlersocket_threads = 16   # handlersocketのワーカースレッド数
thread_concurrency = 128     # handlersocketが幾つかのスレッドを占有するため、大きめの値を指定してください
open_files_limit = 65535

/etc/init.d/mysql start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;php-handlersocketのインストール:70ecf40fc52ac5a33c486956612d2368&#34;&gt;php-handlersocketのインストール&lt;/h2&gt;

&lt;h3 id=&#34;ソースのダウンロード:70ecf40fc52ac5a33c486956612d2368&#34;&gt;ソースのダウンロード&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/
wget https://php-handlersocket.googlecode.com/files/php-handlersocket-0.3.1.tar.gz
tar xvzf php-handlersocket-0.3.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configure-and-make-install-1:70ecf40fc52ac5a33c486956612d2368&#34;&gt;configure and make install&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cd handlersocket
phpize
./configure
make
make install
Installing shared extensions:     /usr/lib64/php/modules/
Installing header files:          /usr/include/php/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;php-iniへ追加-httpdの再起動:70ecf40fc52ac5a33c486956612d2368&#34;&gt;php.iniへ追加、httpdの再起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;extension=handlersocket.so&amp;quot; &amp;gt; /etc/php.d/hs.ini
/etc/init.d/httpd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php.iniへの追加を行わなかったために、Class not found になってしまった。&lt;br /&gt;
PHP Fatal error:  Class &amp;lsquo;HandlerSocket&amp;rsquo; not found in /tmp/handlersocket/examples/example.php on line 12&lt;br /&gt;
モジュールをインストール後は、/etc/php.d/以下に設定ファイルを配置し、httpdを再起動する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/items/540fd2ecdc98a7549fcb&#34;&gt;AWS EC2にhandlersocketを入れるまで&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;php-handlersocketのインストール確認:70ecf40fc52ac5a33c486956612d2368&#34;&gt;php-handlersocketのインストール確認&lt;/h3&gt;

&lt;p&gt;まずはphpinfo.phpを確認する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;handlersocket&lt;br /&gt;
MySQL HandlerSocket support enabled&lt;br /&gt;
extension Version           0.3.1&lt;br /&gt;
hsclient Library Support    enabled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;exsampleを動かし-最終確認:70ecf40fc52ac5a33c486956612d2368&#34;&gt;exsampleを動かし、最終確認&lt;/h3&gt;

&lt;p&gt;handlersocketに付属しているexamplesを実行し最終確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/handlersocket/examples/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テスト用のDB、テーブルを作成し、6件ほどレコードをinsertする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emacs development.ja.php

CREATE DATABASE hstestdb;

CREATE TABLE hstesttbl (
  k varchar(30) PRIMARY KEY,
  v varchar(30) NOT NULL,
  f1 varchar(30),
  f2 varchar(30)
) Engine = innodb;

CREATE INDEX i1 ON hstesttbl(v, k);
INSERT INTO hstesttbl VALUES (&#39;k1&#39;, &#39;v1&#39;, &#39;f1&#39;, &#39;f2&#39;);
INSERT INTO hstesttbl VALUES (&#39;k2&#39;, &#39;v2&#39;, &#39;f2&#39;, NULL);
INSERT INTO hstesttbl VALUES (&#39;k3&#39;, &#39;v3&#39;, &#39;f3&#39;, &#39;&#39;);
INSERT INTO hstesttbl VALUES (&#39;k4&#39;, &#39;v4&#39;, &#39;f4&#39;, &#39;f24&#39;);
INSERT INTO hstesttbl VALUES (&#39;k5&#39;, &#39;v5&#39;, &#39;f5&#39;, NULL);
INSERT INTO hstesttbl VALUES (&#39;k6&#39;, &#39;v6&#39;, &#39;f6&#39;, &#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php example.php
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
array(1) {
  [0]=&amp;gt;
  array(2) {
    [0]=&amp;gt;
    string(2) &amp;ldquo;k1&amp;rdquo;
    [1]=&amp;gt;
    string(2) &amp;ldquo;v1&amp;rdquo;
   }
}
array(1) {
  [0]=&amp;gt;
  array(2) {
    [0]=&amp;gt;
    string(2) &amp;ldquo;k2&amp;rdquo;
    [1]=&amp;gt;
    string(2) &amp;ldquo;v2&amp;rdquo;
   }
}
bool(false)
56:op:
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:70ecf40fc52ac5a33c486956612d2368&#34;&gt;参考サイト&lt;/h2&gt;

&lt;p&gt;以下のサイトを参考にさせていただきました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kotaroito.hatenablog.com/entry/20111213/1323755054&#34;&gt;CentOSにMySQLとHandler Socketを入れてみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akitosblog.seesaa.net/article/193127939.html&#34;&gt;Akito&amp;rsquo;s IT技術 メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ahiguti/HandlerSocket-Plugin-for-MySQL&#34;&gt;HandlerSocket-Plugin-for-MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/php-handlersocket/&#34;&gt;php handler socket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/akirahiguchi/handlersocket-etc-20110906&#34;&gt;HandlerSocket について + a&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PhpStormのメモリ使用量を増やす</title>
      <link>http://tatsuyano.github.io/2013/02/14/phpstorm-memory/</link>
      <pubDate>Thu, 14 Feb 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/14/phpstorm-memory/</guid>
      <description>

&lt;p&gt;こちらのサイトの&lt;a href=&#34;http://webinthelife.com/?p=274&#34;&gt;記事&lt;/a&gt;まんまなんですが、結構速くなったのでメモ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emacs /Applications/PhpStorm.app/Contents/Info.plist

&amp;lt;key&amp;gt;VMOptions.x86_64&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;-Xms128m -Xmx800m -XX:MaxPermSize=350m -XX:ReservedCodeCacheSize=64m -XX:+UseCodeCacheFlushing -XX:+UseCompressedOops&amp;lt;/string&amp;gt;
↓
&amp;lt;key&amp;gt;VMOptions.x86_64&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;-Xms256m -Xmx1024m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=128m -XX:+UseCodeCacheFlushing -XX:+UseCompressedOops&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/php_storm_memory_001.png&#34; alt=&#34;&#34; /&gt;
 -&amp;gt;
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/php_storm_memory_002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最大791Mだったのが、1015Mになり、少し速くなりました。&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:784f081ad1a13f7c6cd40bdd44b4ee85&#34;&gt;参考サイト&lt;/h2&gt;

&lt;p&gt;以下のサイトを参考にさせていただきました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webinthelife.com/?p=274&#34;&gt;Mac版PHPStormのメモリ割り当てを増やして快適に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PhpStormのkeymapを変更し、C-hにdelete-backward-charを割り当てる</title>
      <link>http://tatsuyano.github.io/2013/02/14/phpstorm-keymap/</link>
      <pubDate>Thu, 14 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/14/phpstorm-keymap/</guid>
      <description>&lt;p&gt;C-h(delete-backward-char)のことを「hungry backspace」というらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Preference &amp;gt; Keymap &amp;gt; Main menu &amp;gt; Navigate &amp;gt; Type Hierarchy &amp;gt; Remove ^H
Preference &amp;gt; Keymap &amp;gt; hungry backspace &amp;gt; Add Keyboard Shortcut ^H
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついでにCtrl+i に設定されていた「Implement Mehtods」のショートカットを削除&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Preference &amp;gt; Keymap &amp;gt; Main menu &amp;gt; Code &amp;gt; Implement Methods &amp;gt; Remove ^I
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MAMP環境でのCakePHPのmysql.sockの指定方法</title>
      <link>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</link>
      <pubDate>Mon, 04 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</guid>
      <description>

&lt;h2 id=&#34;worning:3f05be670dddf031e8b273ab46ea1cc7&#34;&gt;worning&lt;/h2&gt;

&lt;p&gt;MacにMAMPをインストールし、CakePHPの「bakeコンソール」でModelクラスを作成したさいに、mysql.sockの指定箇所が違うよと警告された&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Warning Error: PDO::__construct(): [2002] No such file or directory (trying to connect via unix:///var/mysql/mysql.sock) in [/Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/Database/Mysql.php, line 149]

Error: Database connection &amp;quot;SQLSTATE[HY000] [2002] No such file or directory&amp;quot; is missing, or could not be created.
#0 /Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/DboSource.php(260): Mysql-&amp;gt;connect()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MAMPを使っているので、mysql.sockは「/Applications/MAMP/tmp/mysql/mysql.sock」作成されている。&lt;br /&gt;
たぶん解決方法としては３つあって、&lt;br /&gt;
1.sockファイルをworiningに書いてある「/var/mysql/mysql.sock」に生成するようMysql側の設定をいじる。&lt;br /&gt;
2.「/var/mysql/mysql.sock」に「/Applications/MAMP/tmp/mysql/mysql.sock」のリンクを貼ってしまう。&lt;br /&gt;
3.たぶん「app/Config/database.php」に現在生成されているmysql.sockの場所を指定する。&lt;/p&gt;

&lt;p&gt;どう考えても「３」が正しいやり方だと思うけど、なかなかそれっぽい情報が引っかからなかったがやっとあった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1688705/cakephp-console-bake-on-mac-os-with-mamp-database-connection-error&#34;&gt;Cakephp console (bake) on Mac OS with Mamp : database connection error&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
public $default = array(
    &#39;datasource&#39; =&gt; &#39;Database/Mysql&#39;,
    &#39;persistent&#39; =&gt; false,
    &#39;host&#39; =&gt; &#39;localhost&#39;,
    &#39;login&#39; =&gt; &#39;USERNAME&#39;,
    &#39;password&#39; =&gt; &#39;PASSWORD&#39;,
    &#39;database&#39; =&gt; &#39;DATABASE&#39;,
    &#39;encoding&#39; =&gt; &#39;utf8&#39;,
    &#39;unix_socket&#39; =&gt; &#39;/Applications/MAMP/tmp/mysql/mysql.sock&#39; # &lt;- this
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.x系から、socketの指定がデフォルトと違う場合に上記のように設定する模様。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>