<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/php/</link>
    <description>Recent content in Php on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 04 Dec 2014 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>phpenvを導入する</title>
      <link>http://tatsuyano.github.io/2014/12/04/how-to-install-and-setup-phpenv/</link>
      <pubDate>Thu, 04 Dec 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/12/04/how-to-install-and-setup-phpenv/</guid>
      <description>phpもanyenvで管理できるようなので入れてみた。
anyenv本体のインストールはこちらを参照してください。
phpenvのインストール $ anyenv install phpenv $ source $HOME/.zshrc  phpenv には2種類あるらしく、anyenv でインストールされるのは phpenv/phpenv。 この phpenv/phpenv だと、anyenv だとうごかなかったので、CHH/phpenv に差し替える必要がある。
phpenvの差し替え $ cd ~/.anyenv/envs/phpenv $ git clone https://github.com/CHH/php-build.git plugins/php-build $ rm libexec/phpenv-install 
### PHPのインストール 結構必要なライブラリが多い。面倒なので、参考サイトに記載のあったライブラリを全部いれた。 $ sudo yum install -y re2c libxml2-devel openssl-devel libcurl-devel libjpeg-turbo-devel libpng-devel libmcrypt-devel readline-devel libtidy-devel libxslt-devel $ phpenv install 5.5.17 $ phpenv global 5.5.17 $ source $HOME/.zshrc $ which php /home/noguchi/.anyenv/envs/phpenv/shims/php  php.ini も anyenv 以下に作成される /home/noguchi/.</description>
    </item>
    
    <item>
      <title>require_onceを使わず、Composerを使う</title>
      <link>http://tatsuyano.github.io/2014/12/02/without-using-require-once-use-composer/</link>
      <pubDate>Tue, 02 Dec 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/12/02/without-using-require-once-use-composer/</guid>
      <description>毎回require_onceを書くのがだるかったので、ローカルのパッケージを自動で読み込む方法を調べてみたら、 PHP5.3以上ならComposerが使えることを知ったので試してみた。
ただ前提として読み込まれる側のソース(パッケージ)は、Gitなど バージョンコントロールシステム(vcs)で管理されている必要がある。
Composer のインストール まずはComposerのインストールから。 今回はすでにpathの通っている/usr/local/binにインストールする。
$ sudo bash # cd /usr/local/bin # curl -sS https://getcomposer.org/installer | php $ which composer.phar /usr/local/bin/composer.phar  ### ローカルパッケージの構成 読み込まれる(require_onceされる)側の構成は以下のようにした。 composer-test │ ├── composer.json └── src └── Tatsuyano ├── ParentClass │ └── ChildClass.php └── ParentClass.php  まずは作成したパッケージ(composer-test)をかならずgit commitする。
というのも、たとえ読み込む側、読み込まれる側、両方が同じローカル環境内にあっても 読み込む側は、Git 経由でソースを読み込む(インストールする)ので、 commitした内容しか反映されない。
composer.json { &#34;name&#34;: &#34;composer-test/tatsuyano&#34;, &#34;description&#34;: &#34;Composerを使ってのファイルのロードテスト&#34;, &#34;license&#34;: &#34;MIT&#34;, &#34;autoload&#34;: { &#34;psr-0&#34;: { &#34;Tatsuyano\\&#34;: &#34;src/&#34; } } }  #### ParentClass.</description>
    </item>
    
    <item>
      <title>PHP Conference 2014にいってきた</title>
      <link>http://tatsuyano.github.io/2014/10/18/i-went-to-php-conference-2014/</link>
      <pubDate>Sat, 18 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/18/i-went-to-php-conference-2014/</guid>
      <description>仕事でPHPをつかうようになったので、PHPのカンファレンスに参加してきた。
会場の雰囲気 本当は朝一から行きたかったが、やることがあって12:10分の部から参加。
申込時、定員オーバーしてたので、すごく混んでいると思ったが意外と空いていた。
セッション Perlでも言えることだけど、やっぱり歴史ある言語だけに、あらためて発表することが少ないのか、自社のシステム構成や、ミドルウェアについてのセッションが多かったような気がする。
自分が見れた中で面白かったのは「PHPerがAWSと出会ってDevOpsを目指した話」と「Lightning Talks(無差別級)」のPHP7の話。
AWSについては、そろそろ実務でバリバリ触れる環境に身を置いておかないと、 今後AWSなどクラウドを提供する側が推奨するベストプラクティスに乗っかった上での 開発手法みたいなのに乗り遅れるなあと感じた。
PHP7がPHP6をすっ飛ばした話は、なんか少しノスタルジックな気分になった。
感想 今まで自分はあまりPHPを好きではなかった理由の一つに、PHPのコミュニティがわかりずらい(PHPの有名人の顔が見えにくい)というのがあったんだけど、今回少しPHPのコミュニティの匂いが感じられてよかった。
あと「PHPer」の読み方が「ペチパー」だということがわかって良かった。</description>
    </item>
    
    <item>
      <title>herokuでfuelphpをデプロイ</title>
      <link>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</link>
      <pubDate>Tue, 07 Oct 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</guid>
      <description>まずはherokuの準備をしてください。
 herokuことはじめ  herokuにデプロイするアプリを、github上に用意してください。
 fuelphpアプリのgit管理  herokuにアプリを登録 今回は sample-of-chat という名前のアプリを登録します。 アプリ名はわかりやすいように、リポジトリと同じ名前がいいと思います。 また、アプリ名がURLになるので、注意してください。
http://sample-of-chat.herokuapp.com
$ cd sample-of-chat $ heroku create sample-of-chat git remote -v heroku git@heroku.com:sample-of-chat.git (fetch) heroku git@heroku.com:sample-of-chat.git (push)  webサーバーとDocumentRootを指定するファイルProcfileを作成します。 webサーバーはapacheかnginxから選択します。
$ cd sample-of-chat $ cat  Procfile web: vendor/bin/heroku-php-apache2 public/   Setting the document root  次に、.gitignoreからcomposer.lockをコメントアウトし、
composer.jsonに設定(bin-dir)を追加します。
&#34;config&#34;: { &#34;bin-dir&#34;: &#34;vendor/bin&#34;, &#34;vendor-dir&#34;: &#34;fuel/vendor&#34; },  herokuにデプロイ herokuにpushすることで、デプロイが行われます。
git push heroku master  これでデプロイ完了です。デプロイが完了すると、</description>
    </item>
    
    <item>
      <title>fuelphpアプリのgit管理</title>
      <link>http://tatsuyano.github.io/2014/10/06/git-management-of-fuelphp/</link>
      <pubDate>Mon, 06 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/06/git-management-of-fuelphp/</guid>
      <description>fuelphpをcreate(clone)した状態だと、push先がfuelを向いているので、アプリをgit管理するためにgit initし直す必要がある。
まずはfuelphpをインストールするためのoilコマンドをインストールし、アプリのひな形を作成
$ curl get.fuelphp.com/oil | sh $ cd Sites/ $ oil create sample  必要のないファイルを削除
$ rm -rf .git .gitmodules *.md docs fuel/core fuel/packages  fuel/core、fuel/packagesをgit submoduleで新たにインストール。
$ cd sample $ git init $ git submodule add git://github.com/fuel/core.git fuel/core $ git submodule add git://github.com/fuel/oil.git fuel/packages/oil $ git submodule add git://github.com/fuel/auth.git fuel/packages/auth $ git submodule add git://github.com/fuel/parser.git fuel/packages/parser $ git submodule add git://github.com/fuel/orm.git fuel/packages/orm $ git submodule add git://github.com/fuel/email.git fuel/packages/email  push先(GitHubなど)、remote/originを設定する</description>
    </item>
    
    <item>
      <title>anyenvをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/19/install-anyenv/</link>
      <pubDate>Tue, 19 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/19/install-anyenv/</guid>
      <description>以前導入したanyenvのインストール方法を忘れないようメモしておきます。
anyenvは ruby、perl、python、nodejs、php(phpenv) のバージョン管理を一元化してくれるツールです。これでhome直下がずいぶんスッキリ。素敵です。
インストール ダウンロード
$ git clone https://github.com/riywo/anyenv ~/.anyenv  $HOME/.zshrc
$ echo &#39;export PATH=&amp;quot;$HOME/.anyenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc $ echo &#39;eval &amp;quot;$(anyenv init - zsh)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc  私はoh-my-zshを使っているので、実際は~/.zshrcではなく、~/.oh-my-zsh/custom/main.zshに設定しています。
シェルを再実行し、anyenvの設定を反映させます。
source $HOME/.zshrc でも結構です。
$ exec $SHELL -l $ which anyenv ~/.anyenv/bin/anyenv   anyenvで開発環境を整える completions/plenv.bash:16: command not found: completeの対処法  rubyのインストール とりあえずanyenv経由でrubyをインストールします。 rubyをインストールするには、事前にOpenSSL系のライブラリが必要なのでインストールしておきます。
また別記事で紹介しているrobeを使うには、read-lineが必要なので、入れておきます。
$ sudo yum -y install openssl-devel $ sudo yum -y install readline-devel   CentOSに rbenv 経路で Ruby 2.</description>
    </item>
    
    <item>
      <title>fuelphpのエラー文言を日本語化する</title>
      <link>http://tatsuyano.github.io/2014/07/29/fuelphp-validation/</link>
      <pubDate>Tue, 29 Jul 2014 04:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/fuelphp-validation/</guid>
      <description>config.phpに設定を追加 app/config/config.php
//&#39;language&#39; =&amp;gt; &#39;en&#39;, // Default language //&#39;language_fallback&#39; =&amp;gt; &#39;en&#39;, // Fallback language when file isn&#39;t available for default language //&#39;locale&#39; =&amp;gt; &#39;en_US&#39;, // PHP set_locale() setting, null to not set &#39;language&#39; =&amp;gt; &#39;ja&#39;, &#39;language_fallback&#39; =&amp;gt; &#39;en&#39;, &#39;locale&#39; =&amp;gt; &#39;ja_JP.UTF-8&#39;,  langディレクトリに日本語用のディレクトリを作成 mkdir app/lang/ja touch app/lang/ja/validation.php  validation.phpの設定は core/lang/en/validation.php を参照 設定されているkey(メソッド)は、core/classes/validation.phpで設定されている
&amp;lt;?php return array( &#39;required&#39; =&amp;gt; &#39;「:label」は必須です&#39;, &#39;min_length&#39; =&amp;gt; &#39;「:label」は:param:1文字以上で入力してください&#39;, &#39;max_length&#39; =&amp;gt; &#39;「:label」は:param:1文字以内で入力してください&#39;, &#39;exact_length&#39; =&amp;gt; &#39;「:label」は:param:1文字で入力してください&#39;, &#39;match_value&#39; =&amp;gt; &#39;「:label」は「:param:1」と一致していません&#39;, &#39;match_pattern&#39; =&amp;gt; &#39;「:label」はパターン「:param:1」と一致しません&#39;, &#39;match_field&#39; =&amp;gt; &#39;「:label」は「:param:1」と一致していません&#39;, &#39;valid_email&#39; =&amp;gt; &#39;「:label」はメールアドレスが不正です&#39;, &#39;valid_emails&#39; =&amp;gt; &#39;「:label」に不正なメールアドレスが含まれてます&#39;, &#39;valid_url&#39; =&amp;gt; &#39;「:label」は不正なURLです&#39;, &#39;valid_ip&#39; =&amp;gt; &#39;「:label」は不正なIPアドレスです&#39;, &#39;numeric_min&#39; =&amp;gt; &#39;「:label」は:param:1以上で入力してください&#39;, &#39;numeric_max&#39; =&amp;gt; &#39;「:label」は:param:1以内で入力してください&#39;, &#39;valid_string&#39; =&amp;gt; &#39;「:label」は:param:1で入力する必要があります&#39;, );  自前のvalidation(helperクラス)を作成する mkdir app/classes/helper touch app/classes/helper/myvalidation.</description>
    </item>
    
    <item>
      <title>fuelphpでAgentClassを設定する</title>
      <link>http://tatsuyano.github.io/2014/07/29/fuelphp-use-agent-class/</link>
      <pubDate>Tue, 29 Jul 2014 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/fuelphp-use-agent-class/</guid>
      <description> ブラウザの識別やモバイルフォンとPCの識別をするには、fuelではAgentクラスを使用する。
AgentクラスはPHPのget_browser関数を利用する。
get_browser関数は、UA情報をBrowser Capabilities Projectというサイトから取得する。 fuelではこのサイトからUA情報を取得(キャッシュ化し2回目のアクセスからキャッシュを参照)し、識別する。
configファイルにUA情報(サイト)の取得先URLなどを設定 fuel/app/config/config.php
&#39;browscap&#39; =&amp;gt; array( &#39;enabled&#39; =&amp;gt; true, &#39;url&#39; =&amp;gt; &#39;http://browsers.garykeith.com/stream.asp?BrowsCapINI&#39;, &#39;method&#39; =&amp;gt; &#39;wrapper&#39;, &#39;file&#39; =&amp;gt; &#39;/tmp/php_browscap.ini&#39;, ),  キャッシュの保存先について fuelでは fuel/app/cache にキャシュを保存している
cache └── fuel └── agent ├── browscap.cache └── browscap_file.cache  キャッシュ周りで権限エラーがでたので、権限を777にする
chmod -R 777 fuel/app/cache/  Agentクラスの実装 Agent::is_mobiledevice();  参考サイト  FuelPHPのAgentクラスと拡張 Agent Class FuelPHPのAgentクラスによる端末振り分けが簡単すぎる  関連する記事  fuelphpのエラー文言を日本語化する fuelphpでredisを使う  </description>
    </item>
    
    <item>
      <title>memcachedのインストール</title>
      <link>http://tatsuyano.github.io/2014/07/29/install-memcached/</link>
      <pubDate>Tue, 29 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/install-memcached/</guid>
      <description>まずはyumでmemcachedのインストール
# yum install -y memcached memcached-devel  libmemcachedのインストール
 最新のソース  # cd /usr/local/src # wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz # tar xvzf libmemcached-1.0.18.tar.gz # ./configure # make # make install  /etc/sysconfig/memcached
PORT=&amp;quot;11211&amp;quot; USER=&amp;quot;apache&amp;quot; MAXCONN=&amp;quot;1024&amp;quot; CACHESIZE=&amp;quot;64&amp;quot; OPTIONS=&amp;quot;&amp;quot;  PHPで使うために以下の設定 # yum install -y php-pecl-memcached  PHP Extensionのインストール
# git clone https://github.com/php-memcached-dev/php-memcached.git # cd php-memcached # phpize # ./configure --with-libmemcached-dir=/usr/local # make # make install  PHPで設定が有効になっているか確認
$ php -i | grep memcached memcached memcached support =&amp;gt; enabled libmemcached version =&amp;gt; 1.</description>
    </item>
    
    <item>
      <title>fuelphpでredisを使う</title>
      <link>http://tatsuyano.github.io/2014/07/28/use-the-redis-in-fuelphp/</link>
      <pubDate>Mon, 28 Jul 2014 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/28/use-the-redis-in-fuelphp/</guid>
      <description>まずはredisのインストールから
$ yum --enablerepo=epel install -y redis $ /etc/init.d/redis start redis-server を起動中: [ OK ]  confの場所
$ emacs /etc/redis.conf  redisが正常にインストールされているか確認
$ redis-cli redis 127.0.0.1:6379&amp;gt; set name &#39;hoge&#39; OK redis 127.0.0.1:6379&amp;gt; get name &amp;quot;hoge&amp;quot;  保存されているKEYを表示
$ redis-cli redis 127.0.0.1:6379&amp;gt; KEYS * 1) &amp;quot;particles&amp;quot; 2) &amp;quot;name&amp;quot; redis 127.0.0.1:6379&amp;gt;  fuelphpの設定 config/db.php
&#39;redis&#39; =&amp;gt; array( &#39;default&#39; =&amp;gt; array( &#39;hostname&#39; =&amp;gt; &#39;127.0.0.1&#39;, &#39;port&#39; =&amp;gt; 6379 ) ),  config.session.php
&#39;driver&#39; =&amp;gt; &#39;redis&#39;, .</description>
    </item>
    
    <item>
      <title>PHP5.4から error_reportingのE_ALLにE_RISTRICTが加わった</title>
      <link>http://tatsuyano.github.io/2014/07/28/e_ristrict-is-added-to-the-e_all/</link>
      <pubDate>Mon, 28 Jul 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/28/e_ristrict-is-added-to-the-e_all/</guid>
      <description> fuelphp案件でcomposer経由でxml_rpc2をインストールしたら、以下のようなエラーが出た
Uncaught exception Fuel\Core\PhpErrorException: Non-static method PEAR::loadExtension() should not be called statically  最初はソースの依存関係が原因かなあと思ったが、調べてみるとそうではなく PHP5.4から error_reportingのE_ALLにE_RISTRICTが加わったことで、エラーと判定されるようになった
 php5.4からはerror_reportingのE_ALLにE_RISTRICTが含まれる PHPでHTML上にエラー表示/非表示する php.ini 設定  対象箇所でのみerror_reportingを止めることにした production環境以外で、かつ一部分でのみerror_reportingを止めたかったので、対象箇所の前後で一時的に解除した
$before_level = error_reporting(0); // error_report解除 $options = array(&#39;prefix&#39; =&amp;gt; &#39;package.&#39;); $client = \XML_RPC2_Client::create(&#39;http://pear.php.net/xmlrpc.php&#39;, $options); $result = $client-&amp;gt;info(&#39;XML_RPC2&#39;); print_r($result); error_reporting($before_level); // error_reportを元に戻す   error_reporting 定義済み定数  </description>
    </item>
    
    <item>
      <title>HandlerSocketをインストールする</title>
      <link>http://tatsuyano.github.io/2013/06/10/handlersocket-install/</link>
      <pubDate>Mon, 10 Jun 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/06/10/handlersocket-install/</guid>
      <description>インストールする内容  rpm版 MySQL 5.1.68 HandlerSocket-Plugin-for-MySQL 最新版(2013/06/05) php-handlersocket 0.3.1  作業の流れ  すでにyumでインストールしてあるMySQLの削除 MySQL(rpm版)のインストール Handler Socketのインストール php-handlersocketのインストール  すでにyumでインストールしてあるMySQLの削除 前にテスト導入で成功したバージョンにあわせるため、yumでインストールしたMySQLを削除
インストール済みのMySQLを確認 yum list installed | grep mysql mysql.x86_64 5.1.69-1.el6_4 @updates mysql-libs.x86_64 5.1.69-1.el6_4 @updates mysql-server.x86_64 5.1.69-1.el6_4 @updates php-mysql.x86_64 5.3.3-22.el6 @base  chkconfigからmysqldをoff chkconfig --list mysqld mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off chkconfig mysqld off  yumでインストールしたMySQLを削除 yum -y remove mysql mysql-server mysql-libs  MySQL(rpm版)のインストール 過去にインストールしたmysqlのバージョンは5.1.66 だったが見つからなかったので、
近いバージョンの5.1.68をインストールすることにした。
インストール先のディレクトリ作成 mkdir -p /usr/src/redhat/RPMS/x86_64/ cd /usr/src/redhat/ mkdir BUILD SOURCES SPECS SRPMS  rpmファイルのダウンロード cd /usr/src/redhat/RPMS/x86_64/ wget http://download.</description>
    </item>
    
    <item>
      <title>PhpStormのkeymapを変更し、C-hにdelete-backward-charを割り当てる</title>
      <link>http://tatsuyano.github.io/2013/02/14/phpstorm-keymap/</link>
      <pubDate>Thu, 14 Feb 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/14/phpstorm-keymap/</guid>
      <description>C-h(delete-backward-char)のことを「hungry backspace」というらしい。
Preference &amp;gt; Keymap &amp;gt; Main menu &amp;gt; Navigate &amp;gt; Type Hierarchy &amp;gt; Remove ^H Preference &amp;gt; Keymap &amp;gt; hungry backspace &amp;gt; Add Keyboard Shortcut ^H  ついでにCtrl+i に設定されていた「Implement Mehtods」のショートカットを削除
Preference &amp;gt; Keymap &amp;gt; Main menu &amp;gt; Code &amp;gt; Implement Methods &amp;gt; Remove ^I  </description>
    </item>
    
    <item>
      <title>PhpStormのメモリ使用量を増やす</title>
      <link>http://tatsuyano.github.io/2013/02/14/phpstorm-memory/</link>
      <pubDate>Thu, 14 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/14/phpstorm-memory/</guid>
      <description> こちらのサイトの記事まんまなんですが、結構速くなったのでメモ。
emacs /Applications/PhpStorm.app/Contents/Info.plist &amp;lt;key&amp;gt;VMOptions.x86_64&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;-Xms128m -Xmx800m -XX:MaxPermSize=350m -XX:ReservedCodeCacheSize=64m -XX:+UseCodeCacheFlushing -XX:+UseCompressedOops&amp;lt;/string&amp;gt; ↓ &amp;lt;key&amp;gt;VMOptions.x86_64&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;-Xms256m -Xmx1024m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=128m -XX:+UseCodeCacheFlushing -XX:+UseCompressedOops&amp;lt;/string&amp;gt;  -&amp;gt; 最大791Mだったのが、1015Mになり、少し速くなりました。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Mac版PHPStormのメモリ割り当てを増やして快適に  </description>
    </item>
    
    <item>
      <title>MAMP環境でのCakePHPのmysql.sockの指定方法</title>
      <link>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</link>
      <pubDate>Mon, 04 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</guid>
      <description>worning MacにMAMPをインストールし、CakePHPの「bakeコンソール」でModelクラスを作成したさいに、mysql.sockの指定箇所が違うよと警告された
Warning Error: PDO::__construct(): [2002] No such file or directory (trying to connect via unix:///var/mysql/mysql.sock) in [/Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/Database/Mysql.php, line 149] Error: Database connection &amp;quot;SQLSTATE[HY000] [2002] No such file or directory&amp;quot; is missing, or could not be created. #0 /Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/DboSource.php(260): Mysql-&amp;gt;connect()  MAMPを使っているので、mysql.sockは「/Applications/MAMP/tmp/mysql/mysql.sock」作成されている。
たぶん解決方法としては３つあって、
1.sockファイルをworiningに書いてある「/var/mysql/mysql.sock」に生成するようMysql側の設定をいじる。
2.「/var/mysql/mysql.sock」に「/Applications/MAMP/tmp/mysql/mysql.sock」のリンクを貼ってしまう。
3.たぶん「app/Config/database.php」に現在生成されているmysql.sockの場所を指定する。
どう考えても「３」が正しいやり方だと思うけど、なかなかそれっぽい情報が引っかからなかったがやっとあった。
Cakephp console (bake) on Mac OS with Mamp : database connection error
public $default = array( &#39;datasource&#39; = &#39;Database/Mysql&#39;, &#39;persistent&#39; = false, &#39;host&#39; = &#39;localhost&#39;, &#39;login&#39; = &#39;USERNAME&#39;, &#39;password&#39; = &#39;PASSWORD&#39;, &#39;database&#39; = &#39;DATABASE&#39;, &#39;encoding&#39; = &#39;utf8&#39;, &#39;unix_socket&#39; = &#39;/Applications/MAMP/tmp/mysql/mysql.</description>
    </item>
    
    <item>
      <title>MacのPHP開発環境を整える</title>
      <link>http://tatsuyano.github.io/2012/11/02/mamp-php-mac/</link>
      <pubDate>Fri, 02 Nov 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/11/02/mamp-php-mac/</guid>
      <description> はじめに 勉強のためにローカル上でのPHP開発環境を作ろうと思います。
MAMPのインストール macにapache,mysql,phpをセットにしたものをインストールするためのソフト。
M(ac) A(pache) M(ysql) P(hp)。同じ用途でXAMPPというのもありますが、私の環境ではうまく動きませんでした。
 MAMPのインストール for Mac MAMPのダウンロードサイト  有償のPro版も同時にインストールされてしまいます。今回はPHPを少し触ってみたいだけなので、無償版を使います。
emacsのPHP開発環境  php-mode.elをインストールする php-completion.elをインストールする  補完機能と色付けだけは欲しかったのでインストール。
php-mode.elだけだと、phpファイルにhtmlの記述がある(又はその逆)とインデントがくずれてしまう。
なので最終的に、「php-mode + php-completion + nXhtml』を使う形に落ち着いた。
＊php-completionはauto-completeの機能を利用している
 nXhtmlをインストールする  php-mode.elの設定(インデントと、phpファイルを開いたときのmode指定)をコメントアウト
emacs ~/.emacs.d/conf/50_php.el ;; php-mode (require &#39;php-mode) ;;(setq php-mode-force-pear t) ;PEAR規約のインデント設定にする ;;(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.php$&amp;quot; . php-mode))  実行画面 htmlとphpのコードで書かれているindex.phpを開いてみると、htmlのコードを編集すると(nXhtml/nxhtml lnValid)に
phpのコードを編集すると(PHP/nxhtml Completion AC Abbrev)にmodeが切り替わる
補完機能もちゃんと動いている
＊nXhtmlで起動するさいに下記の警告がでるが、今のところ問題なく動いているので無視する
Warning: `font-lock-syntactic-keywords&#39; is an obsolete variable (as of 24.1); use `syntax-propertize-function&#39; instead.  </description>
    </item>
    
    <item>
      <title>php-mode.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/10/29/emacs-php-mode/</link>
      <pubDate>Mon, 29 Oct 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/29/emacs-php-mode/</guid>
      <description> インストール M-x auto-install-from-url &amp;lt;RET&amp;gt; http://php-mode.svn.sourceforge.net/svnroot/php-mode/tags/php-mode-1.5.0/php-mode.el  .emacsの設定、50_php.elを作成する cat &amp;gt;&amp;gt; .emacs.d/conf/50_php.el ;; php-mode (require &#39;php-mode) (setq php-mode-force-pear t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.php$&amp;quot; . php-mode))  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 PHP開発環境 on Emacs  </description>
    </item>
    
    <item>
      <title>php-completion.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/10/29/emacs-php-completion/</link>
      <pubDate>Mon, 29 Oct 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/29/emacs-php-completion/</guid>
      <description> インストール M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: php-completion &amp;lt;RET&amp;gt;  .emacsの設定、50_php.elに追加 cat &amp;gt;&amp;gt; .emacs.d/conf/50_php.el ;; php-mode-hook (lambda () (require &#39;php-completion) (php-completion-mode t) (define-key php-mode-map (kbd &amp;quot;C-o&amp;quot;) &#39;phpcmp-complete) (make-local-variable &#39;ac-sources) (setq ac-sources &#39;( ac-source-words-in-same-mode-buffers ac-source-php-completion ac-source-filename ))))  補完はするときはC-o、又はauto-complete.elの機能で自動で補完対象が出るようになります。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 PHP開発環境 on Emacs  </description>
    </item>
    
  </channel>
</rss>