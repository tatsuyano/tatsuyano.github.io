<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/nodejs/</link>
    <description>Recent content in Nodejs on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 06 Apr 2016 19:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CasperJsの使い方メモ</title>
      <link>http://tatsuyano.github.io/2016/04/06/how-to-use-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 19:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/how-to-use-casperjs/</guid>
      <description>日本語のページのキャプチャを取る 日本語のページのキャプチャを撮るには、CasperJsを実行するサーバーに日本語フォントが入っている必要がある。
sudo yum -y groupinstall &amp;quot;Japanese Support&amp;quot;  CasperJsを一時停止させる 3秒プログラムを停止させてからキャプチャを撮る
casper.then(function() { this.wait(3000, function() { console.log(&#39;3秒後&#39;); this.capture(&#39;capture/test.png&#39;); }); });  CasperJsからJSONをPOSTする casper.start(); casper.open(&#39;http://hoge.com/api/hoge&#39;, { method: &#39;post&#39;, headers: { &#39;Accept-Language&#39;: &#39;ja&#39; }, data: { uuid : &#39;UUID&#39;, secret : &#39;SECRET&#39; } }); // this.getPageContent()で結果を取得できる casper.then(function(response) { var json = JSON.parse(this.getPageContent()); });  CasperJsにメソッドを定義する casper.then(function() { this.createMarkdown(&#39;title&#39;,&#39;describe&#39;); }); casper.createMarkdown = function(title,describe){ template = fs.read(&#39;result/api_template.md&#39;, &#39;utf8&#39;); template = template.replace(/{{title}}/g ,title); template = template.</description>
    </item>
    
    <item>
      <title>CasperJsでAlert、Confirmのイベントをキャッチする</title>
      <link>http://tatsuyano.github.io/2016/04/06/i-have-catched-alert-or-confirm-events-in-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 15:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/i-have-catched-alert-or-confirm-events-in-casperjs/</guid>
      <description>AlertやConfirmダイアログのOKボタン、キャンセルボタンを押下するには、casper.page.onAlert、casper.page.onConfirmを使う。
下の例では、購入ボタン(#buy)を押下すると、 Confirmダイアログが立ち上がり 商品を購入します。よろしいですか？とメッセージが表示される。 OKボタンを押下すると、商品購入処理が実行され 商品の購入が成功すれば 商品を購入しました、 ポイントが足りず購入に失敗すると ポイントが足りません とメッセージが表示される。
var casper = require(&#39;casper&#39;).create({clientScripts: [&#39;./src/includes/jquery.min.js&#39;]}); var point = 100; casper.start(); casper.open(&#39;http://192.168.33.10/shopping/cart&#39;).viewport(1024, 690); casper.then(function() { // AlertダイアログはOKボタンしかないので、返り値は必ずtrueを返す。 // 同一画面で、複数のダイアログを表示する場合は、引数のメッセージで分岐する this.page.onAlert = function(message) { if (message == &#39;商品を購入しました&#39;) { return true; } else if (message == &#39;ポイントが足りません&#39;) { return true; } }; // Confirmダイアログが立ち上がると発火する。 // trueを返すとOKボタンが押下され、falseを返すとキャンセルボタンが押下される this.page.onConfirm = function(message) { if (message == &#39;商品を購入します。よろしいですか？&#39;) { return true; } }; // #add_pointというテキストフィールドに100ポイントを入力し、#buyボタンを押下する this.</description>
    </item>
    
    <item>
      <title>CasperJSのajaxでPOSTの送信ができない</title>
      <link>http://tatsuyano.github.io/2016/04/06/if-you-can-not-send-post-in-ajax-of-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 12:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/if-you-can-not-send-post-in-ajax-of-casperjs/</guid>
      <description>地味にハマった。Chromeだとパラメータにtype:&amp;quot;POST&amp;quot;がなくてもPOSTでリクエストを送信してくれるが、 CasperJsのブラウザでは、type:&amp;quot;POST&amp;quot;を明示しないとGETでリクエストを送信してしまう。
$.ajax({ url: &amp;quot;/shopping/addpoint/&amp;quot;, type: &amp;quot;POST&amp;quot;, // &amp;lt;-このパラメータが必須 data: data, success: function(data, dataType) { var data_arr = JSON.parse(data); $(&#39;#point&#39;).text(data_arr[&#39;point&#39;]); alert(data_arr[&#39;msg&#39;]); } });  手動で操作するぶんには問題なく動いていたので(typeパラメータが設定されていなくても)、 CasperJs(自分で書いたソース)側に問題があると思い込んでしまった。
思い込みで判断せずに、まずはアクセスログを確認しようという教訓でした。</description>
    </item>
    
    <item>
      <title>aglioを使ってmarkdownからAPIドキュメントとStubを作成する</title>
      <link>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</link>
      <pubDate>Tue, 15 Sep 2015 15:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</guid>
      <description>仕事で簡単なAPIを実装する必要があったので、簡単にAPIドキュメントを公開したり、ドキュメントからStubを自動で用意する方法を調べてみた。
で、こちらの記事にやりたいことがまんま載っていた(ありがとうございます！)ので、 記事を参考に自分用のテンプレートを用意した。

Blueprint Blueprintの記述は下記をページを参照。
 API Blueprint Tutorial API Blueprint examples  
api-mockの起動をgulpに設定する 以下のように設定し、$ gulp mock
var gulp = require(&#39;gulp&#39;), aglio = require(&#39;gulp-aglio&#39;), ApiMock = require(&#39;api-mock&#39;); var TEMPLATE_FILES = [&#39;apidocs/*.md&#39;], LAYOUT_FILE = &#39;apidocs/layout.md&#39;, PUBLISHED_DIR = &#39;published&#39;; gulp.task(&#39;api-mock&#39;, function () { var mockServer = new ApiMock({ blueprintPath: PUBLISHED_DIR + &#39;/index.md&#39;, options: { port: 3000 } }); mockServer.run(); }); gulp.task(&#39;mock&#39;, [&#39;api-mock&#39;]);  
Vagrantで使う場合、ポートを開ける vagrant上からaglioとapi-mockを使うには、デフォルトだと8088と3000を開ける必要があるので、Vagrantファイルに以下の設定を加える。
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 3000, host: 3000 config.</description>
    </item>
    
    <item>
      <title>webpackを使ってes6-promiseを読み込む</title>
      <link>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</link>
      <pubDate>Wed, 03 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</guid>
      <description>最近勉強中のPromiseですが、現段階(15/06/03)ではIE11に対応していません。 PromiseをIEに対応させるためには、es6-promiseというNode.jsのライブラリをフロントエンドで読み込む必要があります。
しかしNode.jsのライブラリは、そのままではフロントエンドで使えないので、 webpackでフロントエンド向けにBuildする必要があります。
-webpackは他にも多くの機能がありますが、ここではNode.jsのモジュールをフロントエンドで使うため方法のみにフォーカスします。-
webpackを使うための準備 まずは本体のインストール。 $ npm install webpack -g 
次に適当なディレクトリを作成します。 $ mkdir webpack-sample &amp;amp;&amp;amp; cd webpack-sample 
今回使うライブラリ(es6-promise)をディレクトリにインストールします。 $ npm install es6-promise 
ライブラリはglobalではなく、ディレクトリ直下(/webpack-sample/node_modules)にインストールしてください。
JsのBuild方法 次に(Node.jsの)ライブラリを読み込むJs(main.js)をビルドします。
$ webpack main.js bundle.js Hash: de7b4a8a87c6e52d026f Version: webpack 1.9.10 Time: 109ms Asset Size Chunks Chunk Names bundle.js 40.1 kB 0 [emitted] main [0] ./main.js 255 bytes {0} [built] + 6 hidden modules  BuildしたJs(bundle.js)は、main.jsが依存しているライブラリ(es6-promise等)も含んだ一つのファイルに圧縮されます。 このJsのみをHTMLに読み込むだけで、Node.jsが利用できるようになります。 &amp;lt;script&amp;nbsp;src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  main.js &#39;use strict&#39; var Promise = require(&#39;es6-promise&#39;).</description>
    </item>
    
    <item>
      <title>Promiseを使って、非同期処理を任意のタイミングで実行する</title>
      <link>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</link>
      <pubDate>Tue, 02 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</guid>
      <description> Promiseを使って、非同期処理を任意の順番で実行するサンプル。 ES5でも順番を指定して実行する事ができるが、Promiseを使うと綺麗に実装できる。
 参考サイト  JavaScript Promiseの本 JavaScript Promises es6-promise Babel repl  関連する記事  webpackを使ってes6-promiseを読み込む  </description>
    </item>
    
    <item>
      <title>anyenvをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/19/install-anyenv/</link>
      <pubDate>Tue, 19 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/19/install-anyenv/</guid>
      <description>以前導入したanyenvのインストール方法を忘れないようメモしておきます。
anyenvは ruby、perl、python、nodejs、php(phpenv) のバージョン管理を一元化してくれるツールです。これでhome直下がずいぶんスッキリ。素敵です。
インストール ダウンロード
$ git clone https://github.com/riywo/anyenv ~/.anyenv  $HOME/.zshrc
$ echo &#39;export PATH=&amp;quot;$HOME/.anyenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc $ echo &#39;eval &amp;quot;$(anyenv init - zsh)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc  私はoh-my-zshを使っているので、実際は~/.zshrcではなく、~/.oh-my-zsh/custom/main.zshに設定しています。
シェルを再実行し、anyenvの設定を反映させます。
source $HOME/.zshrc でも結構です。
$ exec $SHELL -l $ which anyenv ~/.anyenv/bin/anyenv   anyenvで開発環境を整える completions/plenv.bash:16: command not found: completeの対処法  rubyのインストール とりあえずanyenv経由でrubyをインストールします。 rubyをインストールするには、事前にOpenSSL系のライブラリが必要なのでインストールしておきます。
また別記事で紹介しているrobeを使うには、read-lineが必要なので、入れておきます。
$ sudo yum -y install openssl-devel $ sudo yum -y install readline-devel   CentOSに rbenv 経路で Ruby 2.</description>
    </item>
    
    <item>
      <title>uglify-js</title>
      <link>http://tatsuyano.github.io/2013/03/14/uglify-js/</link>
      <pubDate>Thu, 14 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/14/uglify-js/</guid>
      <description> npm install -g uglify-js  パラメータの-gは「global」の意味。「global」はnodeのインストールディレクトリ、
そうでなければカレントパッケージのルートかカレントワーキングディレクトリ。
npmの参考サイト  Manage the npm configuration file npm についてまとめてみる  uglify-jsの使い方  -b, &amp;ndash;beautify 整形(軽量化の逆) -o,&amp;ndash;output  出力ファイルの指定 &amp;ndash;overwrite 軽量化後のコードで入力ファイルを上書きします &amp;ndash;unsafe コードをより短い表現に変換  uglifyjs -o min.js jquery-1.9.1.js  </description>
    </item>
    
    <item>
      <title>nvmとnpmをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/07/nvm-vpm/</link>
      <pubDate>Thu, 07 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/07/nvm-vpm/</guid>
      <description>nvm(Node Version Manager) とは、node.js本体のバージョン管理するツール。
npm(Node Packaged Modules) とは、node.jsで作ったパッケージを管理するツール。
nvmをインストールするとnpmも自動でインストールされる。
nvmのインストール git clone git://github.com/creationix/nvm.git .nvm source .nvm/nvm.sh # nvmで使う環境変数などを設定する  node.js本体のインストール nvm ls-remote # 現在までにリリースされているバージョンの確認 nvm install v0.10.0 nvm ls # インストールしてあるバージョンと、現在設定してあるバージョンを確認 v0.9.4 v0.8.14 v0.10.0 current: v0.10.0 nvm use 0.10.0 # 毎回使うバージョンを指定する必要がある  node.jsを使うためには、ターミナルを立ち上げるたびに、nvm.shの読み込みと、nodeのバージョンを指定しないといけない。
なので、事前に zshrcに設定しておく。
cat &amp;gt;&amp;gt; .zshrc [[ -s $HOME/.nvm/nvm.sh ]] &amp;amp;&amp;amp; source $HOME/.nvm/nvm.sh [[ -s $HOME/.nvm/nvm.sh ]] &amp;amp;&amp;amp; nvm use 0.10.0  CoffeeScriptなどのnpm(Node Packaged Modules)のインストール方法 npm install -g coffee-script  インストールには、「ローカルインストール」と「グローバルインストール(パラメータに「g」をつける）」がある。</description>
    </item>
    
  </channel>
</rss>