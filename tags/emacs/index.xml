<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/emacs/</link>
    <description>Recent content in Emacs on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 06 Aug 2015 16:51:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EmacsにternをインストールしてjQueryを補完する</title>
      <link>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</link>
      <pubDate>Thu, 06 Aug 2015 16:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</guid>
      <description> EmacsでjQueryの補完をするには、Ternというツールを使うことで実現できる。

Ternのインストール まずはTern本体をインストール。このTernとEmacs(tern-mode)が裏で通信しながら補完を行う。 Rubyでいうところのrobeと同じ形。
npm install -g tern  
tern、tern-auto-completeのインストール 自分はCaskで管理しているので、Caskファイルに追加し、インストール。 tern-auto-complateは「auto-complate」を使ってpopupで補完候補を表示する。
Cask
(depends-on &amp;quot;tern&amp;quot;) (depends-on &amp;quot;tern-auto-complete&amp;quot;)  「js2-mode」が起動したらtern-modeとtern-auto-complateも起動するよう設定する。
init_loader/03_javascript.el
(autoload &#39;js2-mode &amp;quot;js2-mode&amp;quot; nil t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\.js$&amp;quot; . js2-mode)) (add-hook &#39;js2-mode-hook (lambda () (tern-mode t))) (eval-after-load &#39;tern &#39;(progn (require &#39;tern-auto-complete) (tern-ac-setup)))  
tern-configの設定 ホーム直下に.tern-configというJsonファイルを設定する。ここで補完するライブラリなどを指定できる。
{ &amp;quot;libs&amp;quot;: [ &amp;quot;browser&amp;quot;, &amp;quot;jquery&amp;quot; ], &amp;quot;plugins&amp;quot;: { &amp;quot;node&amp;quot;: {} } }  
tern-modeの実行 正常にインストールが完了すると、以下のようにポップアップで補完が出るようになる。
 

参考サイト  Tern demo emacs で javascript なら js2-mode, tern-mode Emacs の JavaScript 開発環境を整備する(Tern編)  </description>
    </item>
    
    <item>
      <title>Emacsにflymake-jshintをインストールする</title>
      <link>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</link>
      <pubDate>Tue, 28 Jul 2015 11:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</guid>
      <description> 今読んでいる シングルページWebアプリケーション の サンプルコードが「JSLint」を使っていたので、インストールしようと思ったが 「JSHint」のほうが良さそうなのでEmacsに「flymake-jshint」をCask経由でインストールした。
JSHintのインストール まずはnpmでJSHint本体をインストール。
npm install -g jshint  
flymake-jshintのインストール 自分はCaskで管理しているので、Caskファイルに追加しインストール。 flymake-jshintは「js2-mode」に必須のようなので、インストールしていない場合は先にインストールする。
# Cask (depends-on &amp;quot;flymake-jshint&amp;quot;)  JSHintのパスを通し、js2-modeが起動したら、JSHintがロードするよう設定する。
# init_loader/03_javascript.el (setq exec-path (append exec-path &#39;(&amp;quot;~/.anyenv/envs/ndenv/shims/&amp;quot;))) (add-hook &#39;js2-mode-hook &#39;(lambda () (require &#39;flymake-jshint) (flymake-jshint-load)))  
JSHintの実行 正常にインストールが完了すると、タイポなどミスがあると以下のようにポップアップで警告が出るようになる。 うまくいかない場合はM-x flymake-jshint-loadで手動でJSHintを起動し、エラーを確認すること。
参考サイト  JSLint から JSHint をフォークした理由(翻訳) Emacsでflymake-jshintを利用してリアルタイムでのJavaScript文法チェックができるようにする  </description>
    </item>
    
    <item>
      <title>emacsにrcodetoolsをインストールして、返り値をコメントに出力する</title>
      <link>http://tatsuyano.github.io/2015/03/25/install-rcodetools-to-emacs/</link>
      <pubDate>Wed, 25 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/25/install-rcodetools-to-emacs/</guid>
      <description> 返り値をコメントに出力したい場合、rcodetoolsのxmpfilterを使うことで可能になります。
3 + 4 ↓ 3 + 4 # =&amp;gt; 7  インストール まずはrcodetools本体をインストールします。
$ gem install rcodetools  次にインストールしたgemの中にあるrcodetools.elをemacsのload-pathが通っている階層にコピーします。
$ cp -a $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/rcodetools-0.8.5.0/rcodetools.el $HOME/src/github.com/tatsuyano/dot.emacs.d/init_loader/  emacsの設定 今回は、M-pにxmpfilterを割り当てます。
(require &amp;lsquo;rcodetools) (define-key ruby-mode-map (kbd &amp;ldquo;M-p&amp;rdquo;) &amp;lsquo;xmp)  操作方法  まずは返り値を出力したい行で、M-;(comment-dwim)を2回実行すると「# =&amp;gt;」というコメントがソースに出力されます。 その状態で、M-p(xmp)を実行すると、コメントに返り値が出力されます。  ちなみにM-;はAltを押しながら;を押下です。
3 + 4 ↓ 3 + 4 # =&amp;gt; 1. comment-dwimを2回実行 ↓ 3 + 4 # =&amp;gt; 7 2. xmpfilterを実行  ※ 環境によっては、gems/rcodetools/bin/をPATHに加える必要があるようなので、動かない場合は試してみてください。
参考サイト  EmacsでRubyの開発環境をさらにめちゃガチャパワーアップしたまとめ Emacs で rcodetools を使って &amp;ldquo;=&amp;gt;&amp;rdquo; で値を表示する  </description>
    </item>
    
    <item>
      <title>helm-gtags-modeを導入してソースコードの読解する</title>
      <link>http://tatsuyano.github.io/2014/09/17/to-reading-comprehension-of-the-source-code-by-introducing-the-helm-gtags-mode/</link>
      <pubDate>Wed, 17 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/17/to-reading-comprehension-of-the-source-code-by-introducing-the-helm-gtags-mode/</guid>
      <description>helm-gtagsを導入すると、メソッドの定義先に簡単に移動できたり(メソッドジャンプ)、 メソッドの参照元の一覧を表示できたりと大変便利です。
helm-gtagsはGNU GLOBAL(gtag)というソフトウェアを使って上記の機能を実装しています。 ただGNU GLOBALは今まではC言語やJava、PHPなど一部言語しか対応していませんでした。
GNU GLOBAL(gtag)とは、ソースファイルを解析し、インデックスファイルを生成してくれるソフトウェアです
しかし、バージョン6.3.2からglobal-pygments-pluginが取り込まれたことで、Rubyなど多くの言語に対応しました。
今回は、RubyとPHPをhelm-gtags-modeに対応するようにしました。
ソフトウェアの依存関係 少しややこしいので整理しておきますと、
 helm-gtags(複数言語対応)は GNU GLOBAL 6.3.2が必要 GNU GLOBALに取り込まれたglobal-pygments-pluginは、Pygmentが必要 PygmentはPython 2.6以上が必要  [helm-gtags] &amp;lt;- [GLOBAL] &amp;lt;- [Pygment] &amp;lt;- [Python 2系] という関係性なので、 まずは、Python 2系からインストールします。
注意 Pygmentのコマンドはpygmentizeで、初めからインストールされている可能性があります。 その場合は、Python 2系、Pygmentのインストール手順はスルーしてください。
$ which pygmentize $ /usr/bin/pygmentize $ pygmentize -V $ Pygments version 1.4, (c) 2006-2008 by Georg Brandl.  Python 2系のインストール pyenvを使って2系をインストールします。 pyenvのインストールはこちらを参考にしてください。
$ pyenv install 2.7.8 $ pyenv global 2.7.8 $ pyenv version 2.</description>
    </item>
    
    <item>
      <title>emacsのruby環境をセットアップする</title>
      <link>http://tatsuyano.github.io/2014/09/01/set-up-ruby-mode-of-emacs/</link>
      <pubDate>Mon, 01 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/01/set-up-ruby-mode-of-emacs/</guid>
      <description>最近caskに切り替えたので、ruby環境も一から作り直したいと思います。 オムニ補完には、今まではRsenseを使っていましたが、今回はrobeというパッケージと使ってみたいと思います。
対象のEmacsのバージョンは24.3.1になります
今回インストールするパッケージ  ruby-mode ruby-end ruby-block inf-ruby robe auto-complete rvenv # 2015/02/23追記 smart-newline　# 2015/02/23追記 rspec-mode # 2015/02/23追記  ruby-mode,ruby-end,ruby-blockをインストール まずは基本的なところから。 Emacs24だとruby-electricがうまく動かなかったので、 今回はインストールしませんでしたが、ruby-endだけで事足りました。
~/.emacs/Cask
;; Ruby (depends-on &amp;quot;ruby-mode&amp;quot;) (depends-on &amp;quot;ruby-end&amp;quot;) (depends-on &amp;quot;ruby-block&amp;quot;)  ~/.emacs.d/init_loader/03_ruby.el
;; -------------------------------------------------- ;; ruby-mode ;; http://shibayu36.hatenablog.com/entry/2013/03/18/192651 ;; -------------------------------------------------- (autoload &#39;ruby-mode &amp;quot;ruby-mode&amp;quot; &amp;quot;Mode for editing ruby source files&amp;quot; t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.rb$&amp;quot; . ruby-mode)) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Capfile$&amp;quot; . ruby-mode)) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Gemfile$&amp;quot; . ruby-mode)) (add-to-list &#39;interpreter-mode-alist &#39;(&amp;quot;ruby&amp;quot; .</description>
    </item>
    
    <item>
      <title>init-loaderをCaskでインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-initloader-in-cask/</link>
      <pubDate>Thu, 28 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-initloader-in-cask/</guid>
      <description> 最近caskに乗り換えたので、init-loader.elも再度設定し直しました。
init-loaderのインストール まずはCaskファイルに設定し、caskコマンドでinit-loaderをインストールします。
~/.emacs.d/Cask
;; Setup (depends-on &amp;quot;init-loader&amp;quot;)  次に設定ファイル(elisp)を格納するディレクトリ、init_loaderを作成します。
mkdir $HOME/.emacs.d/init_loader  先ほど作成したディレクトリをinit-loaderがロードするように設定します。
~/.emacs.d/init.el
;; init-loader (custom-set-variables &#39;(init-loader-show-log-after-init &#39;error-only)) (init-loader-load (concat user-emacs-directory &amp;quot;init_loader&amp;quot;))  init-loaderで読み込むファイル とりあえずinit-loaderで読み込むファイルは以下のように設定しました。 まだすべてcaskに移行しきれていないので、順々に対応していきたいと思います。
init_loader │ ├── 01_basic.el ├── 02_helm.el └── 02_migemo.el  お疲れ様でした。
参考サイト  syohex/dotfiles/emacs  関連する記事  Caskをインストールする Amazon LinuxにMigemoをインストールする HelmをCaskでインストールする  </description>
    </item>
    
    <item>
      <title>HelmをCaskでインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-helm-in-cask/</link>
      <pubDate>Thu, 28 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-helm-in-cask/</guid>
      <description>anything.elをフォークして作られたツール、HelmをCaskでインストール、管理したいと思います。
インストール ~/.emacs.d/Cask
(depends-on &amp;quot;helm&amp;quot;)  caskコマンドの実行
$ cd .emacs.d $ cask Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/archives/gnu/archive-contents Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/archives/marmalade/archive-contents Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/archives/melpa/archive-contents Making version-control local to helm-autoloads.el while let-bound! Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/helm-20140827.436/helm-autoloads.el  最小限の設定 とりあえずREADME.mdに書いてある最小限の設定をします。
~/.emacs.d/init.el
;; Helm (require &#39;helm-config) (global-set-key (kbd &amp;quot;C-c h&amp;quot;) &#39;helm-mini) (helm-mode 1) ;;ミニバッファでC-hをバックスペースに割り当て (define-key helm-read-file-map (kbd &amp;quot;C-h&amp;quot;) &#39;delete-backward-char)  基本的な操作  C-c hで最近開いたバッファ(ファイル)を選択する C-c fでhelm-mode-find-fileが実行  helm-mode 1がどういう設定になっているかわかっていないので、今はこれぐらいしか把握していません(笑)。 もう少し理解したら書き足したいと思います。
追加 2014.9.11 Helmの設定 こちらのサイトを参考に設定してみました。設定はまったく同じなので、省略します。
参考サイト  emacs-helm helmでC-eとC-jが使えなくなったので取り戻した helm.elをインストールしてみた anything.elのフォークhelm-modeをインストールする syohex/dot_files/emacs/init_loader/02_helm.</description>
    </item>
    
    <item>
      <title>Amazon LinuxにMigemoをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-migemo-on-amazon-linux/</link>
      <pubDate>Wed, 27 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-migemo-on-amazon-linux/</guid>
      <description>migemoを使うと、日本語の文章をローマ字で検索できるようになります。
作業の流れ  RPMでnkfをインストール ghqでcmigemoのインストール caskでmigemo.elをインストール init.elにmigemoの設定を行う  RPMでnkfをインストール migemoをインストールするにはnkfが必要です。nkfがないと下記のようなエラーが出ます。 ERROR: Require qkc or nkf installed for encode filter.
ただAmazon Linuxのyumには、nkfパッケージがないので、RPMでインストールします。
$ sudo bash # cd /tmp/ # wget http://mirror.centos.org/centos/6/os/x86_64/Packages/nkf-2.0.8b-6.2.el6.x86_64.rpm # rpm -ivh nkf-2.0.8b-6.2.el6.x86_64.rpm # which nkf /usr/bin/nkf  ghqでcmigemoのインストール migemoは元々rubyで実装されていたらしいのですが、今はC言語で実装されたcmigemoをインストールします。
$ ghq get https://github.com/koron/cmigemo.git $ cd $HOME/src/github.com/koron/cmigemo $ ./configure $ make gcc $ make gcc-dict $ sudo make gcc-install $ which cmigemo /usr/local/bin/cmigemo  cmigemoが正常にインストールされているか確認 $ cmigemo -d /usr/local/share/migemo/utf-8/migemo-dict  適当なローマ字(toukyoなど)を入力すると正規表現を生成される -&amp;gt; 正常にインストールされている</description>
    </item>
    
    <item>
      <title>Caskをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/20/install-cask/</link>
      <pubDate>Wed, 20 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/20/install-cask/</guid>
      <description>やろうやろうと思ってやっていなかったCaskを導入しようと思います。 今ままでは主にel-getを中心に使っていたのですが、 どのパッケージをインストールしたかとか、環境の切り替えが少し面倒でした。
今回導入するCaskはrubyのBundlerチックに管理してくれるため、上記の問題を解決してくれます。
Caskのインストールにはpythonが必要です。 インストールされていない場合、anyenvでpythonをインストールしてください
Emacs 24のインストール Caskは Emacs 24以上が必須です。 今回うっかりyum経由でEmacsをインストールしていたため、バージョンが23.1.1.だったので いったん削除し、再度バージョン24以上のEmacsをインストールします。
yumでインストールしたEmacs 23を削除
# yum list installed | grep emacs # yum -y remove emacs.x86_64 emacs-common.x86_64  make &amp;amp; install
# yum install gcc make ncurses-devel # wget http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-24.3.tar.gz # tar zxvfp emacs-24.3.tar.gz # cd emacs-24.3 # ./configure -without-x -without-selinux # make # make install  バージョンの確認
$ emacs --version GNU Emacs 24.3.1 Copyright (C) 2013 Free Software Foundation, Inc.</description>
    </item>
    
    <item>
      <title>elpaでyasnippet.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/10/16/install-yasnippet-to-elpa/</link>
      <pubDate>Wed, 16 Oct 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/10/16/install-yasnippet-to-elpa/</guid>
      <description> 今さらですけどysnippet.elをインストールすることにしました。
でいつものようにel-getでインストールしようとしたんですが、
昨日scss-modeをインストールしようとした時と同じで、
githubに接続するところで止まってしまう(インストールが完了しない)。
もうel-getやめようかなあ。elpaだけのほうが楽っぽいし。。
とりあえず、今回はelpaでインストールすることにしました。
elpaでのインストール M-x list-packages でパッケージリストを表示させ、ysnippetの行で[x] &amp;amp; [i]でインストール。
~/.emacs.d/conf/82-yasnippet.el
;; yasnippetを置いているフォルダにパス (add-to-list &#39;load-path (expand-file-name &amp;quot;~/.emacs.d/elisp/el-get/package/elpa/yasnippet-0.8.0&amp;quot;)) (require &#39;yasnippet) (setq yas-snippet-dirs &#39;(&amp;quot;~/.emacs.d/elisp/el-get/package/elpa/yasnippet-0.8.0/snippets&amp;quot; )) (yas-global-mode 1)  スニペットの登録 試しに、html-modeでスペースのエスケープ文字を登録してみます。
[sp]と入力してtabを押下すると[&amp;amp;nbsp]と出力できるようにする
htmlモードに変更
M-x html-mode  snippetのひな形作成
M-x yas/new-snippet  # -*- mode: snippet -*- # name: &amp;amp;nbsp; # key: sp # -- &amp;amp;nbsp;  html-modeで使いたいので、保存先は以下にします。
/.emacs.d/elisp/el-get/package/elpa/yasnippet-0.8.0/snippets/html-mode/sp  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Emacsで「ysnippet.el」を使ってみる Emacs/yasnipettで、やさしいコードスニペットの作り方 yasnippet 8.0の導入からスニペットの書き方、anything/helm/auto-completeとの連携  </description>
    </item>
    
    <item>
      <title>auto-installでscss-modeをインストールする</title>
      <link>http://tatsuyano.github.io/2013/10/15/emacs-install-scss-mode/</link>
      <pubDate>Tue, 15 Oct 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/10/15/emacs-install-scss-mode/</guid>
      <description> el-getでうまくインストールできなかったので、今回はauto-installを使いました。
M-x auto-install-from-url RET https://raw.github.com/antonj/scss-mode/master/scss-mode.el  touch ~/.emacs.d/conf/55-scss.el
;; scss-mode ;; https://github.com/antonj/scss-mode (autoload &#39;scss-mode &amp;quot;scss-mode&amp;quot;) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.\\(scss\\|css\\|sass\\)\\&#39;&amp;quot; . scss-mode)) (setq scss-compile-at-save nil) ;; auto-comple (add-to-list &#39;ac-modes &#39;scss-mode) (add-hook &#39;scss-mode-hook &#39;ac-css-mode-setup)  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 emacsでscssを扱うscss-modeを入れる Emacsにscss-modeをいれた。  </description>
    </item>
    
    <item>
      <title>git-gutter.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/04/16/emacs-git-gutter/</link>
      <pubDate>Tue, 16 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/16/emacs-git-gutter/</guid>
      <description>gitの差分を表示してくれる git-gutter を入れてみました。
インストール はじめREADME.mdにかいてあるとおり、M-x package-install git-gutter で
  Installation You can install git-gutter.el from MELPA with package.el (M-x package-install git-gutter). And you can also install it with el-get.
  ELPA経由インストールしてみたが、versionが0.28と少し古くエラーがでたので、el-getのrecipeを用意してインストールした。
(:name emacs-git-gutter :type github :website &amp;quot;https://github.com/syohex/emacs-git-gutter&amp;quot; :description &amp;quot;[My Recipes] git-gutter.el is port of GitGutter which is a plugin of Sublime Text.&amp;quot; :pkgname &amp;quot;syohex/emacs-git-gutter&amp;quot;)  設定 とりあえず差分の表示だけがほしいので、最小限の設定に。
.emacs.d/conf/81-git-gutter.el
(require &#39;git-gutter) ;;(global-git-gutter-mode t) (setq git-gutter:separator-sign &amp;quot;|&amp;quot;) (set-face-foreground &#39;git-gutter:separator &amp;quot;yellow&amp;quot;) (add-hook &#39;cperl-mode-hook &#39;git-gutter-mode) (add-hook &#39;js2-mode-hook &#39;git-gutter-mode) (add-hook &#39;php-mode-hook &#39;git-gutter-mode) (add-hook &#39;ruby-mode-hook &#39;git-gutter-mode)  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>emacsでのRuby環境(Rsenseでオムニ補完)</title>
      <link>http://tatsuyano.github.io/2013/03/26/emacs-rsense/</link>
      <pubDate>Tue, 26 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/26/emacs-rsense/</guid>
      <description>今更ですが、最近yugaiさんの「初めてのRuby」を読み始めています。すごく読みやすくて楽しいです。
そこでemacsのRuby環境もちゃんと用意することにしました。
Rsenseとは Rsenseは、rubyコードのオムニ補完(文脈を解析して行う補完)をしてくれるツールです。
emacsでのrubyのコード補完は、他にもauto-complete(単体)、auto-complete-ruby、rcodetools などあります。
※ Rsense は Java Runtime Environment (JRE) 1.5以上が必要です。JREはOSXに標準でインストールされています。
Rsense のインストール 本家サイトから最新版をwgetします。
※ emacs には el-get.le を事前にインストールしておいてください。
wget http://cx4a.org/pub/rsense/rsense-0.3.tar.bz2 tar xvzf rsense-0.3.tar.bz2 mkdir .emacs.d/opt mv rsense-0.3 .emacs.d/opt/  .rsenseの作成 次に Rsense に Rubyの環境変数を指定するための ~/.rsense を作成します。
cd $HOME/.emacs.d/opt/rsense-0.3/ chmod +x ./bin/rsense bin/rsense version &amp;gt;&amp;gt; RSense 0.3 # &amp;lt;- 今回インストールしたRsenseのバージョン # $HOME 直下に ~/.rsenseファイルを作成、環境変数が設定されている ruby ./etc/config.rb &amp;gt; ~/.rsense  Java Runtime が正しく動くか確認 生成した ~/.rsense の環境変数が正しく設定されていないと Java Runtime が動きません。</description>
    </item>
    
    <item>
      <title>el-get.elでinit-loader.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get-init-loader/</link>
      <pubDate>Tue, 19 Mar 2013 06:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get-init-loader/</guid>
      <description>インストールしたいパッケージが、el-get のパッケージリストにない場合 自分でレシピを作成(設定)し、パッケージリストに追加します。リストに追加する方法は２つあります。
 レシピ(rcpファイル)を作成し .emacs.d/elisp/el-get/el-get/recipes/ 以下にファイルを置く方法 init.el などに直接設定を記述する方法  どちらも設定する内容は一緒なので、今回は直接設定することにします。設定する内容は主に以下のようになります。
(:name {パッケージ名} :type {パッケージ配布方法: elpa, emacswiki, git, svn, http, ...} :url {パッケージURL} :after {後処理} ...)   el-getありきのinit.elに書き換えてみた  最新のinit-loader.el init-loader.elの最新ファイルは 現在gist にあるので、
まずは rawファイルのURLを確認します。
https://raw.github.com/gist/1021706/init-loader.el
レシピの追加 init.el
(setq el-get-dir &amp;quot;~/.emacs.d/elisp/el-get/&amp;quot;) (unless (require &#39;el-get nil &#39;noerror) (with-current-buffer (url-retrieve-synchronously &amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;) (goto-char (point-max)) (eval-print-last-sexp))) (setq el-get-sources &#39;( (:name init-loader :type http :url &amp;quot;https://raw.github.com/gist/1021706/init-loader.el&amp;quot; :description &amp;quot;[My Recipes] Split management init.el.&amp;quot;) )) (el-get &#39;sync)  インストール レシピが正しい場合、 M-x el-get-list-packages で init-loader が追加されているので、インストールできます。</description>
    </item>
    
    <item>
      <title>el-get.elでauto-install.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-install/</link>
      <pubDate>Tue, 19 Mar 2013 05:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-install/</guid>
      <description> まずは el-get.el のインストール が完了していることが前提になります。
インストール まずは M-x el-get-list-packages で利用できるパッケージを一覧表示します。
次に インストールしたいパッケージに「i」を押してチェックをいれ、「x」を押すと自動でインストールが始まります。
インストールしたパッケージは、 (setq el-get-dir &amp;ldquo;~/.emacs.d/elisp/el-get/&amp;ldquo;) で指定したディレクトリ直下にディレクトリ単位にインストールされます。
またインストールしたパッケージを削除する場合は、M-x el-get-remove で削除します。
auto-installでインストールしたパッケージの置場所 el-get.el でインストールしたパッケージと、auto-install.el でインストールしたパッケージを分けて管理したいので、
auto-install用のディレクトリとパスの設定をします。
.emacs.d
└── elisp
├── auto-install &amp;hellip; auto-installでインストールしたパッケージの置場所
└── el-get &amp;hellip; el-getでインストールしたパッケージの置場所
├── auto-install &amp;hellip; auto-install.elの本体。本体はel-getでインストールしたため
└── el-get &amp;hellip; el-get.el自身もまた、el-getに管理されている
auto-installの設定 init.el
(setq load-path (append (list ... (expand-file-name &amp;quot;~/.emacs.d/elisp/auto-install/&amp;quot;) ;; &amp;lt;- パスの追加 ) load-path)) ... (require &#39;auto-install) (setq auto-install-directory &amp;quot;~/.emacs.d/elisp/auto-install/&amp;quot;) ;; auto-installでインストールしたパッケージの置場所を指定  </description>
    </item>
    
    <item>
      <title>coffee-modeでauto-completeを使えるようにする</title>
      <link>http://tatsuyano.github.io/2013/03/19/coffee-mode-used-ac-dict/</link>
      <pubDate>Tue, 19 Mar 2013 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/coffee-mode-used-ac-dict/</guid>
      <description> まずは coffee-mode.el を el-get で通常通りにインストールします。
auto-complete で補完に使うdict(辞書)について 補完をするときに参照している辞書は、.emacs.d/elisp/el-get/auto-complete/dict/ 配下にあります。
デフォルトでは、coffee-mode 用のdictがないので、js2-mode 用に公開されていた辞書をインストールします。
cd .emacs.d/elisp/el-get/auto-complete/dict/ wget https://raw.github.com/sandai/dotfiles/master/.emacs.d/ac-dict/js2-mode  設定 coffee-mode でauto-complete を使えるようにし、指定した辞書で補完するようにします。
52-coffee-mode.el
(require &#39;coffee-mode) ;; デフォルトだとインデントが８スペースなので、２スペースに変更 ;; http://qiita.com/items/a8d96ae95a1838500e37 (defun coffee-custom () &amp;quot;coffee-mode-hook&amp;quot; (set (make-local-variable &#39;tab-width) 2) (setq coffee-tab-width 2)) (add-hook &#39;coffee-mode-hook &#39;(lambda() (coffee-custom))) ;; auto-complete (add-to-list &#39;ac-modes &#39;coffee-mode) ;; coffee-modeでACを使えるようにする ;; coffee-modeで、追加したjs2-modeのdict(辞書)で補完するようにする ;; wget https://raw.github.com/sandai/dotfiles/master/.emacs.d/ac-dict/js2-mode (add-hook &#39;coffee-mode-hook &#39;(lambda () (add-to-list &#39;ac-dictionary-files &amp;quot;~/.emacs.d/elisp/el-get/auto-complete/dict/js2-mode&amp;quot;) ))  </description>
    </item>
    
    <item>
      <title>el-get.elでパッケージ管理を行う (el-get.elのインストール)</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get/</link>
      <pubDate>Tue, 19 Mar 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get/</guid>
      <description>今までパッケージを手動でインストールしていて、自分が何のパッケージをインストールしたかを
把握できなくなってきていたので、el-get.elでパッケージ管理をすることにしました。
el-get.elでのパッケージ管理の特徴 自分がel-get.elでいいなあと思ったのは、以下の２つ
 自分がどのパッケージをインストールしているのかを簡単に把握できること レシピといって、パッケージごとのインストール方法を柔軟に設定できること  emacsのバージョン emacsのバージョンは homebrew でインストールした「24.1.1」です。
emacs.dの構成 今回、今使っているemacs.dを捨てて、一から作り直すことにしました。
.emacs.d
├── conf &amp;hellip; init-loaderで分割したファイルを入れる
└── elisp &amp;hellip; 手動でパッケージを入れた場合はここに直接入れる
│　├── el-get &amp;hellip; el-get.elでインストールしたパッケージをディレクトリ単位で入れていく
│　└── auto-install &amp;hellip; auto-installでインストールした場合
│
└── init.el &amp;hellip; .emacs.elの代わり。load-pathの設定など
今回は .emacs.el は使わずに代わりに .emacs.d 直下に init.el というファイルを作成します。
また、できるかぎり el-get.el でパッケージ管理を行なっていき、インストールできなかった場合は auto-install でインストールを行うことにします。
auto-install でもインストールできなかった場合は、elispディレクトリ直下に手動でインストールしていきます。
今後のインストール方法(パッケージ管理)の優先度
1.el-get &amp;gt; 2.auto-install &amp;gt; 3.手動
el-get.elのインストール まずは el-get.el 本体のインストールから。事前に上記の .emacs.d の構成を作っておくこと。
el-get.el でインストールしたパッケージは、.emacs.d/elisp/el-get/ 直下に入れていきます。
init.el に以下の設定を入れて、emacsを起動させると自動でインストールが始まります。</description>
    </item>
    
    <item>
      <title>el-get.elでauto-complete.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-complete/</link>
      <pubDate>Tue, 19 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-complete/</guid>
      <description>el-getにインストールされているパッケージリストが古かったので、レシピを更新 パッケージリストには、auto-complete.elがあるのですが、レシピが古くインストールしてもディレクトリの中は空なので、レシピを新たに設定します。
また、auto-complete.el は popup.el と fuzzy.el というelispが必須なのですが、今回 popup.el のレシピを用意し、auto-complete とは別にインストールする必要があります。
※ とりあえず fuzzy.el は別途インストールしなくても動いているので、fuzzy.el は保留。
レシピの追加 10-el-get.el
(setq el-get-dir &amp;quot;~/.emacs.d/elisp/el-get/&amp;quot;) (unless (require &#39;el-get nil &#39;noerror) (with-current-buffer (url-retrieve-synchronously &amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;) (goto-char (point-max)) (eval-print-last-sexp))) (setq el-get-sources &#39;( (:name init-loader :type http :url &amp;quot;https://raw.github.com/gist/1021706/init-loader.el&amp;quot; :description &amp;quot;[My Recipes] Split management init.el. &amp;quot;) (:name popup ;; &amp;lt;- 追加 :type github :website &amp;quot;https://github.com/auto-complete/popup-el&amp;quot; :description &amp;quot;[My Recipes] This section describes the basic data structures and operations of popups.</description>
    </item>
    
    <item>
      <title>MacのPHP開発環境を整える</title>
      <link>http://tatsuyano.github.io/2012/11/02/mamp-php-mac/</link>
      <pubDate>Fri, 02 Nov 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/11/02/mamp-php-mac/</guid>
      <description> はじめに 勉強のためにローカル上でのPHP開発環境を作ろうと思います。
MAMPのインストール macにapache,mysql,phpをセットにしたものをインストールするためのソフト。
M(ac) A(pache) M(ysql) P(hp)。同じ用途でXAMPPというのもありますが、私の環境ではうまく動きませんでした。
 MAMPのインストール for Mac MAMPのダウンロードサイト  有償のPro版も同時にインストールされてしまいます。今回はPHPを少し触ってみたいだけなので、無償版を使います。
emacsのPHP開発環境  php-mode.elをインストールする php-completion.elをインストールする  補完機能と色付けだけは欲しかったのでインストール。
php-mode.elだけだと、phpファイルにhtmlの記述がある(又はその逆)とインデントがくずれてしまう。
なので最終的に、「php-mode + php-completion + nXhtml』を使う形に落ち着いた。
＊php-completionはauto-completeの機能を利用している
 nXhtmlをインストールする  php-mode.elの設定(インデントと、phpファイルを開いたときのmode指定)をコメントアウト
emacs ~/.emacs.d/conf/50_php.el ;; php-mode (require &#39;php-mode) ;;(setq php-mode-force-pear t) ;PEAR規約のインデント設定にする ;;(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.php$&amp;quot; . php-mode))  実行画面 htmlとphpのコードで書かれているindex.phpを開いてみると、htmlのコードを編集すると(nXhtml/nxhtml lnValid)に
phpのコードを編集すると(PHP/nxhtml Completion AC Abbrev)にmodeが切り替わる
補完機能もちゃんと動いている
＊nXhtmlで起動するさいに下記の警告がでるが、今のところ問題なく動いているので無視する
Warning: `font-lock-syntactic-keywords&#39; is an obsolete variable (as of 24.1); use `syntax-propertize-function&#39; instead.  </description>
    </item>
    
    <item>
      <title>nXhtmlをインストールする</title>
      <link>http://tatsuyano.github.io/2012/11/01/emacs-nxhtml/</link>
      <pubDate>Thu, 01 Nov 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/11/01/emacs-nxhtml/</guid>
      <description> nXhtmlとは htmlファイルには、javascriptやphp、perlなどhtml以外の複数の言語で書かれていたりする。
このため今までは、今書いている言語に合わせて、自分でモードの切り替えを行なっていたのだが、nXhtmlを使うと、自動で今書いている言語に合わせてモードを切り替えてくれる。
インストール nXhtmlの本家サイトの、Download latest nXhtml (zip file)からzipをダウンロードし、pathの通っている階層(add-to-list &amp;lsquo;load-path &amp;ldquo;~/.emacs.d/elisp&amp;rdquo;)に移動。
wget http://ourcomments.org/Emacs/DL/elisp/nxhtml/zip/nxhtml-2.08-100425.zip tar xvzf nxhtml-2.08-100425.zip mv nxhtml .emacs.d/elisp/  .emacs.elに一行追加。
※ 00_init.elに追加するとエラーになってしまったため、やむなく.emacs.elに追加
cat &amp;gt;&amp;gt; .emacs.el (load &amp;quot;nxhtml/autostart.el&amp;quot;)  バイトコンパイル M-x nxhtmlmaint-start-byte-compilation  コンパイル時にでるwarningの対応。下記の警告が出てくるので
Warning: `font-lock-beginning-of-syntax-function’ is an obsolete variable (as of Emacs 23.3); use `syntax-begin-function’ instead.  .emacs.d/elisp/nxhtml/util/mumamo.elの「font-lock-beginning-of-syntax-function」を「syntax-begin-function」に置換し、再度コンパイル。
nXhtmlのモードについて 「nXhtml/nxhtml Invalid)」や「PHP/nxhtml Completion AC Abbrev」にするには
M-x nxhtml-mumamo  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Web開発のためのEmacsの設定 Emacs23 に nXhtml をインストールしてみる  </description>
    </item>
    
    <item>
      <title>php-mode.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/10/29/emacs-php-mode/</link>
      <pubDate>Mon, 29 Oct 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/29/emacs-php-mode/</guid>
      <description> インストール M-x auto-install-from-url &amp;lt;RET&amp;gt; http://php-mode.svn.sourceforge.net/svnroot/php-mode/tags/php-mode-1.5.0/php-mode.el  .emacsの設定、50_php.elを作成する cat &amp;gt;&amp;gt; .emacs.d/conf/50_php.el ;; php-mode (require &#39;php-mode) (setq php-mode-force-pear t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.php$&amp;quot; . php-mode))  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 PHP開発環境 on Emacs  </description>
    </item>
    
    <item>
      <title>php-completion.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/10/29/emacs-php-completion/</link>
      <pubDate>Mon, 29 Oct 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/29/emacs-php-completion/</guid>
      <description> インストール M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: php-completion &amp;lt;RET&amp;gt;  .emacsの設定、50_php.elに追加 cat &amp;gt;&amp;gt; .emacs.d/conf/50_php.el ;; php-mode-hook (lambda () (require &#39;php-completion) (php-completion-mode t) (define-key php-mode-map (kbd &amp;quot;C-o&amp;quot;) &#39;phpcmp-complete) (make-local-variable &#39;ac-sources) (setq ac-sources &#39;( ac-source-words-in-same-mode-buffers ac-source-php-completion ac-source-filename ))))  補完はするときはC-o、又はauto-complete.elの機能で自動で補完対象が出るようになります。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 PHP開発環境 on Emacs  </description>
    </item>
    
    <item>
      <title>Emacs-Lispの変数の扱いについて</title>
      <link>http://tatsuyano.github.io/2012/09/20/emacs-lisp/</link>
      <pubDate>Thu, 20 Sep 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/09/20/emacs-lisp/</guid>
      <description> やさしいEmacs-Lisp講座(改訂版)の勉強メモ。
動的スコープ(P21) 変数(let*以外)は動的スコープとして扱われる。
つまり一度変数を宣言すると、その変数はどこからでも参照できてしまう。
変数名の衝突(P19) Emacs-Lispは処理系全体(読み込んでいるすべてのプログラム)で一つの名前空間しかない。
なのでグローバル変数にはパッケージ固有のプレフィックスをつける。
defvar(P19) defvarで変数を宣言すると、その変数の値は、defvarで再度値を代入しても更新されない(しかしsetqなどで値の代入された場合は更新されてしまう)。
Emacs-Lispでは「定数宣言」のように使っていく。
(defvar dvar 1 &amp;quot;実験用&amp;quot;) ;; -&amp;gt; 1 (defvar dvar 2) ;; -&amp;gt; 1 値が上書きされない (setq dvar 3) ;; -&amp;gt; 3 defvar以外で宣言(代入)された場合は上書きされてしまう。  set,setq(P18) 変数の代入(宣言)を行う。setqのほうは同時に複数の変数を代入できる。
(set &#39;foo 5) (setq aa 3 bb 2 cc 4)  let(P20) let式の中で初めて宣言された変数は、let式外(グローバル領域)では参照できない。
関数内だけで参照したい(ローカル変数として使いたい)場合に用いる。
グローバル変数をlet式内で一時的に変えたい場合に用いる。
本体すべてを評価したあとで、最後に評価した値を返す。
;書式&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
;(let (変数リスト)　|
; 本体) |
; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
(setq foo 5);; -&amp;gt; 5 (let ((foo 3) (fuga foo)) fuga);; -&amp;gt; 5 fugaがグローバル変数のfooで初期化されるため (let ((foo 3)) foo);; -&amp;gt; 3 let式のfooで初期化されるため foo ;; -&amp;gt; 5 let式で値が更新(代入)されても、値に影響されない fuga ;; -&amp;gt; error let式内で宣言された変数のため  let*(P21) (let* ((foo 3) (fuga foo)) fuga);; -&amp;gt; 3 fugaがlet式のfooで初期化されるため (let* ((foo 3)) foo);; -&amp;gt; 3 let式のfooで初期化されるため  </description>
    </item>
    
    <item>
      <title>markdown-mode.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/22/emacs-markdown/</link>
      <pubDate>Wed, 22 Aug 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/22/emacs-markdown/</guid>
      <description>インストール 本来、直接.emacs.d/elisp/以下でgit cloneして
.emacs.d/elisp/markdown-mode/ というディレクトリ構成にしたかったのですが、
あとで行う、文字色の設定が(ファイルの読み込み順序の関係で)うまくいかなかったので、
このようなディレクトリ構成になりました。
git clone git://jblevins.org/git/markdown-mode.git mv markdown.el webpage.sh .emacs.d/elisp/ rm -rf markdown-mode  emacs .emacs.d/conf/80_markdown.el ;;(add-to-list &#39;load-path &amp;quot;~/.emacs.d/elisp/markdown-mode&amp;quot;) ;; 今回elisp直下にファイルを置いたのでコメントアウト (autoload &#39;markdown-mode &amp;quot;markdown-mode.el&amp;quot; &amp;quot;Major mode for editing Markdown files&amp;quot; t) (setq auto-mode-alist (cons &#39;(&amp;quot;\\.md&amp;quot; . markdown-mode) auto-mode-alist))  文字(見出し等)に色を付ける デフォルトのままだと見出し等に色がついてなく、見にくいので
こちらのサイトを参考に色をつけてみました。
cat &amp;gt;&amp;gt; .emacs.d/conf/80_markdown.el ;; custom color (defface markdown-header-face-1 &#39;((((class color) (background light)) (:foreground &amp;quot;DeepPink1&amp;quot; :underline &amp;quot;DeepPink1&amp;quot; :weight bold)) (((class color) (background dark)) (:foreground &amp;quot;DeepPink1&amp;quot; :underline &amp;quot;DeepPink1&amp;quot; :weight bold))) &amp;quot;Face for level-1 headers.</description>
    </item>
    
    <item>
      <title>perltidyをインストールし、emacsでも使えるように設定する</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-perltidy/</link>
      <pubDate>Tue, 21 Aug 2012 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-perltidy/</guid>
      <description>はじめに perltidyとはperlのソースを指定したフォーマットに整形してくれるツールです。
インストール 私の環境はCentOSなので、yumでインストールします。
macとCentOS両方同じ方法でインストールしたいので、Perlモジュールのperltidyを使用することにします。
cpanm Perl::Tidy  フォーマットを指定する ホームディレクトリに「.perltidyrc」というファイルを生成し、フォーマットを指定します。
以下の設定は、書籍「Perl Best Practices」のものらしいです。。
cat &amp;gt; .perltidyrc -l=78 # Max line width is 78 cols -i=4 # Indent level is 4 cols -ci=4 # Continuation indent is 4 cols -st # Output to STDOUT -se # Errors to STDERR -vt=2 # Maximal vertical tightness -cti=0 # No extra indentation for closing brackets -pt=1 # Medium parenthesis tightness -bt=1 # Medium brace tightness -sbt=1 # Medium square brace tightness -bbt=1 # Medium block brace tightness -nsfs # No space before semicolons -nolq # Don&#39;t outdent long quoted strings -wbb=&amp;quot;% + - * / x !</description>
    </item>
    
    <item>
      <title>flymakeを設定し、perlのシンタックスチェックをする</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-flymake/</link>
      <pubDate>Tue, 21 Aug 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-flymake/</guid>
      <description>はじめに perlのシンタックスチェックをflymakeで行うには、事前に「set-perl5lib.el」をインストールする必要があります。
set-perl5lib.elのインストール cd .emacs.d/elisp/ wget http://svn.coderepos.org/share/lang/elisp/set-perl5lib/set-perl5lib.el  .emacsの設定 ;; flymake for perl (require &#39;flymake) (require &#39;set-perl5lib) ;; http://svn.coderepos.org/share/lang/elisp/set-perl5lib/set-perl5lib.el (defvar flymake-perl-err-line-patterns &#39;((&amp;quot;\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]&amp;quot; 2 3 nil 1))) (defconst flymake-allowed-perl-file-name-masks &#39;((&amp;quot;\\.pl$&amp;quot; flymake-perl-init) (&amp;quot;\\.pm$&amp;quot; flymake-perl-init) (&amp;quot;\\.t$&amp;quot; flymake-perl-init) )) (defun flymake-perl-init () (let* ((temp-file (flymake-init-create-temp-buffer-copy &#39;flymake-create-temp-inplace)) (local-file (file-relative-name temp-file (file-name-directory buffer-file-name)))) (list &amp;quot;perl&amp;quot; (list &amp;quot;-wc&amp;quot; local-file)))) (defun flymake-perl-load () (interactive) (set-perl5lib) (defadvice flymake-post-syntax-check (before flymake-force-check-was-interrupted) (setq flymake-check-was-interrupted t)) (ad-activate &#39;flymake-post-syntax-check) (setq flymake-allowed-file-name-masks (append flymake-allowed-file-name-masks flymake-allowed-perl-file-name-masks)) (setq flymake-err-line-patterns flymake-perl-err-line-patterns) (flymake-mode t)) (add-hook &#39;cperl-mode-hook &#39;(lambda () (flymake-perl-load))) (defun next-flymake-error () (interactive) (flymake-goto-next-error) (let ((err (get-char-property (point) &#39;help-echo))) (when err (message err)))) (global-set-key &amp;quot;\M-e&amp;quot; &#39;next-flymake-error)  実行画面 参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>init-loader.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-init-loader/</link>
      <pubDate>Tue, 21 Aug 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-init-loader/</guid>
      <description> インストール M-x auto-install-from-url &amp;lt;RET&amp;gt; http://coderepos.org/share/browser/lang/elisp/init-loader/init-loader.el  とりあえず.emacs.elをコピーし、00_init.elを作成 cp -a .emacs.el .emacs.d/conf/00_init.el  .emacsの設定 今後は、.emacs.d/conf/以下に、設定ごとのファイルを設置していくので、
.emacsには、読み込み先のみを設定する。
;; load-path (add-to-list &#39;load-path &amp;quot;~/.emacs.d/elisp&amp;quot;) (require &#39;init-loader) (init-loader-load &amp;quot;~/.emacs.d/conf&amp;quot;)  ファイルを分割する さきほど生成した00_init.elを設定ごとにファイルを分割していく。
tree . ├── 00_init.el ├── 10_auto_install.el ├── 50_autocomplete.el ├── 50_perl.el ├── 60_flymake.el ├── 80_markdown.el └── 80_serial_number.pl  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Perl Hacks on Emacs emacsでinit-loaderを導入してみた  </description>
    </item>
    
    <item>
      <title>perl-completion.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-perl-completion/</link>
      <pubDate>Mon, 20 Aug 2012 04:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-perl-completion/</guid>
      <description> はじめに すでにauto-intall.elがインストールされている前提で話をすすめます。
auto-installのインストール手順はこちらをご覧ください。
インストール手順 emacsを起動し、
M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: perl-completionn &amp;lt;RET&amp;gt;  auto-isntall-batchを実行、次にインストールしたいパッケージ名(perl-completion)を入力します。
すると自動で複数ソースのダウンロードが始まります。
ダウンロードし終わると「モード行」に
Type C-c C-c to continue; Type C-c C-d for view diff; Type C-c C-q to quit.  というメッセージが出てくるので、「C-c C-c」と入力し、ダウンロードしたソースを順番にコンパイルしていきます。
すべてコンパイルし終えると、以下のようなメッセージが表示され、インストールが完了します。
Installation is completed.  .emacsの設定 cperl-mode時に、auto-completion(とauto-complete)を有効にするように設定します。
;; perl-completion (add-hook &#39;cperl-mode-hook (lambda () (require &#39;auto-complete) (require &#39;perl-completion) (add-to-list &#39;ac-sources &#39;ac-source-perl-completion) (perl-completion-mode t)))  実行画面 </description>
    </item>
    
    <item>
      <title>anything.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-anything/</link>
      <pubDate>Mon, 20 Aug 2012 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-anything/</guid>
      <description>はじめに すでにauto-intall.elがインストールされている前提で話をすすめます。
auto-installのインストール手順はこちらをご覧ください。
##インストール手順
emacsを起動し、
M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: anything &amp;lt;RET&amp;gt;  auto-isntall-batchを実行、次にインストールしたいパッケージ名(anything)を入力します。
すると自動で複数ソースのダウンロードが始まります。
ダウンロードし終わると「モード行」に
Type C-c C-c to continue; Type C-c C-d for view diff; Type C-c C-q to quit.  というメッセージが出てくるので、「C-c C-c」と入力し、ダウンロードしたソースを順番にコンパイルしていきます。
すべてコンパイルし終えると、以下のようなメッセージが表示され、インストールが完了します。
Installation is completed.  インストールされるソース一覧 cd .emacs.d/elisp/ tree . ├── anything-auto-install.el ├── anything-auto-install.elc ├── anything-complete.el ├── anything-complete.elc ├── anything-config.el ├── anything-config.elc ├── anything-grep.el ├── anything-grep.elc ├── anything-gtags.el ├── anything-gtags.elc ├── anything-ipa.el ├── anything-ipa.elc ├── anything-match-plugin.</description>
    </item>
    
    <item>
      <title>auto-complete.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-auto-complete/</link>
      <pubDate>Mon, 20 Aug 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-auto-complete/</guid>
      <description> はじめに すでにauto-intall.elがインストールされている前提で話をすすめます。
auto-installのインストール手順はこちらをご覧ください。
またauto-installを使わずに、手動でインストール、コンパイルしたい場合は
下記サイト(auto-complete.elの開発者さんが説明してくれています)をご参照ください。
「Emacsのトラノマキ」連載第09回「auto-completeを使おう」
インストール手順 emacsを起動し、
M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: auto-complete development version &amp;lt;RET&amp;gt;  auto-isntall-batchを実行、次にインストールしたいパッケージ名(auto-complete development version)を入力します。
すると自動で複数ソースのダウンロードが始まります。
ダウンロードし終わると「モード行」に
Type C-c C-c to continue; Type C-c C-d for view diff; Type C-c C-q to quit.  というメッセージが出てくるので、「C-c C-c」と入力し、ダウンロードしたソースを順番にコンパイルしていきます。
すべてコンパイルし終えると、以下のようなメッセージが表示され、インストールが完了します。
Installation is completed.  ##. emacsの設定
;; auto-complete (require &#39;auto-complete) (require &#39;auto-complete-config) ; 必須ではないですが一応 (global-auto-complete-mode t)  実行画面 参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 「Emacsのトラノマキ」連載第09回「auto-completeを使おう」
  </description>
    </item>
    
    <item>
      <title>auto-install.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-auto-install/</link>
      <pubDate>Mon, 20 Aug 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-auto-install/</guid>
      <description> anything.elやperl-completion.elを簡単にインストールできるauto-install.elをインストールします。
emacs.d以下の構成 .emacs.d以下の構成はPerl Hacks on Emacsに習い、以下のようにします。
.emacs.d ├── conf … init-loader.elで使う。 ├── elisp … auto-install.elでインストールしたソースや、手動でダウンロードしたソースの置場所。 └── site … それ以外のライブラリの置場所。  ダウンロード cd .emacs.d/elisp/ wget http://www.emacswiki.org/emacs/download/auto-install.el  .emacsの設定 ;; emacs起動時に、読み込むソース(auto-installなど)の置場所を指定します。 (add-to-list &#39;load-path &amp;quot;~/.emacs.d/elisp&amp;quot;) ;; auto-installでインストールしたソースの置場所を指定します。 (require &#39;auto-install) (setq auto-install-directory &amp;quot;~/.emacs.d/elisp/&amp;quot;)  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Perl Hacks on Emacs auto-install.el のインストール  </description>
    </item>
    
  </channel>
</rss>