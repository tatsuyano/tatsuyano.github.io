<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/aws/</link>
    <description>Recent content in Aws on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 26 Sep 2014 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWSのセキュリティを強化する</title>
      <link>http://tatsuyano.github.io/2014/09/26/enhanced-security-of-aws/</link>
      <pubDate>Fri, 26 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/26/enhanced-security-of-aws/</guid>
      <description> AWSを本格的に使い始めて来たので、こちらの記事を参考にセキュリティの設定を行いました。改めて記事にするか迷いましたが、いちよ備忘のために残しておこうと思います。
今回の作業の流れは以下になります。
 Authyを使ってrootアカウントに2段階認証を導入する IAMユーザを作成し、IAMユーザでAWSを運用する rootアカウントのAccessKeyを削除する  Authyの設定、インストール セキュリティといってもいろいろあると思うのですが、まずはAWSコンソールにログインできるrootアカウント のセキュリティを強化することだと思います。
今回はAuthyというアプリケーションを使って、AWSに2段階認証を導入しようと思います。
通常の2段階認証だと、ログインする度に事前に登録してあるSMSにPINコードを送ってもらい、そのPINコードを入力すると思うのですが、 Authyを使うことで、Authyが生成するPINコードを入力してログインが可能になります。
Authyの設定はこちらの記事を参考にしてください。
MFAを有効にし、rootアカウントを2段階認証に対応させる IAMに、MFA(multi-factor authentication)という外部のサービスを使って 2段階認証する機能を使って、AuthyにrootアカウントのPINコードを生成できるように設定します。
IAMユーザを作成する Administrator権限のIAMユーザを作成し、こちらもAuthyに紐付けます。
rootアカウントのAccessKeyを削除する 今後rootアカウントを使って、インスタンスの操作はしないので、AccessKeyを削除します。
ここまでの作業で、
 rootアカウントに2段階認証の導入 IAMユーザの作成、及び2段階認証の導入  今後はコンソールにもIAMユーザでログインして作業してください。 お疲れ様でした。
参考サイト  Authy: 2段階認証のコードをまとめて管理! 紛失時の復元・データ同期もできる AWSアカウント作ったらこれだけはやっとけ！IAMユーザーとAuthyを使ったMFAで2段階認証  関連する記事  Route53のDNSを使う Route53にドメインを移管する  </description>
    </item>
    
    <item>
      <title>Route53にドメインを移管する</title>
      <link>http://tatsuyano.github.io/2014/09/16/transferred-a-domain-to-route53/</link>
      <pubDate>Tue, 16 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/16/transferred-a-domain-to-route53/</guid>
      <description> Route53のDNSを使うようにしたので、続けてドメインも移管したいと思います。
AuthCodeの取得 value-domainからAuthCodeを取得します。
まずはAuthCodeを取得する前に、whois代行を利用している場合は 先に自分の情報に変更します。
whois情報を自分の情報に変更後、一度saveをし、 再度同じページを開くと、画面下側にAuthCodeが表示されています。
ドメインの移管 ドメインの移管時にドメインが利用しているNSを入力するので、事前に確認しておきます。
次にドメインがRoute53で移管できるか確認します。 ちなみに.comドメインの移管料は$12.00でした。
移管をすると、ドメインの利用期間が1年伸びます
whois情報を登録します。
「Thank you for transferring your domain to Route 53」とメッセージがでれば完了です。
登録完了後、数日後に確認メールが来るのでaccept(許可)してください。
ちなみに移管が完了するまでに、7日かかりました。。
以上で完了です。お疲れ様でした。
参考サイト  Amazon Route 53にドメインを移管してみた Value Domainからお名前.comへドメインを移管してみた  関連する記事  Route53のDNSを使う aws はじめました。  </description>
    </item>
    
    <item>
      <title>Route53のDNSを使う</title>
      <link>http://tatsuyano.github.io/2014/09/11/using-the-dns-of-route53/</link>
      <pubDate>Thu, 11 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/11/using-the-dns-of-route53/</guid>
      <description>BlogをEC2で運用しているので、せっかくなのでネームサーバーもAmazonが提供しているRoute53 を使ってみたいと思います。 料金が少し気になるところですが、個人のサイトなら100円/月ぐらい見ておけばよさそうです(未確認)。
 個人サイトでAmazon Route 53を一ヶ月間使った場合の料金 Amazon Route 53 料金表  今回変更するドメイン(10rane.com)はvalue-domainで管理しています。 作業の流れとしては、以下になります。
 Route53にレコードを登録 レジストラ(value-domain)に設定しているネームサーバーを変更  変更前のネームサーバーの状態を確認 value-domainのネームサーバーを利用していることがわかります。
$ nslookup -type=any 10rane.com 10rane.com nameserver = ns1.value-domain.com. 10rane.com nameserver = ns2.value-domain.com. 10rane.com origin = ns1.value-domain.com mail addr = hostmaster.10rane.com serial = 1410401066 refresh = 16384 retry = 2048 expire = 1048576 minimum = 2560 Name: 10rane.com Address: 49.212.146.214  　$ dig 10rane.com ns ;; ANSWER SECTION: 10rane.com. 1124 IN NS ns2.</description>
    </item>
    
    <item>
      <title>vagrant-aws-pluginをインストール</title>
      <link>http://tatsuyano.github.io/2014/07/21/install-vagrant-aws-plugin/</link>
      <pubDate>Mon, 21 Jul 2014 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/21/install-vagrant-aws-plugin/</guid>
      <description>vagrant-awsプラグインを使うことで、コマンドラインで インスタンスの作成、起動ができるようになります。
vagrant-aws(plugin)のインストール $ vagrant plugin install vagrant-aws Installing the &#39;vagrant-aws&#39; plugin. This can take a few minutes... Installed the plugin &#39;vagrant-aws (0.4.1)&#39;!  インストールされているpluginの確認 $ vagrant plugin list vagrant-aws (0.4.1) vagrant-login (1.0.1, system) vagrant-share (1.0.1, system)  BOXのインストール $ vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box ==&amp;gt; box: Adding box &#39;dummy&#39; (v0) for provider: box: Downloading: https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box ==&amp;gt; box: Successfully added box &#39;dummy&#39; (v0) for &#39;aws&#39;! $ vagrant box list chef/centos-6.</description>
    </item>
    
    <item>
      <title>aws はじめました。</title>
      <link>http://tatsuyano.github.io/2014/07/21/start-aws/</link>
      <pubDate>Mon, 21 Jul 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/21/start-aws/</guid>
      <description>現在AWSの無料キャンペーンをやっているので、試してみました。
AWSのアカウント作成 こちらAmazonのサイトに詳細な説明があるので、省略。
 無料アカウント作成の流れ  インスタンスの作成 まずはEC2のコンソール画面を開きます。 REGIONの選択 レスポンスが気になるので、REGIONは「Tokyo」に。真ん中あたりの「Launch Instance」で作成画面に遷移します。 Image(AMI)の選択 「Free tier only」が無料Image(AMI)なので、「Amazon Linux」を選択。 Instanceの選択 こちらも無料の「Micro instances」を選択。 InstanceにTagをつける とりあえず Name というkeyに、「amz_tokyo」というvalueをつけました。 firewallの設定 allow(許可)の条件を設定する模様。固定IPがあるので、SSHにIPを指定します。 とりあえずHTTPとping(Custom ICMP Rule)も設定しました。 秘密鍵の作成、及びダウンロード 最後に秘密鍵を作成しダウンロードします。 DLした秘密鍵のpermissionを600にしてください。
$ chmod 600 .ssh/amz_tokyo.pem  DNS経由で、ssh接続 ユーザは「ec2-user」、接続先IPは、public DNSのURLを指定します。 $ ssh -i .ssh/amz_tokyo.pem ec2-user@ec2-xxxx-xxxx-.ap-northeast-1.compute.amazonaws.com   __| __|_ ) _| ( / Amazon Linux AMI ___|\___|___|  DNSから固定IP(Elastic Ips)に変更する Elastic Ips(EIP)の料金について インスタンスが「起動」しているIPに対してEIPを割り当てても無料だが、 「停止」しているインスタンスに対して、EIPを割り当てたまま放置しておくと1hに$0.01課金されるので注意。
Instanceを指定し、固定IPと紐付ける firewallの再設定 固定IPに変更したので、先ほど設定したfirewallの設定が再度行う。
 EC2でpingを許可する  pingでレスポンスの測定 「Tokyo」以外のREGIONと比較しないと意味がないが、計測方法をメモ。 下記のコマンドは 64byteのリクエストを10回投げて、レスポンスが帰ってくるまで計測結果。</description>
    </item>
    
  </channel>
</rss>