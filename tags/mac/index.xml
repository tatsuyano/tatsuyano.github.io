<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mac on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/mac/</link>
    <description>Recent content in Mac on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 15 Oct 2014 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Homebrew CaskでMacアプリをインストールする</title>
      <link>http://tatsuyano.github.io/2014/10/15/how-to-install-and-setup-homebrew-cask/</link>
      <pubDate>Wed, 15 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/15/how-to-install-and-setup-homebrew-cask/</guid>
      <description> EmacsのCaskのように、インストールしたMacアプリをファイルに記述して、一括管理できる方法を探していたところ、 Homebrew Caskというものを見つけました。
Homebrew CaskはHomebrewの拡張で、コマンドラインでMacアプリをインストールできるようになります。 また、Homebrewの拡張なので、Brewfileを使って、アプリも一括インストール(管理)できるようになります。
Homebrew Caskのインストール 念のため、先にHomebrew本体、インストール済みのコマンドをアップデートします。
$ sudo -E bash
brew update brew upgrade brew tap phinze/homebrew-cask brew install brew-cask  Macアプリの検索 searchに続けて、検索文字を入力すれば、絞り込み検索ができます。
# brew cask search  Macアプリの(単体)インストール、アンインストール デフォルトだと、インストール先は/Users/hoge/Application 配下になります。 変更する場合は、HOMEBREW_CASK_OPTSを設定してください。
# export HOMEBREW_CASK_OPTS=&amp;ldquo;&amp;ndash;appdir=/Applications&amp;rdquo;
brew cask install github brew cask uninstall github  Brewfileでのインストール Macアプリ以外にもHomebrewでインストールしたコマンドもインストール(管理)できます。
# brew bundle  こちらにgitにあげた私のBrewfileを貼っておきます。gist-itを使うと、 gistではなく、gitに上げたファイルも読み込めるようになりました。
 参考サイト  homebrew-caskを使って簡単にMacの環境構築をしよう！ Homebrewで*.dmgなアプリをインストールしたい→それhomebrew-caskで出来るよ  </description>
    </item>
    
    <item>
      <title>Ricky for powerlineをmacにインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/06/install-ricky-powerline-for-mac/</link>
      <pubDate>Wed, 06 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/06/install-ricky-powerline-for-mac/</guid>
      <description> agnosterはpowerline.otfにある依存文字を使うことを前提しているので、 macにpowerline系のフォントをインストールします。
少しややこしいのですが、元々powerlineというフォントはvimで使う用？だったので ググるとよくvim-powerlineとかがヒットしますが同じもののようです。
また、既存のフォントをpowerline化(既存のフォントに依存文字を使えるようにする)することもできます。
今回は、今使っているRictyをそのまま使いたかったので、 新たにRicty for powerlineというフォントをbrewでインストールしてみました。
brew update brew uninstall ricty brew tap sanemat/font brew install --vim-powerline ricty cp -f /usr/local/Cellar/ricty/3.2.3/share/fonts/Ricty*.ttf ~/Library/Fonts/   homebrewを使ってiTerm2でRicty for powerline設定した  インストールが完了したら、iTermのフォントの設定を変更して、iTermを再起動してください。
お疲れ様でした。
関連する記事  oh-my-zshをインストールする  </description>
    </item>
    
    <item>
      <title>oh-my-zshをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/06/install-oh-my-zsh/</link>
      <pubDate>Wed, 06 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/06/install-oh-my-zsh/</guid>
      <description>今まで設定が面倒で試していなかったoh-my-zshをインストールしてみました。下記の方法で、mac、centosともに対応可能です。
oh-my-zshをインストールする すでにzshはインストールされているものとします。
また、今ある$HOME/.zshrcはインストール時に上書きされてしまうので事前に退避してください。
インストールするとHOME直下に.oh-my-zshというディレクトリが作成され.zshrcが上書きされます。
インストール
curl -L http://install.ohmyz.sh | sh  インストールが終わったので、いったんsorce .zshrcして、oh-my-zshを使ってみます。promptが変更されたはずです。
oh-my-zshは、themeとplugin(複数選択可)という単位でzshを管理しています。 初期設定はthemeがrobbyrussell、pluginがgitです。
oh-my-zshのディレクトリ構成
. ├── custom ... 自分が設定したzshrcを入れる │ └── plugins ... 自分で作ったpluginを入れる ├── lib ├── log ... zsh_historyなどを入れる ├── plugins ... gitなどソフトウェア単位の設定ファイルが入っている ├── templates ... zshrcのテンプレートファイルが入っている ├── themes ... promptなど見た目の設定ファイルが入っている └── tools  customに自分の設定ファイルを入れる 整理されていませんが、とりあえずcustomディレクトリに入れてみます。
因みに拡張子は.zshで、ファイル名は自由です。
main.zsh
export LC_ALL=en_US.UTF-8 export LANG=ja_JP.UTF-8 export EDITOR=emacs bindkey -e # emacsライクなキーバインド autoload -U compinit # 強力な補完機能 compinit -u # このあたりを使わないとzsh使ってる意味なし setopt autopushd # cdの履歴を表示 setopt pushd_ignore_dups # 同ディレクトリを履歴に追加しない setopt auto_cd # 自動的にディレクトリ移動 ## 履歴 HISTFILE=~/.</description>
    </item>
    
    <item>
      <title>tmuxでもpbcopy、pbpasteを使えるように設定する</title>
      <link>http://tatsuyano.github.io/2013/05/01/pbcopy-pbpaste/</link>
      <pubDate>Wed, 01 May 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/05/01/pbcopy-pbpaste/</guid>
      <description>最近しりましたpbcopyとpbpasteをtmuxで使う方法です。
pbcopyとpbpasteの使い方 ls -la | pbcopy # 標準出力 -&amp;gt; クリップボード pbpaste &amp;gt; hoge.txt # クリップボード -&amp;gt; 標準出力  pbcopyとpbpasteをtmuxで使うための設定 tmuxで、pbcopyとpbpasteが正しく動かない。
brew install reattach-to-user-namespace  .tmux.conf
set -g default-command &#39;reattach-to-user-namespace -l zsh&#39;  tmuxにpbcopyのキーバインドを追加 Mac の tmux でクリップボードを使う。のサイトを参考にpbcopyのキーバインドを追加しました。
.tmux.conf
# buffer copy bind C-q run-shell &#39;reattach-to-user-namespace tmux-pbcopy&#39;  emacs $HOME/Dropbox/dotfile/mybin/tmux-pbcopy
#! /bin/sh tmux save-buffer /tmp/.tmux_to_pbcopy cat /tmp/.tmux_to_pbcopy | pbcopy # 以下はメッセージを表示するだけ。無くてもOK。 HEAD=`head -1 /tmp/.tmux_to_pbcopy` TAIL=`tail -1 /tmp/.tmux_to_pbcopy` tmux display-message &amp;quot;Copy: $HEAD - $TAIL&amp;quot;  使い方  C-z C-[ でコピーモードに入る。 C-SPCで選択開始 C-wでバッファにコピー C-z C-qでバッファの内容をクリップボードにコピー  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>iterm2のカラースキームを変更する</title>
      <link>http://tatsuyano.github.io/2013/04/05/item2-color-scheme/</link>
      <pubDate>Fri, 05 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/05/item2-color-scheme/</guid>
      <description>最近は background を白系の透過で使っていたが、なんとなくまた黒系の透過に戻してみた。
毎回自分で設定するのは面倒なので、今回はこちらの方のカラースキームを使わしてもらうことにした。
iTerm 2 で使えるカラースキーム、Japanesque を作った
カラースキームのダウンロード $ mkdir Dropbox/src/itermcolors $ cd Dropbox/src/itermcolors $ wget https://raw.github.com/aereal/dotfiles/master/colors/Japanesque/Japanesque.itermcolors  カラースキームの設定 新しい Profile を作成する Preferences &amp;gt; Profiles &amp;gt; General &amp;gt; +
Preferences &amp;gt; Profiles &amp;gt; General &amp;gt; Name
Preferences &amp;gt; Profiles &amp;gt; General &amp;gt; Other Actions &amp;gt; Set as Default
ダウンロードしたカラースキームを import する Import を行うと、Load Presets に新たに Japanesque が追加される。
Preferences &amp;gt; Profiles &amp;gt; Colors &amp;gt; Import
Preferences &amp;gt; Profiles &amp;gt; Colors &amp;gt; Japanesque</description>
    </item>
    
    <item>
      <title>MAMP環境でのCakePHPのmysql.sockの指定方法</title>
      <link>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</link>
      <pubDate>Mon, 04 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</guid>
      <description>worning MacにMAMPをインストールし、CakePHPの「bakeコンソール」でModelクラスを作成したさいに、mysql.sockの指定箇所が違うよと警告された
Warning Error: PDO::__construct(): [2002] No such file or directory (trying to connect via unix:///var/mysql/mysql.sock) in [/Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/Database/Mysql.php, line 149] Error: Database connection &amp;quot;SQLSTATE[HY000] [2002] No such file or directory&amp;quot; is missing, or could not be created. #0 /Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/DboSource.php(260): Mysql-&amp;gt;connect()  MAMPを使っているので、mysql.sockは「/Applications/MAMP/tmp/mysql/mysql.sock」作成されている。
たぶん解決方法としては３つあって、
1.sockファイルをworiningに書いてある「/var/mysql/mysql.sock」に生成するようMysql側の設定をいじる。
2.「/var/mysql/mysql.sock」に「/Applications/MAMP/tmp/mysql/mysql.sock」のリンクを貼ってしまう。
3.たぶん「app/Config/database.php」に現在生成されているmysql.sockの場所を指定する。
どう考えても「３」が正しいやり方だと思うけど、なかなかそれっぽい情報が引っかからなかったがやっとあった。
Cakephp console (bake) on Mac OS with Mamp : database connection error
public $default = array( &#39;datasource&#39; = &#39;Database/Mysql&#39;, &#39;persistent&#39; = false, &#39;host&#39; = &#39;localhost&#39;, &#39;login&#39; = &#39;USERNAME&#39;, &#39;password&#39; = &#39;PASSWORD&#39;, &#39;database&#39; = &#39;DATABASE&#39;, &#39;encoding&#39; = &#39;utf8&#39;, &#39;unix_socket&#39; = &#39;/Applications/MAMP/tmp/mysql/mysql.</description>
    </item>
    
    <item>
      <title>iterm2 &#43; tmux に乗り換えた</title>
      <link>http://tatsuyano.github.io/2013/01/27/item2-tmux/</link>
      <pubDate>Sun, 27 Jan 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/01/27/item2-tmux/</guid>
      <description>今まで頑なにTotalTerminal + KeyRemap4MacBookを使って来た私ですが、ついに乗り換えることにしました。
理由はKeyRemap4MacBookをバージョンアップしたら、一部のkey bindが使えなくなってしまったから。まあいい機会なので乗り換えたいと思います。
iterm2のバージョン iterm2の公式ページからダウンロード
ダウンロードしたファイル解凍してみるとなぜか「tmux-for-iTerm2-20130122.tar.gz」というファイルも入っている。
iterm2の公式wikiで調べてみると、tmuxを使う場合、この「iTerm2用のtmux」じゃないと細かい挙動が期待どおりに動かないっぽい（適当）。
なので、このタイミングでScreenからtmuxにも乗り換えてみることにした。
brewでlibevnetのインストール まず、こちらのサイト「Lionにiterm2とtmux と libeventをインストールする」を参考にlibenventをインストール。
brew update brew install libevent  tmuxのインストール さきほどダウンロードしたファイルを解凍し、make &amp;amp; install
tar xvzf tmux-for-iTerm2-20130122.tar.gz cd tmux ./configure make make clean sudo make install  念のためtmuxのインストール先を確認
which tmux /usr/local/bin/tmux  iterm2の初期設定 今まで、KeyRemap4MacBookでcmdとoptionを入れ替えていて、操作上はcmdにmetaキーが割り振ってある感じにして使っていたんですが、このタイミングでoptionにmetaキーを割り当てることにしました。
ただ、それ以外の操作はできるかぎりTotalTerminalと同じようにしたいので、その設定をしていきます。
バックグラウンドを白にし、透過させる Preferences &amp;gt; Profiles &amp;gt; Colors &amp;gt; Background
Preferences &amp;gt; Profiles &amp;gt; Window &amp;gt; Transparency
画面の上部からターミナルをショートカットで表示できるようにする Preferences &amp;gt; Profiles &amp;gt; Window &amp;gt; Setting for New Window &amp;gt; Style &amp;gt; Top of Screen</description>
    </item>
    
    <item>
      <title>MacにRictyをインストールする</title>
      <link>http://tatsuyano.github.io/2012/09/16/mac-ricky/</link>
      <pubDate>Sun, 16 Sep 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/09/16/mac-ricky/</guid>
      <description> Rictyとは 去年あたりから話題だったRictyをなんとなくインストールしてみました。
フォントの特徴は、本家サイトに詳しく書いてあるので見て頂くとして、個人的には「半角文字と全角文字の横幅の比が 1:2 に調整される」ところが素敵だなあと思います。
インストールの前に Rictyをインストール(生成する)には、事前に
1.「fontforge」がインストールされていること
2.「Inconsolata」と「Migu 1M」をダウンロードしていること
が前提となります。
fontforgeのインストール homebrewでインストールします。
brew install fontforge --use-gcc --without-python  Ricty本体のダウンロード git clone git://github.com/yascentur/Ricty.git  Inconsolata、Migu 1Mのダウンロード ダウンロード先は、先程cloneしてできたRictyディレクトリ内にしました。
cd git/Ricty wget http://levien.com/type/myfonts/Inconsolata.otf wget &#39;http://sourceforge.jp/frs/redir.php?m=iij&amp;amp;f=%2Fmix-mplus-ipa%2F56156%2Fmigu-1m-20120411-2.zip&#39; unzip migu-1m-20120411-2.zip  Rictyの生成 sh ricty_generator.sh auto  生成したフォントをコピー Macのフォントは/Library/Fonts以下で管理しているので、生成したRictyをcopy。
cp -a Ricty*.ttf /Library/Fonts  ターミナルのフォントの設定をRictyにする 他のサイトではemacs単体のみに設定していることが多かったんですが、
せっかくなんでターミナル全体に設定します。ちなみに私はTotalTerminal派です。
実行画面 見ていただくと解るように
「半角文字と全角文字の横幅の比が 1:2に調整されている」
「全角スペースが可視化されている」ことがわかります。
文字自体は少し丸っこくて初めはちょっとだけ違和感があったのですが、慣れるとすごく見やすく感じてきました。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 プログラミング用フォント Ricty Mac OS X Lion環境NetBeans IDEにプログラミング用フォントRicty導入  </description>
    </item>
    
  </channel>
</rss>