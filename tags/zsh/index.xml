<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zsh on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/zsh/</link>
    <description>Recent content in Zsh on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 21 Aug 2014 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/zsh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>pecoで接続先hostを選ぶスクリプトを書いた</title>
      <link>http://tatsuyano.github.io/2014/08/21/select-host-for-peco/</link>
      <pubDate>Thu, 21 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/21/select-host-for-peco/</guid>
      <description> pecoを使って、sshするhostを選択するスクリプトを書きました。
.oh-my-zsh/custom/peco.zsh
function peco-select-host () { host=$(grep -iE &#39;^host\s+(\w|\d)+&#39; ~/.ssh/config | awk &#39;{print $2}&#39; | peco) if [ -n &amp;quot;$host&amp;quot; ]; then ssh $host fi } alias hs=peco-select-host  元々ある~/.ssh/configをgrepしてhost名を渡してるだけ。
1、2文字のキーバインド(ストローク？)がなかったので、aliasでhsにしました。
$ hs QUERY&amp;gt; clgit support test01 ghost #&amp;lt;-接続先のhostを選ぶ  peco楽しいですね。お疲れ様でした。
関連する記事  流行りのpecoをcentosにインストールしました goパッケージ(peco)のバージョンを上げる  </description>
    </item>
    
    <item>
      <title>zshをバージョン5 に上げる</title>
      <link>http://tatsuyano.github.io/2014/08/19/install-zsh5/</link>
      <pubDate>Tue, 19 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/19/install-zsh5/</guid>
      <description>yumでインストールするとバージョンが4.3だったので、makeしてインストールしました。
まずはmakeするために必要なライブラリのインストール
# yum -y install gcc ncurses-devel  ダウンロード
# wget http://www.zsh.org/pub/zsh-5.0.5.tar.bz2 # tar jxvf zsh-5.0.5.tar.bz2  make &amp;amp; install
# cd zsh-5.0.5 # ./configure # make # make install  インストールが正常に終わったら、zshを登録します。
shellの登録 &amp;amp; 変更
# echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells # chsh  /usr/local/bin/zsh以外にインストールされている可能性があるので、確認してください
$ zsh --version zsh 5.0.5 (x86_64-unknown-linux-gnu)  ログイン時にzshが起動するようbashrcに追加する。
~/.bashrc
# Use zsh if [ -f /usr/local/bin/zsh ]; then exec /usr/local/bin/zsh fi  一度ログアウトし、ログイン後shellがzshに切り替わっていれば完了です。
$echo $0 /usr/local/bin/zsh   linux/zsh 現在の shell を shellscript の中から確認する  お疲れ様でした。</description>
    </item>
    
    <item>
      <title>Ricky for powerlineをmacにインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/06/install-ricky-powerline-for-mac/</link>
      <pubDate>Wed, 06 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/06/install-ricky-powerline-for-mac/</guid>
      <description> agnosterはpowerline.otfにある依存文字を使うことを前提しているので、 macにpowerline系のフォントをインストールします。
少しややこしいのですが、元々powerlineというフォントはvimで使う用？だったので ググるとよくvim-powerlineとかがヒットしますが同じもののようです。
また、既存のフォントをpowerline化(既存のフォントに依存文字を使えるようにする)することもできます。
今回は、今使っているRictyをそのまま使いたかったので、 新たにRicty for powerlineというフォントをbrewでインストールしてみました。
brew update brew uninstall ricty brew tap sanemat/font brew install --vim-powerline ricty cp -f /usr/local/Cellar/ricty/3.2.3/share/fonts/Ricty*.ttf ~/Library/Fonts/   homebrewを使ってiTerm2でRicty for powerline設定した  インストールが完了したら、iTermのフォントの設定を変更して、iTermを再起動してください。
お疲れ様でした。
関連する記事  oh-my-zshをインストールする  </description>
    </item>
    
    <item>
      <title>oh-my-zshをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/06/install-oh-my-zsh/</link>
      <pubDate>Wed, 06 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/06/install-oh-my-zsh/</guid>
      <description>今まで設定が面倒で試していなかったoh-my-zshをインストールしてみました。下記の方法で、mac、centosともに対応可能です。
oh-my-zshをインストールする すでにzshはインストールされているものとします。
また、今ある$HOME/.zshrcはインストール時に上書きされてしまうので事前に退避してください。
インストールするとHOME直下に.oh-my-zshというディレクトリが作成され.zshrcが上書きされます。
インストール
curl -L http://install.ohmyz.sh | sh  インストールが終わったので、いったんsorce .zshrcして、oh-my-zshを使ってみます。promptが変更されたはずです。
oh-my-zshは、themeとplugin(複数選択可)という単位でzshを管理しています。 初期設定はthemeがrobbyrussell、pluginがgitです。
oh-my-zshのディレクトリ構成
. ├── custom ... 自分が設定したzshrcを入れる │ └── plugins ... 自分で作ったpluginを入れる ├── lib ├── log ... zsh_historyなどを入れる ├── plugins ... gitなどソフトウェア単位の設定ファイルが入っている ├── templates ... zshrcのテンプレートファイルが入っている ├── themes ... promptなど見た目の設定ファイルが入っている └── tools  customに自分の設定ファイルを入れる 整理されていませんが、とりあえずcustomディレクトリに入れてみます。
因みに拡張子は.zshで、ファイル名は自由です。
main.zsh
export LC_ALL=en_US.UTF-8 export LANG=ja_JP.UTF-8 export EDITOR=emacs bindkey -e # emacsライクなキーバインド autoload -U compinit # 強力な補完機能 compinit -u # このあたりを使わないとzsh使ってる意味なし setopt autopushd # cdの履歴を表示 setopt pushd_ignore_dups # 同ディレクトリを履歴に追加しない setopt auto_cd # 自動的にディレクトリ移動 ## 履歴 HISTFILE=~/.</description>
    </item>
    
    <item>
      <title>autojumpからzに乗り換えた</title>
      <link>http://tatsuyano.github.io/2014/08/04/autojump-to-z/</link>
      <pubDate>Mon, 04 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/04/autojump-to-z/</guid>
      <description> autojumpを今まで使っていたが、zshrcを編集していたらエラーを吐くようになったので、 このタイミングでzに乗り換えてみた
インストール $ cd .dotfile git clone https://github.com/rupa/z.git .zsh  .zshrc
_Z_CMD=j source ~/.dotfile/.zsh/z.sh precmd() { _z --add &amp;quot;$(pwd -P)&amp;quot; }  キーバインドはjに変更。 ホーム直下に.zというファイルが作成され、そのファイルに履歴が溜まっていく
 z AUTOJUMPよりZ.SHのほうがPYTHONなしで動いて良いよ  </description>
    </item>
    
  </channel>
</rss>