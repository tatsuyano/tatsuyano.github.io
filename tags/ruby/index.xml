<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/ruby/</link>
    <description>Recent content in Ruby on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 25 Jul 2015 18:15:01 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ブログをGhostからHugoに移行した</title>
      <link>http://tatsuyano.github.io/2015/07/25/switch-hugo/</link>
      <pubDate>Sat, 25 Jul 2015 18:15:01 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/25/switch-hugo/</guid>
      <description> 今までaws上でブログ(Ghost)を運用していたが、無料期間が終わったら月2000円
ちょっとかかったので、またGithub Pages上にブログを移行させた。
以前はGithub PagesでOctopressを使っていたが、最近はHugoというのが流行っているらしいので使ってみた。
記事が思いの外多かったので、エクスポート用のコードをrubyで書いた。
コードを書くのに思ったより時間がかかったが、久々にrubyを使って楽しかった。
 参考サイト  HugoとCircleCIでGitHub PagesにBlogを公開してみたら超簡単だった Hugoを使ってみたときのメモ Hugo + Github Pages + Wercker CI = ¥0（無料）でコマンド 1 発  </description>
    </item>
    
    <item>
      <title>Rails4の非公開情報をdotenvで管理する</title>
      <link>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</link>
      <pubDate>Wed, 13 May 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</guid>
      <description>TwitterのAPIキーなど、公開したくない情報をどこに設定すればいいか調べたところ、 config/secrets.ymlに設定して、.gitignoreして使うようなので、設定してみました。
# config/secrets.yml development: twitter_api_key: hogefuga..... # 呼び出し側 key = Rails.application.secrets.twitter_api_key  しかしherokuを利用する場合、この`secrets.yml`というファイル自体必須なので、`.gitignore`するわけにはいきません。 * [How to solve error &#34;Missing secret_key_base for production environment&#34; on Heroku](http://stackoverflow.com/questions/23180650/how-to-solve-error-missing-secret-key-base-for-production-environment-on-h) ## dotenv-railsの設定 そこで検討した結果、`dotenv-rails`というGemを使うことにしました。 このGemを使うと、アプリケーションごとに環境変数(非公開情報)が設定できるようになり、 `secrets.yml`に公開したくない情報を設定しなくても良くなります。 # Gemfile gem &#39;dotenv-rails&#39;  まず、アプリケーションのディレクトリの直下に.envというファイルを作成し、環境変数を設定します。
# .env TWITTER_API_KEY=&#34;hogehoge&#34; TWITTER_API_SECRET=&#34;fugafuga&#34;  読み出す時は、以下のように指定します。 puts ENV[&amp;lsquo;TWITTER_API_KEY&amp;rsquo;] # =&amp;gt; &amp;ldquo;hogehoge&amp;rdquo; 
最後に.envファイルを.gitignoreします。
以上で完了です。
herokuに環境変数を設定する ちなみに、herokuに環境変数を設定するには以下のように指定します。
$ heroku config:add TWITTER_API_KEY=&amp;ldquo;hogehoge&amp;rdquo; &amp;ndash;app アプリ名 $ heroku config:add TWITTER_API_SECRET=&amp;ldquo;fugafuga&amp;rdquo; &amp;ndash;app アプリ名  参考サイト  Rails4.1のsecrets.ymlはfigaroと違うの？ Rails セキュリティガイド 10 利用環境のセキュリティ  Rails4.</description>
    </item>
    
    <item>
      <title>jquery-readyselectorとbower-railsを使って、ページ単位でJsを管理する</title>
      <link>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</link>
      <pubDate>Tue, 28 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</guid>
      <description>ページごとに読み込むJsを制限したいなあと思って、ググってみたところいろいろ出てくる。 ただ、今回はできるかぎりシンプルにやりたかったのでjquery-readyselectorというJqueryプラグインを使うことにした。
このプラグインはBowerで管理されている(Node)モジュールみたいなので、まずはbower-railsをインストールして、 bower-rails経由でjquery-readyselectorをインストールすることにした。
bower-railsを使うには、事前にBowerをインストールしておく必要がある
bower-railsのインストール まずはGemfileの設定し、インストール。
$ cat Gemfile gem &amp;quot;bower-rails&amp;quot; $ bundle install  
次に、Nodeモジュールを管理するための設定ファイル(Gemfileみたいなもの)の形式を決める。 形式はjson形式のbower.jsonの場合か、
$ rails g bower_rails:initialize json create bower.json create config/initializers/bower_rails.rb  DSL形式のBowerfileのどちらか選べる。今回はこちらの方法を選択。
$ rails g bower_rails:initialize create Bowerfile create config/initializers/bower_rails.rb   bower-railsの設定はconfig/initializers/bower_rails.rbで行う。 今回は特に設定なし(デフォルトのまま)。
BowerRails.configure do |bower_rails| # Tell bower-rails what path should be considered as root. Defaults to Dir.pwd # bower_rails.root_path = Dir.pwd # Invokes rake bower:install before precompilation. Defaults to false # bower_rails.</description>
    </item>
    
    <item>
      <title>rails_configで定数を管理する</title>
      <link>http://tatsuyano.github.io/2015/04/08/manage-constant-in-rails_config/</link>
      <pubDate>Wed, 08 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/08/manage-constant-in-rails_config/</guid>
      <description>環境ごとに定数を管理したい時は、rails-config を使うのが便利。
インストール Gemfileに下記を追加しbundle install
# Gemfile gem &#39;rails_config&#39;  bundle install後、rails_config の初期設定を実行
$ rails g rails_config:install create config/initializers/rails_config.rb create config/settings.yml create config/settings.local.yml create config/settings create config/settings/development.yml create config/settings/production.yml create config/settings/test.yml append .gitignore  ## 環境ごとに読み込まれるファイル  環境(env) ファイル名   共通 config/settings.yml   (ローカルの)開発環境 config/settings.local.yml   開発環境 config/settings/development.yml   テスト環境 config/settings/test.yml   本番環境 config/settings/production.yml   開発環境で同じ定数を読み込む場合、優先度は下記の順番でなります。 1. `config/settings.local.yml` 2. `config/settings/development.yml` 3. `config/settings.yml` ちなみにこの`config/settings.local.yml`は、gitignore の対象ファイルです。 ※ `rails g rails_config:install`実行時に追加されます。 config/settings.</description>
    </item>
    
    <item>
      <title>Railsでページごとのscssを管理する方法</title>
      <link>http://tatsuyano.github.io/2015/04/02/how-to-manage-the-page-specific-scss-in-rails/</link>
      <pubDate>Thu, 02 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/02/how-to-manage-the-page-specific-scss-in-rails/</guid>
      <description>GitHubにあるREADME.mdを参考に、bootstrap-sassをインストールしてみました。
application.scssの設定 するとapplication.scssにimportするファイルは、bootstrapとbootstrap-sprocketsの2ファイルのみとなっています。
// &#39;bootstrap-sprockets&#39; must be imported before &#34;bootstrap&#34; and &#34;bootstrap/variables&#34; @import &#34;bootstrap-sprockets&#34;; @import &#34;bootstrap&#34;;&#34;  そのため、このままですと、ページごとに用意したscssファイルを読み込むためには、 毎回application.scssにimportする必要がでてきてしまいます。
デフォルトのapplication.css 通常、設定なしで rails new を行うと、application.css には、
$ cat app/assets/stylesheets/application.css /* *= require_tree . # 指定されたディレクトリ以下のすべてを再帰的にインクルード(順番の保証なし) *= require_self # require_self呼び出しが行われたその場所にCSSファイルがあれば読み込みます */  というディレクティブが設定され、stylesheetsディレクトリ以下にcssを置くと、 自動で読み込まれる(順番は保証されない)ようになります。
RailsでSassファイルをどう管理するべきか いろいろ方法は有ると思うのですが、今回はこちらの記事を参考に ディレクトリ構成を作ってみました。
まず、読み込み順を守る必要のあるファイル(bootstrapとbootstrap-sprockets)は、そのままapplication.scssに。
ページ個々のscssに関しては、app/assets/stylesheets/partialsディレクトリを生成し、そちらに配置しておきます。
partialsディレクトリでは、読み込み順が保証されないので、注意してください。 # app/assets/stylesheets/application.scss @import &amp;ldquo;bootstrap-sprockets&amp;rdquo;; @import &amp;ldquo;bootstrap&amp;rdquo;; @import &amp;ldquo;partials/*&amp;ldquo;; // glob importing 
※ sass-railsのバージョンが古いと、glob importing には対応していないので、動かない場合はバージョンを上げてみて下さい。
partialsディレクトリにファイルがないとエラーになる ただこのままの状態だと、partialsディレクトリにファイルがないので、File to import not found or unreadableエラーが出てしまいます。 それを防ぐために、とりあえずブランクのscssファイルをディレクトリに配置するようにしました。</description>
    </item>
    
    <item>
      <title>アプリケーションテンプレートを使って、プロジェクトのひな形を作る</title>
      <link>http://tatsuyano.github.io/2015/03/31/use-rails-application-templates/</link>
      <pubDate>Tue, 31 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/31/use-rails-application-templates/</guid>
      <description>Railsアプリを作っていると、ある程度決まったRuby Gemを使うようになってきたり、 同じ設定(config周りとか)を繰り返すようになってきます。
そこでRailsのアプリケーションテンプレート機能を使うと、 そういった決まった作業をコード化することができるようになります。
今回は、主にデータベースをPostgreSQL、テストFWをRSpec、CSSFWにTwitterBootStrapの初期設定を行い、最後にgit commit -m &#39;Initial commit&#39;するまでのアプリケーションテンプレートを作ってみたいと思います。
作業の流れ  templateファイルを作成 templateファイルをGitHubなどにpush templateファイルを使って、Railsアプリを作ってみる  template.rb コードを実際見てもらえばわかるように、templateファイルといっても特別なものではなく、 Gemfileと同じように、必要なGemを指定し、実際の作業を明文化したファイルになります。
※ 最新のソースはこちら
# -*- coding: utf-8 -*- @app_name = app_name gem &#39;rails&#39;, &#39;4.2.0&#39; gem &#39;pg&#39; gem &#39;sass-rails&#39;, &#39;~ 5.0&#39; gem &#39;uglifier&#39;, &#39;= 1.3.0&#39; gem &#39;coffee-rails&#39;, &#39;~ 4.1.0&#39; gem &#39;jquery-rails&#39; gem &#39;turbolinks&#39; gem &#39;jbuilder&#39;, &#39;~ 2.0&#39; gem &#39;annotate&#39; # modelクラスにスキーマ情報の注釈をつける gem &#39;bootstrap-sass&#39; # bootstrap gem_group :development, :test do gem &#39;spring&#39; gem &#39;pry-rails&#39; gem &#39;pry-byebug&#39; gem &#39;better_errors&#39; gem &#39;binding_of_caller&#39; gem &#39;rspec-rails&#39; gem &#39;guard-rspec&#39; # railsでguardを使うためのGem gem &#39;spring-commands-rspec&#39; , &#39;~ 1.</description>
    </item>
    
    <item>
      <title>Rails4でBootstrap3を導入(sass版)</title>
      <link>http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/</link>
      <pubDate>Tue, 31 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/</guid>
      <description> 以前、twitter-bootstrap-rails をつかってBootstrap3を導入という記事を書いたんですが、 Twitter社が提供しているbootstrap-sassのほうが導入が簡単だったので、今後はこちらを使っていきたいと思います。
設定 まずはGemfileの設定から。
cat Gemfile gem &amp;lsquo;bootstrap-sass&amp;rsquo;, &amp;lsquo;~&amp;gt; 3.3.4&amp;rsquo; gem &amp;lsquo;sass-rails&amp;rsquo;, &amp;lsquo;&amp;gt;= 3.2&amp;rsquo;
$ bundle install  application.css を削除し、新たに application.sass を生成します。
$ rm app/assets/stylesheets/application.css $ cat &amp;gt; app/assets/stylesheets/application.scss @import &amp;ldquo;bootstrap-sprockets&amp;rdquo;; @import &amp;ldquo;bootstrap&amp;rdquo;;  application.js の設定を変更します。読み込み順に注意してください。
$ cat &amp;gt; app/assets/javascripts/application.js //= require jquery //= require bootstrap-sprockets  これでGlyphicons(Webフォント)も使えるようになります。便利ですね。
参考サイト  twbs/bootstrap-sass 全部はいらないよね？bootstrap-sassをカスタマイズして使う方法  関連する記事  Rails4でBootstrap3を導入  </description>
    </item>
    
    <item>
      <title>ActiveRecordのモデルに注釈を付ける</title>
      <link>http://tatsuyano.github.io/2015/03/30/i-annotate-model-of-activerecord/</link>
      <pubDate>Mon, 30 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/30/i-annotate-model-of-activerecord/</guid>
      <description>annotate を使うと、rake db:migrate をしたタイミングで、自動でmodelクラスの先頭に、スキーマ情報のコメントを挿入してくれるようになります。
設定 まずはインストール。Gemfileに追加後 bundle install します。
cat Gemfile gem &#39;annotate&#39; $ bundle install  `rake db:migrate`をしたタイミングで自動で、スキーマ情報を挿入するためには、 `annotate:install` します。 $ rails g annotate:install create lib/tasks/auto_annotate_models.rake  自動で挿入したくない場合は、annotate:installはせずに、modelクラスを更新した都度、bundle exec annotateを行って下さい。 $ bundle exec annotate  確認 試しにbooksモデルを作成し、コメントが挿入されるか確認してみます。
$ rails g scaffold Book title:string price:integer $ rake db:migrate == 20150330032832 CreateBooks: migrating ====================================== &amp;ndash; create_table(:books) -&amp;gt; 0.0090s == 20150330032832 CreateBooks: migrated (0.0094s) =============================
Annotated (1): Book  modelクラスにスキーマ情報が挿入されていることを確認できます。
$ cat app/models/book.</description>
    </item>
    
    <item>
      <title>Rubyの標準ライブラリの構成について</title>
      <link>http://tatsuyano.github.io/2015/03/27/standard-library-of-ruby/</link>
      <pubDate>Fri, 27 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/27/standard-library-of-ruby/</guid>
      <description>$LOAD_PATHについて調べていた時に、Rubyの標準ライブラリの ディレクトリ構成の意味をわかっていない事にきづいたので、調べてみました。
$ ruby -e &amp;lsquo;puts $:&amp;rsquo; $HOME/.anyenv/envs/rbenv/rbenv.d/exec/gem-rehash $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0/x86_64-linux $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0/x86_64-linux $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0/x86_64-linux  大きくは4つの階層に分かれていて、以下のような構成になっています。
$ cd $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby
$ tree -d -L 1 . ├── 2.2.0 # 標準ライブラリ ├── gems # gemファイルの置き場 ├── site_ruby # ユーザのライブラリ置き場 └── vendor_ruby # ベンダー用のライブラリ  また、gemsディレクトリ意外のディレクトリには、それぞれ環境依存のソースを置くディレクトリがあります。 ※ 自分の環境はCentOSなので、x86_64-linuxという名前のディレクトリになっています。
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0/x86_64-linux # soファイルなど、環境に依存したソース
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0/x86_64-linux # 環境依存
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0/x86_64-linux # 環境依存  参考サイト * Rubyのライブラリの標準ディレクトリ構成を考えて、自作ライブラリを何処に置くべきか思案する</description>
    </item>
    
    <item>
      <title>ファイルを読み込む時は require_relative を使う</title>
      <link>http://tatsuyano.github.io/2015/03/27/use-require_relative-when-you-read-file/</link>
      <pubDate>Fri, 27 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/27/use-require_relative-when-you-read-file/</guid>
      <description> こちら[requireとrequire_relativeの違いとは？] に詳しく書いてあるのですが、
ファイルを読み込む時はrequireではなく、require_relativeを使いましょう(Ruby1.9.2以降で、かつ$LOAD_PATHに含まれていない場合)。
Ruby1.9.2以降、$LOAD_PATHにカレントディレクトリが含まれなくなったため、 例えば、同じ階層のfile.rbを読み込もうと思ってrequire &#39;file&#39;と書いたらエラーになります。
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;: cannot load such file -- file (LoadError)  その回避方法として、require ./file　と相対パスで書くことも可能ですが、 違う階層から読み込むと結局エラーになってしまいます。
どうしてもrequireと使いたい場合は、require する前に、 カレントディレクトリを$LOAD_PATHに追加する方法があります。
$:.unshift File.dirname(__FILE__) # ロードパスにカレントディレクトリを追加 require &#39;file&#39;  因みに$:は$LOAD_PATHの別の書き方です。
 $LOAD_PATH &amp;hellip; プログラム実行時に読み込まれるパス $: &amp;hellip; $LOAD_PATHの別の書き方  参考サイト  requireとrequire_relativeの違いとは？ Rubyのrequireとrequire_relative  </description>
    </item>
    
    <item>
      <title>if $0 == __FILE__のコードの意味</title>
      <link>http://tatsuyano.github.io/2015/03/26/meaning-of-the-code-dollar0-equal-__file__/</link>
      <pubDate>Thu, 26 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/26/meaning-of-the-code-dollar0-equal-__file__/</guid>
      <description>最近こちらの記事を読んでいて、 以下のコードの意味が解らなかったので調べてみました。
if $0 == __FILE__ # 何らかの処理 end  まず結論から言うと「requireされた時は実行したくないけど、スクリプトファイルを直接実行した時は処理したい」 場合に使います。ややこしいですね。 主には簡易なテストコードやサンプルコードを書く場合に使われるようです。 ただ、なぜ上記のコードがそのような動きになるのか解らなかったのでもう少し調べてみました。 * `__FILE__` ... 実行中のファイル名(相対パス)を返します。フルパスが必要な場合は File.expand_path(\_\_FILE\_\_) とする必要があります。 * `$0` ... 直接実行したファイル名(相対パス)を返します。 [こちらのコード](http://qiita.com/naoty_k/items/f84b2a9034a3bb3bfcb2)とほぼ同じですが、 # target_file.rb puts &#34;__FILE__ = #{__FILE__}&#34; puts &#34;$0 = #{$0}&#34; if $0 == __FILE__ puts &#34;Sample codeを実行&#34; else puts &#34;Sample codeは実行されない&#34; end  target_file.rb自体を直接実行すると、 $0と__FILE__に同じ値が入ることになるので、Sample codeが実行されます。
$ ruby target_file.rb __FILE__ = filename.rb $0 = filename.rb Sample codeを実行  しかし、target_file.rbをライブラリとして使う(requireする)場合などは、`$0` と `__FILE__` の値が異なるので、Sample codeは実行されません。 # require_file.</description>
    </item>
    
    <item>
      <title>emacsにrcodetoolsをインストールして、返り値をコメントに出力する</title>
      <link>http://tatsuyano.github.io/2015/03/25/install-rcodetools-to-emacs/</link>
      <pubDate>Wed, 25 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/25/install-rcodetools-to-emacs/</guid>
      <description> 返り値をコメントに出力したい場合、rcodetoolsのxmpfilterを使うことで可能になります。
3 + 4 ↓ 3 + 4 # =&amp;gt; 7  インストール まずはrcodetools本体をインストールします。
$ gem install rcodetools  次にインストールしたgemの中にあるrcodetools.elをemacsのload-pathが通っている階層にコピーします。
$ cp -a $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/rcodetools-0.8.5.0/rcodetools.el $HOME/src/github.com/tatsuyano/dot.emacs.d/init_loader/  emacsの設定 今回は、M-pにxmpfilterを割り当てます。
(require &amp;lsquo;rcodetools) (define-key ruby-mode-map (kbd &amp;ldquo;M-p&amp;rdquo;) &amp;lsquo;xmp)  操作方法  まずは返り値を出力したい行で、M-;(comment-dwim)を2回実行すると「# =&amp;gt;」というコメントがソースに出力されます。 その状態で、M-p(xmp)を実行すると、コメントに返り値が出力されます。  ちなみにM-;はAltを押しながら;を押下です。
3 + 4 ↓ 3 + 4 # =&amp;gt; 1. comment-dwimを2回実行 ↓ 3 + 4 # =&amp;gt; 7 2. xmpfilterを実行  ※ 環境によっては、gems/rcodetools/bin/をPATHに加える必要があるようなので、動かない場合は試してみてください。
参考サイト  EmacsでRubyの開発環境をさらにめちゃガチャパワーアップしたまとめ Emacs で rcodetools を使って &amp;ldquo;=&amp;gt;&amp;rdquo; で値を表示する  </description>
    </item>
    
    <item>
      <title>WerckerのBuild結果をSlackに通知する</title>
      <link>http://tatsuyano.github.io/2015/03/13/notification-build-results-of-wercker-to-slack/</link>
      <pubDate>Fri, 13 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/13/notification-build-results-of-wercker-to-slack/</guid>
      <description>Werckerに登録したアプリケーションのBuild結果をSlackのwebHookという機能を使うことで、Slackに通知することができるようになります。
SlackにWebHookを追加する  サイドメニューの Configure Integrations を押下してください。  Incoming WebHooksを追加してください。  どのチャンネルに追加するか選択してください。  URLをコピーし、Save Settingsを押下します。   WerckerにSlackのTOKENを設定する 先ほどコピーしたURLの一番後ろについているパラーメータがSLACK_TOKENになります。
https://hooks.slack.com/services/aaaaa/bbbbb/[SLACK-TOKEN]
SLACK_TOKENはProtectedにチェックした状態でSAVEしてください。Protectedをチェックすると、ログ上で値が非表示になります。 wercker.ymlにafter-stepsを追加 Build後(build: after-steps)に、Slackに通知するようwercker.ymlを設定します。subdomainはSlackのURLhttp://hoge.slack.comのhogeの部分にあたります。 box: wercker/ruby services: - wercker/postgresql build: steps: - bundle-install - rails-database-yml: service: postgresql - script: name: echo ruby information code: | echo &amp;ldquo;ruby version $(ruby &amp;ndash;version) running!&amp;rdquo; echo &amp;ldquo;from location $(which ruby)&amp;rdquo; echo -p &amp;ldquo;gem list: $(gem list)&amp;rdquo; - script: name: Set up db code: RAILS_ENV=test bundle exec rake db:schema:load - script: name: Run RSpec code: bundle exec rspec # ここから追加 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; after-steps: - sherzberg/slack-notify: subdomain: hoge token: $SLACK_TOKEN channel: &amp;ldquo;#general&amp;rdquo; username: wercker icon_url: https://avatars3.</description>
    </item>
    
    <item>
      <title>Werckerを使ってHerokuにデプロイする</title>
      <link>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</link>
      <pubDate>Fri, 13 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</guid>
      <description>Bitbucket(プライベートリポジトリ)に用意したアプリケーション(Rails)を WerckerでBuildし、HerokuにDeployした時の備忘録です。
前提  Bitbucketにアプリケーションが用意済み Werckerにアカウントを持っていて、Bitbacketと連携済み Herokuにアカウントを持っていて、Bitbacketと連携済み  BitbacketのリポジトリをWerckerに登録する  プロバイダを選択します。  リポジトリを選択します。  リポジトリへの接続方法を選択します。  wercker.ymlの内容が自動生成されます。wercker.ymlは後で新規に作成するので、ここではコピーせずに次に進みます。  Make my app publicにチェックを入れると、後ほど出てくるbadgeをクリックしたさいに、deploy情報を公開できるようになります(今回はチェックしません)。   これで、WerckerにBitbacketのリポジトリの登録が完了しました。
wercker.ymlを作成し、アプリケーションをBuildする WerckerでアプリケーションをBuild、Deployするための設定は、wercker.ymlに記載します。wercker.ymlは、アプリケーションのRootディレクトリ直下(Gemfileなどが置いてある階層)に置いてください。
wercker.yml box: wercker/ruby services: - wercker/postgresql build: steps: - bundle-install - rails-database-yml: service: postgresql - script: name: echo ruby information code: | echo &amp;ldquo;ruby version $(ruby &amp;ndash;version) running!&amp;rdquo; echo &amp;ldquo;from location $(which ruby)&amp;rdquo; echo -p &amp;ldquo;gem list: $(gem list)&amp;rdquo; - script: name: Set up db code: RAILS_ENV=test bundle exec rake db:schema:load - script: name: Run RSpec code: bundle exec rspec deploy: steps: - heroku-deploy: install-toolbelt: true - script: name: Update database code: heroku run rake db:migrate &amp;ndash;app $APP_NAME - script: name: Update assets code: heroku run rake add_static_assets &amp;ndash;app $APP_NAME  生成したwercker.</description>
    </item>
    
    <item>
      <title>RailsでPostgreSQLを使う</title>
      <link>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</link>
      <pubDate>Mon, 09 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</guid>
      <description>アプリをHerokuにdeployしたらSQLエラーが出てしまったので、 ローカルでの開発もPostgreSQLを使ってみようと思います。
PostgreSQLのインストール ちなみにインストール先のOSはamazon-linuxです。 $ sudo yum -y install postgresql93 $ sudo yum -y install postgresql93-devel $ sudo yum -y install postgresql93-server
$ psql &amp;ndash;version psql (PostgreSQL) 9.3.6
データベースの初期化 $ sudo /etc/init.d/postgresql93 initdb
データベースの起動 $ sudo /etc/init.d/postgresql93 start
サーバー起動時にpostgresの起動設定 $ sudo chkconfig postgresql93 on  PostgreSQLアカウントの設定 まずは PostgreSQL にスーパーユーザ(postgres)で接続し、パスワードを設定します。 $ sudo -u postgres psql postgres=# alter role postgres with password &amp;lsquo;hogehoge&amp;rsquo;; # alter role [user_name] with password &amp;lsquo;[password]&amp;lsquo;;  データベースの作成 わかりやすいようにデータベース名とRailsのアプリ名(myapp)を同じにします。 ついでにテスト(RSpec)用のデータベースも作成しておきます。 postgres=# create database myapp owner postgres; # create database [database_name] owner [user_name]; postgres=# create database myapp_test owner postgres;  アクセス権限の設定 Rails から PostgreSQL に接続するために、pg_hba.</description>
    </item>
    
    <item>
      <title>Rails4をherokuにdeployする</title>
      <link>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</link>
      <pubDate>Thu, 19 Feb 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</guid>
      <description>備忘のため、Rails4をheroku上にdeployする方法をメモしておきます。
herokuのアカウントの作成、及び鍵の設定は終っているものとします。
$ ruby -v 2.2.0p0 $ rails -v 4.2.0  ## サンプルアプリの作成 まずはherokuにdeployするアプリを生成 $ rails new heroku-rails $ cd heroku-rails  herokuではsqlite3はサポートされていないので、productionからは外すようにする。今回productionで使うDBは、heroku標準のpostgressを選択。 また、Rail4から`rails_12factor`が必須になったらしいので設定。 Gemfile group :development do gem &#39;sqlite3&#39; end group :production do gem &#39;pg&#39; gem &#39;rails_12factor&#39; end  開発環境では、postgressを使っていないので、`--without production`をつけて productionでのみ必要なGemは開発環境には入れないようにする。 $ bundle install --without production  開発環境でも`pg`を使う場合は、以下のようにpostgress本体と、develをインストールする。 $ sudo yum install -y postgresql-devel $ sudo yum install -y postgresql $ gem install pg  ここまでで空のアプリができたので、いったん`git commit`。 $ git init $ git add .</description>
    </item>
    
    <item>
      <title>Rails4でのデバッグ方法</title>
      <link>http://tatsuyano.github.io/2015/02/18/how-to-debug-in-rails4/</link>
      <pubDate>Wed, 18 Feb 2015 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/how-to-debug-in-rails4/</guid>
      <description>最近覚えたデバッグ方法を、備忘のためにまとめておきます。
ログに出力する ActiveSupport::Logger#debugメソッドを使って、rails serverの標準出力にデバッグコードを出力する。
logger.debug(&amp;lsquo;Hello world&amp;rsquo;)  SQLを出力する ActiveRecord::Relation#to_sqlメソッドでSQLを出力する。
User.all.to_sql #=&amp;gt; SELECT &amp;ldquo;users&amp;rdquo;.* FROM &amp;ldquo;users&amp;rdquo;  ブレークポイントを設定する コード内にbinding.pryというコードを書くと、そこまで実行中のプログラムが中断され、 以降をコンソール上からデバッグできます。
Gemfile gem &amp;lsquo;pry-rails&amp;rsquo;, group: [:development, :test] gem &amp;lsquo;pry-byebug&amp;rsquo;, group: [:development, :test]  $ bundle install $ rails server  中断したい箇所にbinding.pryを記述。
def index @users = User.all
binding.pry # &amp;lt;- This!
logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 1 &amp;mdash;&amp;mdash;-&amp;rsquo;) logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 2 &amp;mdash;&amp;mdash;-&amp;rsquo;) logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 3 &amp;mdash;&amp;mdash;-&amp;rsquo;) logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 4 &amp;mdash;&amp;mdash;-&amp;rsquo;) end  ブレークポイントの移動はnext,step,exitで行う。
7: def index 8: @users = User.</description>
    </item>
    
    <item>
      <title>Rails4でBootstrap3を導入</title>
      <link>http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/</link>
      <pubDate>Wed, 18 Feb 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/</guid>
      <description>※ Bootstrapをより簡単に導入する(sass版)記事 もあるので、そちらも参照してみてください。
twitter-bootstrap-railsというGemを使って、Rails4にBootstrap3を導入します。
$ rails -v Rails 4.1.1 $ ruby -v ruby 2.1.0p0  サンプルアプリの用意 まずはbootstrap3という名前のサンプルアプリを生成し、次に確認用のページを生成します。
$ rails new bootstrap3 $ cd bootstrap3 $ rails g scaffold Book title:string price:integer $ rake db:migrate $ rails server  Gemfileの設定 Bootstrapのcssがlessで書かれているので、Railsでもlessが扱えるようにし、さらにlessをコンパイルするためのGemもインストールします。
bootstrap3/Gemfile gem &amp;lsquo;therubyracer&amp;rsquo; # javascript runtime。lessをコンパイルするために必要 gem &amp;lsquo;less-rails&amp;rsquo; # Railsでlessを使えるようにする。Bootstrapがlessで書かれているため gem &amp;lsquo;twitter-bootstrap-rails&amp;rsquo; # Bootstrapの本体  Gemを反映します。 $ bundle install  Bootstrapの設定 まずはBootstrapのJsとCssを生成します。
$ rails g bootstrap:install insert app/assets/javascripts/application.js create app/assets/javascripts/bootstrap.</description>
    </item>
    
    <item>
      <title>emacsのruby環境をセットアップする</title>
      <link>http://tatsuyano.github.io/2014/09/01/set-up-ruby-mode-of-emacs/</link>
      <pubDate>Mon, 01 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/01/set-up-ruby-mode-of-emacs/</guid>
      <description>最近caskに切り替えたので、ruby環境も一から作り直したいと思います。 オムニ補完には、今まではRsenseを使っていましたが、今回はrobeというパッケージと使ってみたいと思います。
対象のEmacsのバージョンは24.3.1になります
今回インストールするパッケージ  ruby-mode ruby-end ruby-block inf-ruby robe auto-complete rvenv # 2015/02/23追記 smart-newline　# 2015/02/23追記 rspec-mode # 2015/02/23追記  ruby-mode,ruby-end,ruby-blockをインストール まずは基本的なところから。 Emacs24だとruby-electricがうまく動かなかったので、 今回はインストールしませんでしたが、ruby-endだけで事足りました。
~/.emacs/Cask
;; Ruby (depends-on &amp;quot;ruby-mode&amp;quot;) (depends-on &amp;quot;ruby-end&amp;quot;) (depends-on &amp;quot;ruby-block&amp;quot;)  ~/.emacs.d/init_loader/03_ruby.el
;; -------------------------------------------------- ;; ruby-mode ;; http://shibayu36.hatenablog.com/entry/2013/03/18/192651 ;; -------------------------------------------------- (autoload &#39;ruby-mode &amp;quot;ruby-mode&amp;quot; &amp;quot;Mode for editing ruby source files&amp;quot; t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.rb$&amp;quot; . ruby-mode)) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Capfile$&amp;quot; . ruby-mode)) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Gemfile$&amp;quot; . ruby-mode)) (add-to-list &#39;interpreter-mode-alist &#39;(&amp;quot;ruby&amp;quot; .</description>
    </item>
    
    <item>
      <title>anyenvをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/19/install-anyenv/</link>
      <pubDate>Tue, 19 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/19/install-anyenv/</guid>
      <description>以前導入したanyenvのインストール方法を忘れないようメモしておきます。
anyenvは ruby、perl、python、nodejs、php(phpenv) のバージョン管理を一元化してくれるツールです。これでhome直下がずいぶんスッキリ。素敵です。
インストール ダウンロード
$ git clone https://github.com/riywo/anyenv ~/.anyenv  $HOME/.zshrc
$ echo &#39;export PATH=&amp;quot;$HOME/.anyenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc $ echo &#39;eval &amp;quot;$(anyenv init - zsh)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc  私はoh-my-zshを使っているので、実際は~/.zshrcではなく、~/.oh-my-zsh/custom/main.zshに設定しています。
シェルを再実行し、anyenvの設定を反映させます。
source $HOME/.zshrc でも結構です。
$ exec $SHELL -l $ which anyenv ~/.anyenv/bin/anyenv   anyenvで開発環境を整える completions/plenv.bash:16: command not found: completeの対処法  rubyのインストール とりあえずanyenv経由でrubyをインストールします。 rubyをインストールするには、事前にOpenSSL系のライブラリが必要なのでインストールしておきます。
また別記事で紹介しているrobeを使うには、read-lineが必要なので、入れておきます。
$ sudo yum -y install openssl-devel $ sudo yum -y install readline-devel   CentOSに rbenv 経路で Ruby 2.</description>
    </item>
    
    <item>
      <title>emacsでのRuby環境(Rsenseでオムニ補完)</title>
      <link>http://tatsuyano.github.io/2013/03/26/emacs-rsense/</link>
      <pubDate>Tue, 26 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/26/emacs-rsense/</guid>
      <description>今更ですが、最近yugaiさんの「初めてのRuby」を読み始めています。すごく読みやすくて楽しいです。
そこでemacsのRuby環境もちゃんと用意することにしました。
Rsenseとは Rsenseは、rubyコードのオムニ補完(文脈を解析して行う補完)をしてくれるツールです。
emacsでのrubyのコード補完は、他にもauto-complete(単体)、auto-complete-ruby、rcodetools などあります。
※ Rsense は Java Runtime Environment (JRE) 1.5以上が必要です。JREはOSXに標準でインストールされています。
Rsense のインストール 本家サイトから最新版をwgetします。
※ emacs には el-get.le を事前にインストールしておいてください。
wget http://cx4a.org/pub/rsense/rsense-0.3.tar.bz2 tar xvzf rsense-0.3.tar.bz2 mkdir .emacs.d/opt mv rsense-0.3 .emacs.d/opt/  .rsenseの作成 次に Rsense に Rubyの環境変数を指定するための ~/.rsense を作成します。
cd $HOME/.emacs.d/opt/rsense-0.3/ chmod +x ./bin/rsense bin/rsense version &amp;gt;&amp;gt; RSense 0.3 # &amp;lt;- 今回インストールしたRsenseのバージョン # $HOME 直下に ~/.rsenseファイルを作成、環境変数が設定されている ruby ./etc/config.rb &amp;gt; ~/.rsense  Java Runtime が正しく動くか確認 生成した ~/.rsense の環境変数が正しく設定されていないと Java Runtime が動きません。</description>
    </item>
    
  </channel>
</rss>