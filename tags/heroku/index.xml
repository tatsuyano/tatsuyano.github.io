<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heroku on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/heroku/</link>
    <description>Recent content in Heroku on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 13 May 2015 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/heroku/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rails4の非公開情報をdotenvで管理する</title>
      <link>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</link>
      <pubDate>Wed, 13 May 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</guid>
      <description>TwitterのAPIキーなど、公開したくない情報をどこに設定すればいいか調べたところ、 config/secrets.ymlに設定して、.gitignoreして使うようなので、設定してみました。
# config/secrets.yml development: twitter_api_key: hogefuga..... # 呼び出し側 key = Rails.application.secrets.twitter_api_key  しかしherokuを利用する場合、この`secrets.yml`というファイル自体必須なので、`.gitignore`するわけにはいきません。 * [How to solve error &#34;Missing secret_key_base for production environment&#34; on Heroku](http://stackoverflow.com/questions/23180650/how-to-solve-error-missing-secret-key-base-for-production-environment-on-h) ## dotenv-railsの設定 そこで検討した結果、`dotenv-rails`というGemを使うことにしました。 このGemを使うと、アプリケーションごとに環境変数(非公開情報)が設定できるようになり、 `secrets.yml`に公開したくない情報を設定しなくても良くなります。 # Gemfile gem &#39;dotenv-rails&#39;  まず、アプリケーションのディレクトリの直下に.envというファイルを作成し、環境変数を設定します。
# .env TWITTER_API_KEY=&#34;hogehoge&#34; TWITTER_API_SECRET=&#34;fugafuga&#34;  読み出す時は、以下のように指定します。 puts ENV[&amp;lsquo;TWITTER_API_KEY&amp;rsquo;] # =&amp;gt; &amp;ldquo;hogehoge&amp;rdquo; 
最後に.envファイルを.gitignoreします。
以上で完了です。
herokuに環境変数を設定する ちなみに、herokuに環境変数を設定するには以下のように指定します。
$ heroku config:add TWITTER_API_KEY=&amp;ldquo;hogehoge&amp;rdquo; &amp;ndash;app アプリ名 $ heroku config:add TWITTER_API_SECRET=&amp;ldquo;fugafuga&amp;rdquo; &amp;ndash;app アプリ名  参考サイト  Rails4.1のsecrets.ymlはfigaroと違うの？ Rails セキュリティガイド 10 利用環境のセキュリティ  Rails4.</description>
    </item>
    
    <item>
      <title>Werckerを使ってHerokuにデプロイする</title>
      <link>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</link>
      <pubDate>Fri, 13 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</guid>
      <description>Bitbucket(プライベートリポジトリ)に用意したアプリケーション(Rails)を WerckerでBuildし、HerokuにDeployした時の備忘録です。
前提  Bitbucketにアプリケーションが用意済み Werckerにアカウントを持っていて、Bitbacketと連携済み Herokuにアカウントを持っていて、Bitbacketと連携済み  BitbacketのリポジトリをWerckerに登録する  プロバイダを選択します。  リポジトリを選択します。  リポジトリへの接続方法を選択します。  wercker.ymlの内容が自動生成されます。wercker.ymlは後で新規に作成するので、ここではコピーせずに次に進みます。  Make my app publicにチェックを入れると、後ほど出てくるbadgeをクリックしたさいに、deploy情報を公開できるようになります(今回はチェックしません)。   これで、WerckerにBitbacketのリポジトリの登録が完了しました。
wercker.ymlを作成し、アプリケーションをBuildする WerckerでアプリケーションをBuild、Deployするための設定は、wercker.ymlに記載します。wercker.ymlは、アプリケーションのRootディレクトリ直下(Gemfileなどが置いてある階層)に置いてください。
wercker.yml box: wercker/ruby services: - wercker/postgresql build: steps: - bundle-install - rails-database-yml: service: postgresql - script: name: echo ruby information code: | echo &amp;ldquo;ruby version $(ruby &amp;ndash;version) running!&amp;rdquo; echo &amp;ldquo;from location $(which ruby)&amp;rdquo; echo -p &amp;ldquo;gem list: $(gem list)&amp;rdquo; - script: name: Set up db code: RAILS_ENV=test bundle exec rake db:schema:load - script: name: Run RSpec code: bundle exec rspec deploy: steps: - heroku-deploy: install-toolbelt: true - script: name: Update database code: heroku run rake db:migrate &amp;ndash;app $APP_NAME - script: name: Update assets code: heroku run rake add_static_assets &amp;ndash;app $APP_NAME  生成したwercker.</description>
    </item>
    
    <item>
      <title>RailsでPostgreSQLを使う</title>
      <link>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</link>
      <pubDate>Mon, 09 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</guid>
      <description>アプリをHerokuにdeployしたらSQLエラーが出てしまったので、 ローカルでの開発もPostgreSQLを使ってみようと思います。
PostgreSQLのインストール ちなみにインストール先のOSはamazon-linuxです。 $ sudo yum -y install postgresql93 $ sudo yum -y install postgresql93-devel $ sudo yum -y install postgresql93-server
$ psql &amp;ndash;version psql (PostgreSQL) 9.3.6
データベースの初期化 $ sudo /etc/init.d/postgresql93 initdb
データベースの起動 $ sudo /etc/init.d/postgresql93 start
サーバー起動時にpostgresの起動設定 $ sudo chkconfig postgresql93 on  PostgreSQLアカウントの設定 まずは PostgreSQL にスーパーユーザ(postgres)で接続し、パスワードを設定します。 $ sudo -u postgres psql postgres=# alter role postgres with password &amp;lsquo;hogehoge&amp;rsquo;; # alter role [user_name] with password &amp;lsquo;[password]&amp;lsquo;;  データベースの作成 わかりやすいようにデータベース名とRailsのアプリ名(myapp)を同じにします。 ついでにテスト(RSpec)用のデータベースも作成しておきます。 postgres=# create database myapp owner postgres; # create database [database_name] owner [user_name]; postgres=# create database myapp_test owner postgres;  アクセス権限の設定 Rails から PostgreSQL に接続するために、pg_hba.</description>
    </item>
    
    <item>
      <title>Rails4をherokuにdeployする</title>
      <link>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</link>
      <pubDate>Thu, 19 Feb 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</guid>
      <description>備忘のため、Rails4をheroku上にdeployする方法をメモしておきます。
herokuのアカウントの作成、及び鍵の設定は終っているものとします。
$ ruby -v 2.2.0p0 $ rails -v 4.2.0  ## サンプルアプリの作成 まずはherokuにdeployするアプリを生成 $ rails new heroku-rails $ cd heroku-rails  herokuではsqlite3はサポートされていないので、productionからは外すようにする。今回productionで使うDBは、heroku標準のpostgressを選択。 また、Rail4から`rails_12factor`が必須になったらしいので設定。 Gemfile group :development do gem &#39;sqlite3&#39; end group :production do gem &#39;pg&#39; gem &#39;rails_12factor&#39; end  開発環境では、postgressを使っていないので、`--without production`をつけて productionでのみ必要なGemは開発環境には入れないようにする。 $ bundle install --without production  開発環境でも`pg`を使う場合は、以下のようにpostgress本体と、develをインストールする。 $ sudo yum install -y postgresql-devel $ sudo yum install -y postgresql $ gem install pg  ここまでで空のアプリができたので、いったん`git commit`。 $ git init $ git add .</description>
    </item>
    
    <item>
      <title>herokuでfuelphpをデプロイ</title>
      <link>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</link>
      <pubDate>Tue, 07 Oct 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</guid>
      <description>まずはherokuの準備をしてください。
 herokuことはじめ  herokuにデプロイするアプリを、github上に用意してください。
 fuelphpアプリのgit管理  herokuにアプリを登録 今回は sample-of-chat という名前のアプリを登録します。 アプリ名はわかりやすいように、リポジトリと同じ名前がいいと思います。 また、アプリ名がURLになるので、注意してください。
http://sample-of-chat.herokuapp.com
$ cd sample-of-chat $ heroku create sample-of-chat git remote -v heroku git@heroku.com:sample-of-chat.git (fetch) heroku git@heroku.com:sample-of-chat.git (push)  webサーバーとDocumentRootを指定するファイルProcfileを作成します。 webサーバーはapacheかnginxから選択します。
$ cd sample-of-chat $ cat  Procfile web: vendor/bin/heroku-php-apache2 public/   Setting the document root  次に、.gitignoreからcomposer.lockをコメントアウトし、
composer.jsonに設定(bin-dir)を追加します。
&#34;config&#34;: { &#34;bin-dir&#34;: &#34;vendor/bin&#34;, &#34;vendor-dir&#34;: &#34;fuel/vendor&#34; },  herokuにデプロイ herokuにpushすることで、デプロイが行われます。
git push heroku master  これでデプロイ完了です。デプロイが完了すると、</description>
    </item>
    
    <item>
      <title>herokuことはじめ</title>
      <link>http://tatsuyano.github.io/2014/10/07/start-heroku/</link>
      <pubDate>Tue, 07 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/07/start-heroku/</guid>
      <description>まずはherokuアカウントを作成します。
2段階認証にも対応しているので、設定したほうがいいと思います。
heroku-toolbeltのインストール CentOS(AmazonLinux)に、herokuコマンドをインストールします。
$ wget -qO- https://toolbelt.heroku.com/install.sh | sh  $HOME/.zshrc
if [ -d /usr/local/heroku ]; then export PATH=/usr/local/heroku/bin:$PATH fi  $ source $HOME/.zshrc $ which heroku /usr/local/heroku/bin/heroku   Vagrant 上の CentOS 6.5 から Heroku を使うには  herokuに公開鍵を登録 秘密鍵を作成
$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Home/hoge/.ssh/id_rsa): /Home/hoge/.ssh/heroku_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Home/hoge/.</description>
    </item>
    
  </channel>
</rss>