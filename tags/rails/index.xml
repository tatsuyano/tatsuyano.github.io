<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/rails/</link>
    <description>Recent content in Rails on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 13 May 2015 01:00:00 +0900</lastBuildDate>
    <atom:link href="http://tatsuyano.github.io/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rails4の非公開情報をdotenvで管理する</title>
      <link>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</link>
      <pubDate>Wed, 13 May 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</guid>
      <description>

&lt;p&gt;TwitterのAPIキーなど、公開したくない情報をどこに設定すればいいか調べたところ、
&lt;code&gt;config/secrets.yml&lt;/code&gt;に設定して、&lt;code&gt;.gitignore&lt;/code&gt;して使うようなので、設定してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;# config/secrets.yml
development:
  twitter_api_key: hogefuga.....

# 呼び出し側
key = Rails.application.secrets.twitter_api_key
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

しかしherokuを利用する場合、この`secrets.yml`というファイル自体必須なので、`.gitignore`するわけにはいきません。

* [How to solve error &#34;Missing secret_key_base   for production environment&#34; on
Heroku](http://stackoverflow.com/questions/23180650/how-to-solve-error-missing-secret-key-base-for-production-environment-on-h)

## dotenv-railsの設定

そこで検討した結果、`dotenv-rails`というGemを使うことにしました。
このGemを使うと、アプリケーションごとに環境変数(非公開情報)が設定できるようになり、
`secrets.yml`に公開したくない情報を設定しなくても良くなります。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;# Gemfile
gem &#39;dotenv-rails&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まず、アプリケーションのディレクトリの直下に&lt;code&gt;.env&lt;/code&gt;というファイルを作成し、環境変数を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;# .env
TWITTER_API_KEY=&#34;hogehoge&#34;
TWITTER_API_SECRET=&#34;fugafuga&#34;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;読み出す時は、以下のように指定します。
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;puts ENV[&amp;lsquo;TWITTER_API_KEY&amp;rsquo;] # =&amp;gt; &amp;ldquo;hogehoge&amp;rdquo;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;最後に&lt;code&gt;.env&lt;/code&gt;ファイルを&lt;code&gt;.gitignore&lt;/code&gt;します。&lt;br /&gt;
以上で完了です。&lt;/p&gt;

&lt;h2 id=&#34;herokuに環境変数を設定する:51a96cd6c0e962b72bbcd741a4bc7fd0&#34;&gt;herokuに環境変数を設定する&lt;/h2&gt;

&lt;p&gt;ちなみに、herokuに環境変数を設定するには以下のように指定します。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ heroku config:add TWITTER_API_KEY=&amp;ldquo;hogehoge&amp;rdquo;    &amp;ndash;app アプリ名
$ heroku config:add TWITTER_API_SECRET=&amp;ldquo;fugafuga&amp;rdquo; &amp;ndash;app アプリ名
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:51a96cd6c0e962b72bbcd741a4bc7fd0&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xoyip.hatenablog.com/entry/2014/04/09/214405&#34;&gt;Rails4.1のsecrets.ymlはfigaroと違うの？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://railsguides.jp/security.html#%E5%88%A9%E7%94%A8%E7%92%B0%E5%A2%83%E3%81%AE%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3&#34;&gt;Rails セキュリティガイド 10 利用環境のセキュリティ
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1/&#34;&gt;Rails4.1でherokuへのデプロイに失敗(Missing &amp;lsquo;secret_key_base&amp;rsquo;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://t4traw.github.io/20141215/study-rails-secrets-yml.html&#34;&gt;RailsチュートリアルをRails(4.1)で勉強する：secret_key_baseからsecrets.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/closer/items/f8d8ba00ae86d7051764&#34;&gt;環境によって変わる設定値はdotenvを使うと便利&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>jquery-readyselectorとbower-railsを使って、ページ単位でJsを管理する</title>
      <link>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</link>
      <pubDate>Tue, 28 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</guid>
      <description>

&lt;p&gt;ページごとに読み込むJsを制限したいなあと思って、ググってみたところいろいろ出てくる。
ただ、今回はできるかぎりシンプルにやりたかったので&lt;code&gt;jquery-readyselector&lt;/code&gt;というJqueryプラグインを使うことにした。&lt;/p&gt;

&lt;p&gt;このプラグインはBowerで管理されている(Node)モジュールみたいなので、まずは&lt;code&gt;bower-rails&lt;/code&gt;をインストールして、
&lt;code&gt;bower-rails&lt;/code&gt;経由で&lt;code&gt;jquery-readyselector&lt;/code&gt;をインストールすることにした。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;bower-railsを使うには、事前にBowerをインストールしておく必要がある&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;bower-railsのインストール:81d2c341e61d33f963f82806634eede6&#34;&gt;bower-railsのインストール&lt;/h2&gt;

&lt;p&gt;まずはGemfileの設定し、インストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat Gemfile
gem &#34;bower-rails&#34;

$ bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

次に、Nodeモジュールを管理するための設定ファイル(Gemfileみたいなもの)の形式を決める。

形式はjson形式の`bower.json`の場合か

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g bower_rails:initialize json
      create  bower.json
      create  config/initializers/bower_rails.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DSL形式の&lt;code&gt;Bowerfile&lt;/code&gt;のどちらか選べる。今回はこちらの方法を選択。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$  rails g bower_rails:initialize
      create  Bowerfile
      create  config/initializers/bower_rails.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

`bower-rails`の設定は`config/initializers/bower_rails.rb`で行う。
今回は特に設定なし(デフォルトのまま)。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BowerRails.configure do |bower_rails|
   # Tell bower-rails what path should be considered as root. Defaults to Dir.pwd
   # bower_rails.root_path = Dir.pwd

   # Invokes rake bower:install before precompilation. Defaults to false
   # bower_rails.install_before_precompile = true

   # Invokes rake bower:resolve before precompilation. Defaults to false
   # bower_rails.resolve_before_precompile = true

   # Invokes rake bower:clean before precompilation. Defaults to false
   # bower_rails.clean_before_precompile = true

   # Invokes rake bower:install:deployment instead rake bower:install. Defaults to false
   # bower_rails.use_bower_install_deployment = true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
## jquery-readyselectorのインストール

まずはインストールするNodeモジュールを設定し、インストールの実行。

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ cat Bowerfile
asset &#39;jquery-readyselector&#39;

$ bundle exec rake bower:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると&lt;code&gt;vendor/assets&lt;/code&gt;配下に&lt;code&gt;bower_components&lt;/code&gt;というディレクトリが生成され、
その中にNodeモジュールがインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll vendor/assets/bower_components/
query-readyselector/
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bower-rails&lt;/code&gt;でインストールしたNodeモジュールは、&lt;code&gt;bower-rails&lt;/code&gt;側で管理したかったので、gitignore した。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ cat .gitignore
vendor/assets/bower_components/*
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;インストールしたNodeモジュールのpathを設定する。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ cat config/application.rb
config.assets.paths &amp;lt;&amp;lt; Rails.root.join(&amp;lsquo;vendor&amp;rsquo;, &amp;lsquo;assets&amp;rsquo;, &amp;lsquo;bower_components&amp;rsquo;)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次に&lt;code&gt;jquery-readyselector&lt;/code&gt;を&lt;code&gt;application.js&lt;/code&gt;に読み込む。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ cat app/assets/javascripts/application.js
//= require jquery-readyselector
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;最後にbodyタグに、アクセスされた時の&lt;code&gt;コントローラ名&lt;/code&gt;と&lt;code&gt;アクション名&lt;/code&gt;をclassに設定するようにする。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ emacs app/views/layouts/application.html.erb
&lt;body class=&#34;&lt;%= controller_name -%&gt; &amp;lt;%= action_name -%&amp;gt;&amp;ldquo;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;ページ別にjsが読み込まれているか確認:81d2c341e61d33f963f82806634eede6&#34;&gt;ページ別にJsが読み込まれているか確認&lt;/h2&gt;

&lt;p&gt;まずは適当なページ(&lt;a href=&#34;http://localhost:3000/books)を用意する。&#34;&gt;http://localhost:3000/books)を用意する。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g scaffold Book title:string price:integer
&amp;hellip;
app/assets/javascripts/books.coffee
&amp;hellip;&lt;/p&gt;

&lt;p&gt;$ rake db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次に生成されたJs(coffee)に、ページ単位(action単位)にコードを書く。
&lt;code&gt;http://localhost:3000/books&lt;/code&gt;にアクセスした時のみ、&lt;code&gt;alert&lt;/code&gt;がでれば成功。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ emacs app/assets/javascripts/books.coffee
$(&amp;lsquo;.books.index&amp;rsquo;).ready -&amp;gt;
  alert(&amp;lsquo;book#index&amp;rsquo;)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:81d2c341e61d33f963f82806634eede6&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mah-lab.com/2014/04/14/bower-rails/&#34;&gt;Railsで外部JavaScriptライブラリなどのAssetを管理するなら、bower-railsが便利&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rharriso/bower-rails&#34;&gt;bower-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hello-world.jp.net/javascript/1673/&#34;&gt;bodyにclassを付けて特定のページでのみjsが動作するようにする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>rails_configで定数を管理する</title>
      <link>http://tatsuyano.github.io/2015/04/08/manage-constant-in-rails_config/</link>
      <pubDate>Wed, 08 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/08/manage-constant-in-rails_config/</guid>
      <description>

&lt;p&gt;環境ごとに定数を管理したい時は、rails-config を使うのが便利。&lt;/p&gt;

&lt;h2 id=&#34;インストール:e91232af01f36657038a0d2a2f32b7bd&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;Gemfileに下記を追加し&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile
gem &#39;rails_config&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;後、rails_config の初期設定を実行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g rails_config:install
      create  config/initializers/rails_config.rb
      create  config/settings.yml
      create  config/settings.local.yml
      create  config/settings
      create  config/settings/development.yml
      create  config/settings/production.yml
      create  config/settings/test.yml
      append  .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## 環境ごとに読み込まれるファイル

&lt;table border=1&gt;
  &lt;tr&gt;
    &lt;th&gt;環境(env)&lt;/th&gt;
    &lt;th&gt;ファイル名&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;共通&lt;/td&gt;
    &lt;td&gt;config/settings.yml&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;(ローカルの)開発環境&lt;/td&gt;
    &lt;td&gt;config/settings.local.yml&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;開発環境&lt;/td&gt;
    &lt;td&gt;config/settings/development.yml&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;テスト環境&lt;/td&gt;
    &lt;td&gt;config/settings/test.yml&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;本番環境&lt;/td&gt;
    &lt;td&gt;config/settings/production.yml&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

開発環境で同じ定数を読み込む場合、優先度は下記の順番でなります。

1. `config/settings.local.yml`
2. `config/settings/development.yml`
3. `config/settings.yml`

ちなみにこの`config/settings.local.yml`は、gitignore の対象ファイルです。  
※ `rails g rails_config:install`実行時に追加されます。

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config/settings.local.yml
config/settings/*.local.yml
config/environments/*.local.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## 定数の出力

例えば`config/settings.local.yml`を、以下のように設定した場合

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;site:
  url: &#39;http://hoge.jp&#39;
  desc: &#39;hogehoge&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View側の出力は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= Settings.site.desc %&amp;gt; # hogehoge
&lt;/code&gt;&lt;/pre&gt;
ちなみにプリフィックスの&lt;code&gt;Settings&lt;/code&gt;は、&lt;code&gt;config/initializers/rails_config.rb&lt;/code&gt;で変更できます。&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:e91232af01f36657038a0d2a2f32b7bd&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yumiyon/items/32c6afb5e2e5b7ff369e&#34;&gt;Railsで定数を環境ごとに管理するrails_config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hello-world.jp.net/ruby/2268/&#34;&gt;Railsで定数を一元管理する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/railsconfig/rails_config&#34;&gt;railsconfig/rails_config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Railsでページごとのscssを管理する方法</title>
      <link>http://tatsuyano.github.io/2015/04/02/how-to-manage-the-page-specific-scss-in-rails/</link>
      <pubDate>Thu, 02 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/02/how-to-manage-the-page-specific-scss-in-rails/</guid>
      <description>

&lt;p&gt;GitHubにある&lt;a href=&#34;https://github.com/twbs/bootstrap-sass/blob/master/README.md&#34;&gt;README.md&lt;/a&gt;を参考に、&lt;a href=&#34;http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/&#34;&gt;bootstrap-sassをインストール&lt;/a&gt;してみました。&lt;/p&gt;

&lt;h3 id=&#34;application-scssの設定:3d11fab9ca81505041753320d61d799c&#34;&gt;application.scssの設定&lt;/h3&gt;

&lt;p&gt;すると&lt;code&gt;application.scss&lt;/code&gt;にimportするファイルは、&lt;code&gt;bootstrap&lt;/code&gt;と&lt;code&gt;bootstrap-sprockets&lt;/code&gt;の2ファイルのみとなっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;// &#39;bootstrap-sprockets&#39; must be imported before &#34;bootstrap&#34; and &#34;bootstrap/variables&#34;
@import &#34;bootstrap-sprockets&#34;;
@import &#34;bootstrap&#34;;&#34;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そのため、このままですと、ページごとに用意したscssファイルを読み込むためには、
毎回&lt;code&gt;application.scss&lt;/code&gt;にimportする必要がでてきてしまいます。&lt;/p&gt;

&lt;h3 id=&#34;デフォルトのapplication-css:3d11fab9ca81505041753320d61d799c&#34;&gt;デフォルトのapplication.css&lt;/h3&gt;

&lt;p&gt;通常、設定なしで &lt;code&gt;rails new&lt;/code&gt; を行うと、&lt;code&gt;application.css&lt;/code&gt; には、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;$ cat app/assets/stylesheets/application.css
/*
 *= require_tree . # 指定されたディレクトリ以下のすべてを再帰的にインクルード(順番の保証なし)
 *= require_self   # require_self呼び出しが行われたその場所にCSSファイルがあれば読み込みます
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というディレクティブが設定され、stylesheetsディレクトリ以下にcssを置くと、
自動で読み込まれる(順番は保証されない)ようになります。&lt;/p&gt;

&lt;h3 id=&#34;railsでsassファイルをどう管理するべきか:3d11fab9ca81505041753320d61d799c&#34;&gt;RailsでSassファイルをどう管理するべきか&lt;/h3&gt;

&lt;p&gt;いろいろ方法は有ると思うのですが、今回は&lt;a href=&#34;http://qiita.com/natsu871/items/53b38a2543df97df751d&#34;&gt;こちらの記事&lt;/a&gt;を参考に
ディレクトリ構成を作ってみました。&lt;/p&gt;

&lt;p&gt;まず、読み込み順を守る必要のあるファイル(&lt;code&gt;bootstrap&lt;/code&gt;と&lt;code&gt;bootstrap-sprockets&lt;/code&gt;)は、そのまま&lt;code&gt;application.scss&lt;/code&gt;に。&lt;br /&gt;
ページ個々のscssに関しては、&lt;code&gt;app/assets/stylesheets/partials&lt;/code&gt;ディレクトリを生成し、そちらに配置しておきます。&lt;br /&gt;
&lt;code&gt;partials&lt;/code&gt;ディレクトリでは、読み込み順が保証されないので、注意してください。
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;# app/assets/stylesheets/application.scss
@import &amp;ldquo;bootstrap-sprockets&amp;rdquo;;
@import &amp;ldquo;bootstrap&amp;rdquo;;
@import &amp;ldquo;partials/*&amp;ldquo;; // glob importing
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;※ &lt;code&gt;sass-rails&lt;/code&gt;のバージョンが古いと、&lt;code&gt;glob importing&lt;/code&gt; には対応していないので、動かない場合はバージョンを上げてみて下さい。&lt;/p&gt;

&lt;h3 id=&#34;partialsディレクトリにファイルがないとエラーになる:3d11fab9ca81505041753320d61d799c&#34;&gt;partialsディレクトリにファイルがないとエラーになる&lt;/h3&gt;

&lt;p&gt;ただこのままの状態だと、partialsディレクトリにファイルがないので、&lt;code&gt;File to import not found or unreadable&lt;/code&gt;エラーが出てしまいます。
それを防ぐために、とりあえずブランクのscssファイルをディレクトリに配置するようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ touch app/assets/stylesheets/partials/blank.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後のブランクのscssを用意するのはかなり微妙ですが、
ディレクトリに別のscssが用意された時点で、blank.scssを削除するなど対応する形で当面運用しようと思います。&lt;/p&gt;

&lt;h3 id=&#34;application-jsの設定:3d11fab9ca81505041753320d61d799c&#34;&gt;application.jsの設定&lt;/h3&gt;

&lt;p&gt;最低限必要なのは、下記のJsになります。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//= require jquery
//= require jquery_ujs
//= require bootstrap-sprockets
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:3d11fab9ca81505041753320d61d799c&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://railsguides.jp/asset_pipeline.html&#34;&gt;RailsGuide::アセットパイプライン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twbs/bootstrap-sass&#34;&gt;twbs/bootstrap-sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4778627/is-it-possible-to-import-a-whole-directory-in-sass-using-import&#34;&gt;Is it possible to import a whole directory in sass using
@import?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/natsu871/items/53b38a2543df97df751d&#34;&gt;Rails での適切な Sass の構成手法について（翻訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails4でBootstrap3を導入(sass版)</title>
      <link>http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/</link>
      <pubDate>Tue, 31 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/</guid>
      <description>

&lt;p&gt;以前、&lt;code&gt;twitter-bootstrap-rails&lt;/code&gt; をつかって&lt;a href=&#34;http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/&#34;&gt;Bootstrap3を導入&lt;/a&gt;という記事を書いたんですが、
Twitter社が提供している&lt;code&gt;bootstrap-sass&lt;/code&gt;のほうが導入が簡単だったので、今後はこちらを使っていきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;設定:1d26c675b81c51ae89761728b91077a7&#34;&gt;設定&lt;/h2&gt;

&lt;p&gt;まずはGemfileの設定から。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat Gemfile
gem &amp;lsquo;bootstrap-sass&amp;rsquo;, &amp;lsquo;~&amp;gt; 3.3.4&amp;rsquo;
gem &amp;lsquo;sass-rails&amp;rsquo;, &amp;lsquo;&amp;gt;= 3.2&amp;rsquo;&lt;/p&gt;

&lt;p&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;application.css&lt;/code&gt; を削除し、新たに &lt;code&gt;application.sass&lt;/code&gt; を生成します。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm app/assets/stylesheets/application.css
$ cat &amp;gt; app/assets/stylesheets/application.scss
@import &amp;ldquo;bootstrap-sprockets&amp;rdquo;;
@import &amp;ldquo;bootstrap&amp;rdquo;;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;application.js&lt;/code&gt; の設定を変更します。読み込み順に注意してください。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat &amp;gt; app/assets/javascripts/application.js
//= require jquery
//= require bootstrap-sprockets
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;これでGlyphicons(Webフォント)も使えるようになります。便利ですね。&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:1d26c675b81c51ae89761728b91077a7&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twbs/bootstrap-sass&#34;&gt;twbs/bootstrap-sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masamitsu-konya/items/e3630046774ac1fbd346&#34;&gt;全部はいらないよね？bootstrap-sassをカスタマイズして使う方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連する記事:1d26c675b81c51ae89761728b91077a7&#34;&gt;関連する記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/&#34;&gt;Rails4でBootstrap3を導入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>アプリケーションテンプレートを使って、プロジェクトのひな形を作る</title>
      <link>http://tatsuyano.github.io/2015/03/31/use-rails-application-templates/</link>
      <pubDate>Tue, 31 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/31/use-rails-application-templates/</guid>
      <description>

&lt;p&gt;Railsアプリを作っていると、ある程度決まったRuby Gemを使うようになってきたり、
同じ設定(config周りとか)を繰り返すようになってきます。&lt;/p&gt;

&lt;p&gt;そこでRailsのアプリケーションテンプレート機能を使うと、
そういった決まった作業をコード化することができるようになります。&lt;/p&gt;

&lt;p&gt;今回は、主にデータベースをPostgreSQL、テストFWをRSpec、CSSFWにTwitterBootStrapの初期設定を行い、最後に&lt;code&gt;git commit -m &#39;Initial commit&#39;&lt;/code&gt;するまでのアプリケーションテンプレートを作ってみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;作業の流れ:c7250590061089d461e23945943d79e3&#34;&gt;作業の流れ&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;templateファイルを作成&lt;/li&gt;
&lt;li&gt;templateファイルをGitHubなどにpush&lt;/li&gt;
&lt;li&gt;templateファイルを使って、Railsアプリを作ってみる&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;template-rb:c7250590061089d461e23945943d79e3&#34;&gt;template.rb&lt;/h2&gt;

&lt;p&gt;コードを実際見てもらえばわかるように、templateファイルといっても特別なものではなく、
Gemfileと同じように、必要なGemを指定し、実際の作業を明文化したファイルになります。&lt;/p&gt;

&lt;p&gt;※ 最新のソースは&lt;a href=&#34;https://github.com/tatsuyano/rails-template&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- coding: utf-8 -*-

@app_name = app_name

gem &#39;rails&#39;, &#39;4.2.0&#39;
gem &#39;pg&#39;
gem &#39;sass-rails&#39;, &#39;~&gt; 5.0&#39;
gem &#39;uglifier&#39;, &#39;&gt;= 1.3.0&#39;
gem &#39;coffee-rails&#39;, &#39;~&gt; 4.1.0&#39;
gem &#39;jquery-rails&#39;
gem &#39;turbolinks&#39;
gem &#39;jbuilder&#39;, &#39;~&gt; 2.0&#39;
gem &#39;annotate&#39; # modelクラスにスキーマ情報の注釈をつける
gem &#39;bootstrap-sass&#39; # bootstrap

gem_group :development, :test do
  gem &#39;spring&#39;
  gem &#39;pry-rails&#39;
  gem &#39;pry-byebug&#39;
  gem &#39;better_errors&#39;
  gem &#39;binding_of_caller&#39;
  gem &#39;rspec-rails&#39;
  gem &#39;guard-rspec&#39;                        # railsでguardを使うためのGem
  gem &#39;spring-commands-rspec&#39; , &#39;~&gt; 1.0.2&#39; # springでキャッシュした状態でguardを使うためのGem
  gem &#34;factory_girl_rails&#34; , &#34;~&gt; 4.4.1&#34;    # テストデータの作成
end

gem_group :test do
  gem &#39;byebug&#39;
  gem &#39;web-console&#39;, &#39;~&gt; 2.0&#39;
  gem &#39;shoulda-matchers&#39;, require: false # rspecで使うmatcher
  gem &#34;faker&#34; , &#34;~&gt; 1.4.3&#34;              # 名前やメールアドレス、その他のプレースホルダをファクトリに提供
  gem &#34;database_cleaner&#34; , &#34;~&gt; 1.3.0&#34;   # まっさらな状態で各specが実行できるように、テストデータベースのデータを掃除
#  gem &#34;capybara&#34; , &#34;~&gt; 2.4.3&#34;           # ユーザとWebアプリケーションのやりとりをプログラム上でシミュレートできる
#  gem &#34;launchy&#34; , &#34;~&gt; 2.4.2&#34;            # 好きなタイミングでデフォルトのwebブラウザを開く
#  gem &#34;selenium-webdriver&#34; , &#34;~&gt; 2.43.0&#34;# ブラウザ上でJavaScriptを利用する機能をCapybaraでテストできる
end

gem_group :production do
  gem &#39;rails_12factor&#39;
end

# rspec initalize setting
run &#39;bundle install&#39;
run &#39;rm -rf test&#39;
generate &#39;rspec:install&#39;

# guard initalize setting
run &#39;bundle exec spring binstub rspec&#39;
run &#39;bundle exec guard init rspec&#39;

# rm unused files
run &#34;rm README.rdoc&#34;

# database
run &#39;rm config/database.yml&#39;

database_yml = &lt;&lt;-FILE
default: &amp;default
  adapter: postgresql
  encoding: unicode
  pool: 5
development:
  &lt;&lt;: *default
  database: #{@app_name}
  username: postgres
  password: postgres
test:
  &lt;&lt;: *default
  database: #{@app_name}_test
  username: postgres
  password: postgres
FILE
  
File.open(&#34;config/database.yml&#34;,&#34;w&#34;) do |file|
  file.puts database_yml
end

run &#39;bundle exec rake db:create&#39;
run &#39;rails g annotate:install&#39;

# config/application
environment &#34;config.time_zone = &#39;Tokyo&#39;&#34;
environment &#34;config.active_record.default_timezone = :local&#34;

# bootstrap
run &#34;rm app/assets/stylesheets/application.css&#34;
run &#34;rm app/assets/javascripts/application.js&#34;

File.open(&#34;app/assets/stylesheets/application.scss&#34;,&#34;w&#34;) do |file|
  file.puts &lt;&lt;-SCSS
@import &#34;bootstrap-sprockets&#34;;
@import &#34;bootstrap&#34;;
SCSS
end

File.open(&#34;app/assets/javascripts/application.js&#34;,&#34;w&#34;) do |file|
  file.puts &lt;&lt;-JS
//= require jquery
//= require bootstrap-sprockets
JS
end

# git initalize setting
after_bundle do
  git :init
  git add: &#39;.&#39;
  git commit: %Q{ -m &#39;Initial commit&#39; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## 確認

まずはテンプレートにエラーがないかに、Githubにpushする前に直接指定し`rails new`してみます。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails new app_name -m template.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーがでなければ、Githubにpushして、今後はURLを指定して&lt;code&gt;rails new&lt;/code&gt;してください。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails new app_name -m
&lt;a href=&#34;https://raw.githubusercontent.com/tatsuyano/rails-template/master/template.rb&#34;&gt;https://raw.githubusercontent.com/tatsuyano/rails-template/master/template.rb&lt;/a&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;テンプレートを一度作るまでは面倒ですが、作業がコード化できるなど、メリットが大きいので作ることをおすすめします。&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:c7250590061089d461e23945943d79e3&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nanapi.co.jp/blog/2015/01/27/rails-template/&#34;&gt;Rails Templateでプロジェクト作成を楽にしよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tachiba/items/26b2e9dc271bd8e6907d&#34;&gt;RailsのApplication templateを使って開発の初速をあげよう！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://railsguides.jp/rails_application_templates.html&#34;&gt;Rails のアプリケーションテンプレート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://morizyun.github.io/blog/rails4-application-templates-heroku/&#34;&gt;Rails 4.2 + Bootstrap の Application Template
1コマンドでモダンRailsが！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tatsuyano/rails-template&#34;&gt;tatsuyano/rails-template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ActiveRecordのモデルに注釈を付ける</title>
      <link>http://tatsuyano.github.io/2015/03/30/i-annotate-model-of-activerecord/</link>
      <pubDate>Mon, 30 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/30/i-annotate-model-of-activerecord/</guid>
      <description>

&lt;p&gt;&lt;code&gt;annotate&lt;/code&gt; を使うと、&lt;code&gt;rake db:migrate&lt;/code&gt; をしたタイミングで、自動でmodelクラスの先頭に、スキーマ情報のコメントを挿入してくれるようになります。&lt;/p&gt;

&lt;h2 id=&#34;設定:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;設定&lt;/h2&gt;

&lt;p&gt;まずはインストール。Gemfileに追加後 &lt;code&gt;bundle install&lt;/code&gt; します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat Gemfile
gem &#39;annotate&#39;

$ bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

`rake db:migrate`をしたタイミングで自動で、スキーマ情報を挿入するためには、
`annotate:install` します。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g annotate:install
      create  lib/tasks/auto_annotate_models.rake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動で挿入したくない場合は、&lt;code&gt;annotate:install&lt;/code&gt;はせずに、modelクラスを更新した都度、&lt;code&gt;bundle exec annotate&lt;/code&gt;を行って下さい。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec annotate
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;確認:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;確認&lt;/h2&gt;

&lt;p&gt;試しにbooksモデルを作成し、コメントが挿入されるか確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g scaffold Book title:string price:integer
$ rake db:migrate
== 20150330032832 CreateBooks: migrating ======================================
&amp;ndash; create_table(:books)
   -&amp;gt; 0.0090s
   == 20150330032832 CreateBooks: migrated (0.0094s) =============================&lt;/p&gt;

&lt;p&gt;Annotated (1): Book
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;modelクラスにスキーマ情報が挿入されていることを確認できます。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ cat app/models/book.rb&lt;/p&gt;

&lt;h1 id=&#34;schema-information:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;== Schema Information&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;table-name-books:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;Table name: books&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;id-integer-not-null-primary-key:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;id         :integer          not null, primary key&lt;/h1&gt;

&lt;h1 id=&#34;title-string:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;title      :string&lt;/h1&gt;

&lt;h1 id=&#34;price-integer:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;price      :integer&lt;/h1&gt;

&lt;h1 id=&#34;created-at-datetime-not-null:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;created_at :datetime         not null&lt;/h1&gt;

&lt;h1 id=&#34;updated-at-datetime-not-null:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;updated_at :datetime         not null&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;class Book &amp;lt; ActiveRecord::Base
end
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;カラムを追加、変更後も自動でスキーマ情報が更新されます。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ rails g migration AddAuthorsToBooks author:string
$ cat db/migrate/20150330024524_add_authors_to_books.rb
class AddAuthorsToBooks &amp;lt; ActiveRecord::Migration
  def change
    add_column :books, :author, :string
  end
end&lt;/p&gt;

&lt;p&gt;$ rake db:migrate
$ cat app/models/book.rb&lt;/p&gt;

&lt;h1 id=&#34;schema-information-1:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;== Schema Information&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;table-name-books-1:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;Table name: books&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;id-integer-not-null-primary-key-1:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;id         :integer          not null, primary key&lt;/h1&gt;

&lt;h1 id=&#34;title-string-1:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;title      :string&lt;/h1&gt;

&lt;h1 id=&#34;price-integer-1:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;price      :integer&lt;/h1&gt;

&lt;h1 id=&#34;created-at-datetime-not-null-1:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;created_at :datetime         not null&lt;/h1&gt;

&lt;h1 id=&#34;updated-at-datetime-not-null-1:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;updated_at :datetime         not null&lt;/h1&gt;

&lt;h1 id=&#34;author-string-this:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;author     :string　　　     # &amp;lt;= This!&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;class Book &amp;lt; ActiveRecord::Base
end
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:a1e5d470e580a2d5bea32d3397647cd9&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sue445.hatenablog.com/entry/2015/03/29/012855&#34;&gt;Railsアプリやgem作る時にいつも入れているgem一覧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ctran/annotate_models&#34;&gt;annotate_models:github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Werckerを使ってHerokuにデプロイする</title>
      <link>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</link>
      <pubDate>Fri, 13 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</guid>
      <description>

&lt;p&gt;Bitbucket(プライベートリポジトリ)に用意したアプリケーション(Rails)を
WerckerでBuildし、HerokuにDeployした時の備忘録です。&lt;/p&gt;

&lt;h2 id=&#34;前提:6460fcf230fa2284bc2f384bc9d671a0&#34;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bitbucketにアプリケーションが用意済み&lt;/li&gt;
&lt;li&gt;Werckerにアカウントを持っていて、Bitbacketと連携済み&lt;/li&gt;
&lt;li&gt;Herokuにアカウントを持っていて、Bitbacketと連携済み&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bitbacketのリポジトリをwerckerに登録する:6460fcf230fa2284bc2f384bc9d671a0&#34;&gt;BitbacketのリポジトリをWerckerに登録する&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;プロバイダを選択します。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リポジトリを選択します。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リポジトリへの接続方法を選択します。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;wercker.yml&lt;/code&gt;の内容が自動生成されます。&lt;code&gt;wercker.yml&lt;/code&gt;は後で新規に作成するので、ここではコピーせずに次に進みます。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Make my app public&lt;/code&gt;に&lt;span id=&#39;make_my_app_public&#39;&gt;チェック&lt;/span&gt;を入れると、後ほど出てくる&lt;code&gt;badge&lt;/code&gt;をクリックしたさいに、deploy情報を公開できるようになります(今回はチェックしません)。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これで、WerckerにBitbacketのリポジトリの登録が完了しました。&lt;/p&gt;

&lt;h2 id=&#34;wercker-ymlを作成し-アプリケーションをbuildする:6460fcf230fa2284bc2f384bc9d671a0&#34;&gt;wercker.ymlを作成し、アプリケーションをBuildする&lt;/h2&gt;

&lt;p&gt;WerckerでアプリケーションをBuild、Deployするための設定は、&lt;code&gt;wercker.yml&lt;/code&gt;に記載します。&lt;code&gt;wercker.yml&lt;/code&gt;は、アプリケーションのRootディレクトリ直下(Gemfileなどが置いてある階層)に置いてください。&lt;/p&gt;

&lt;p&gt;wercker.yml
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;box: wercker/ruby
 services:
     - wercker/postgresql
 build:
     steps:
       - bundle-install
       - rails-database-yml:
           service: postgresql
       - script:
           name: echo ruby information
           code: |
               echo &amp;ldquo;ruby version $(ruby &amp;ndash;version) running!&amp;rdquo;
               echo &amp;ldquo;from location $(which ruby)&amp;rdquo;
               echo -p &amp;ldquo;gem list: $(gem list)&amp;rdquo;
       - script:
           name: Set up db
           code: RAILS_ENV=test bundle exec rake db:schema:load
       - script:
           name: Run RSpec
           code: bundle exec rspec
 deploy:
     steps:
         - heroku-deploy:
             install-toolbelt: true
         - script:
             name: Update database
             code: heroku run rake db:migrate &amp;ndash;app $APP_NAME
         - script:
             name: Update assets
             code: heroku run rake add_static_assets &amp;ndash;app $APP_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;生成したwercker.ymlを、Bitbacketに&lt;code&gt;git push&lt;/code&gt;すると、Wercker上に自動でBuildされます。
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ git add wercker.yml
$ git commit -m &amp;lsquo;Add wercker.yml&amp;rsquo;
$ git push origin master
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;deploy先-heroku-の設定:6460fcf230fa2284bc2f384bc9d671a0&#34;&gt;Deploy先(Heroku)の設定&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Buildが終わったので、次にDeploy(Heroku)の設定を行います。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WerckerにHerokuのAPIキーを設定します。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Heroku account page&lt;/code&gt;をクリック先のページ(Heroku)からKeyをコピーします。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Deploy target name&lt;/code&gt;に適当な名前を設定します。また、&lt;code&gt;auto deploy ...&lt;/code&gt;のチェックボックスをONにすると、２回目以降のBuild時に、自動でDeployされるようになります。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Create new Heroku app&lt;/code&gt;を押下し、アプリケーション名と、Regionを設定します。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;先ほど作成したwercker.ymlで使っている変数名を設定します。
今回は&lt;code&gt;APP_NAME&lt;/code&gt;という変数に、先ほどのアプリケーション名を設定します。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deployの設定が終わったら、次にBuildのログのリンクを押下してください。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Deploy to&lt;/code&gt;ボタンに先ほど設定した&lt;code&gt;Deploy target name(production)&lt;/code&gt;が表示されます。このボタンをクリックするとDeployが開始されます。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;readme-mdにbadgeを追加する:6460fcf230fa2284bc2f384bc9d671a0&#34;&gt;README.mdにbadgeを追加する&lt;/h2&gt;

&lt;p&gt;GithubのREADMEによくついている例のあれです。あるとなんとないかっこいいのでつけましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;#make_my_app_public&#39;&gt;リポジトリをWerckerに登録した&lt;/a&gt;さいにあった&lt;code&gt;Make my app public&lt;/code&gt;のチェックをONにした状態で、このbadgeをクリックすると、BuildとDeployのログが確認できるようになります。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploying-to-heroku-using-wercker_14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな簡単に登録できて、しかも無料(今のところ)なんて、Werckerすごくいいですね。以上、お疲れ様でした。&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:6460fcf230fa2284bc2f384bc9d671a0&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/&#34;&gt;Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://razokulover.hateblo.jp/entry/2014/05/21/000306&#34;&gt;bitbucketとwerckerで０円CIをする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsumekoara/items/62cfa777b108acb5659f&#34;&gt;RailsアプリをWerckerを通してHerokuに上げる際に -bash: heroku: command not found とかなった場合の対応&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>WerckerのBuild結果をSlackに通知する</title>
      <link>http://tatsuyano.github.io/2015/03/13/notification-build-results-of-wercker-to-slack/</link>
      <pubDate>Fri, 13 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/13/notification-build-results-of-wercker-to-slack/</guid>
      <description>

&lt;p&gt;Werckerに登録したアプリケーションのBuild結果をSlackのwebHookという機能を使うことで、Slackに通知することができるようになります。&lt;/p&gt;

&lt;h2 id=&#34;slackにwebhookを追加する:5b40b8b3e2b3d99797e44fdca35fc89e&#34;&gt;SlackにWebHookを追加する&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;サイドメニューの  Configure Integrations を押下してください。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/notification-build-results-of-wercker-to-slack_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Incoming WebHooks&lt;/code&gt;を追加してください。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/notification-build-results-of-wercker-to-slack_02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;どのチャンネルに追加するか選択してください。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/notification-build-results-of-wercker-to-slack_03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;URLをコピーし、&lt;code&gt;Save Settings&lt;/code&gt;を押下します。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/notification-build-results-of-wercker-to-slack_04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;werckerにslackのtokenを設定する:5b40b8b3e2b3d99797e44fdca35fc89e&#34;&gt;WerckerにSlackのTOKENを設定する&lt;/h2&gt;

&lt;p&gt;先ほどコピーしたURLの一番後ろについているパラーメータがSLACK_TOKENになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://hooks.slack.com/services/aaaaa/bbbbb/[SLACK-TOKEN]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SLACK_TOKEN&lt;/code&gt;は&lt;code&gt;Protected&lt;/code&gt;にチェックした状態でSAVEしてください。&lt;code&gt;Protected&lt;/code&gt;をチェックすると、ログ上で値が非表示になります。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/notification-build-results-of-wercker-to-slack_05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wercker-ymlに-after-steps-を追加:5b40b8b3e2b3d99797e44fdca35fc89e&#34;&gt;wercker.ymlに&lt;code&gt;after-steps&lt;/code&gt;を追加&lt;/h2&gt;

&lt;p&gt;Build後(build: after-steps)に、Slackに通知するようwercker.ymlを設定します。&lt;code&gt;subdomain&lt;/code&gt;はSlackのURL&lt;code&gt;http://hoge.slack.com&lt;/code&gt;の&lt;code&gt;hoge&lt;/code&gt;の部分にあたります。
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;box: wercker/ruby
 services:
     - wercker/postgresql
 build:
     steps:
       - bundle-install
       - rails-database-yml:
           service: postgresql
       - script:
           name: echo ruby information
           code: |
               echo &amp;ldquo;ruby version $(ruby &amp;ndash;version) running!&amp;rdquo;
               echo &amp;ldquo;from location $(which ruby)&amp;rdquo;
               echo -p &amp;ldquo;gem list: $(gem list)&amp;rdquo;
       - script:
           name: Set up db
           code: RAILS_ENV=test bundle exec rake db:schema:load
       - script:
           name: Run RSpec
           code: bundle exec rspec
     # ここから追加 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
     after-steps:
       - sherzberg/slack-notify:
           subdomain: hoge
           token: $SLACK_TOKEN
           channel: &amp;ldquo;#general&amp;rdquo;
           username: wercker
           icon_url: &lt;a href=&#34;https://avatars3.githubusercontent.com/u/1695193?s=140&#34;&gt;https://avatars3.githubusercontent.com/u/1695193?s=140&lt;/a&gt;
     # ここまで&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
 deploy:
     steps:
         - heroku-deploy:
             install-toolbelt: true
         - script:
             name: Update database
             code: heroku run rake db:migrate &amp;ndash;app $APP_NAME
         - script:
             name: Update assets
             code: heroku run rake add_static_assets &amp;ndash;app $APP_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;wercker.yml を更新したので&lt;code&gt;git push&lt;/code&gt;してください。
正しく設定できれていれば、下記のようなメッセージがSlackに通知されます。
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/notification-build-results-of-wercker-to-slack_06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:5b40b8b3e2b3d99797e44fdca35fc89e&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tbpgr/items/7705995c9f679d97a382&#34;&gt;Wercker|ビルド結果をSlackに通知する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sherzberg/wercker-step-slack-notify&#34;&gt;wercker-step-slack-notify:github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RailsでPostgreSQLを使う</title>
      <link>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</link>
      <pubDate>Mon, 09 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</guid>
      <description>

&lt;p&gt;アプリをHerokuにdeployしたらSQLエラーが出てしまったので、
ローカルでの開発もPostgreSQLを使ってみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;postgresqlのインストール:75b64ddf54d76b23d517b111450a597c&#34;&gt;PostgreSQLのインストール&lt;/h2&gt;

&lt;p&gt;ちなみにインストール先のOSはamazon-linuxです。
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ sudo yum -y install postgresql93
$ sudo yum -y install postgresql93-devel
$ sudo yum -y install postgresql93-server&lt;/p&gt;

&lt;p&gt;$ psql &amp;ndash;version
psql (PostgreSQL) 9.3.6&lt;/p&gt;

&lt;h1 id=&#34;データベースの初期化:75b64ddf54d76b23d517b111450a597c&#34;&gt;データベースの初期化&lt;/h1&gt;

&lt;p&gt;$ sudo /etc/init.d/postgresql93 initdb&lt;/p&gt;

&lt;h1 id=&#34;データベースの起動:75b64ddf54d76b23d517b111450a597c&#34;&gt;データベースの起動&lt;/h1&gt;

&lt;p&gt;$ sudo /etc/init.d/postgresql93 start&lt;/p&gt;

&lt;h1 id=&#34;サーバー起動時にpostgresの起動設定:75b64ddf54d76b23d517b111450a597c&#34;&gt;サーバー起動時にpostgresの起動設定&lt;/h1&gt;

&lt;p&gt;$ sudo chkconfig postgresql93 on
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;postgresqlアカウントの設定:75b64ddf54d76b23d517b111450a597c&#34;&gt;PostgreSQLアカウントの設定&lt;/h3&gt;

&lt;p&gt;まずは PostgreSQL にスーパーユーザ(postgres)で接続し、パスワードを設定します。
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ sudo -u postgres psql
postgres=# alter role postgres with password &amp;lsquo;hogehoge&amp;rsquo;;  # alter role [user_name] with password &amp;lsquo;[password]&amp;lsquo;;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;データベースの作成:75b64ddf54d76b23d517b111450a597c&#34;&gt;データベースの作成&lt;/h3&gt;

&lt;p&gt;わかりやすいようにデータベース名とRailsのアプリ名(myapp)を同じにします。
ついでにテスト(RSpec)用のデータベースも作成しておきます。
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;postgres=# create database myapp owner postgres; # create database [database_name] owner [user_name];
postgres=# create database myapp_test owner postgres;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;アクセス権限の設定:75b64ddf54d76b23d517b111450a597c&#34;&gt;アクセス権限の設定&lt;/h3&gt;

&lt;p&gt;Rails から PostgreSQL に接続するために、&lt;code&gt;pg_hba.conf&lt;/code&gt;の設定を変更します。&lt;/p&gt;

&lt;p&gt;/var/lib/pgsql93/data/pg_hba.conf
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;# TYPE  DATABASE  USER  ADDRESS   METHOD
#local   all       all             peer  &amp;lt;= コメントアウト
local   all       all             md5   &amp;lt;= コメントイン
&lt;/code&gt;&lt;/pre&gt;
変更後は、PostreSQL と Nginx を再起動
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ sudo /etc/init.d/postgresql93 restart
$ sudo /etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;rails側の設定:75b64ddf54d76b23d517b111450a597c&#34;&gt;Rails側の設定&lt;/h2&gt;

&lt;p&gt;アプリを作成する前に、PostgreSQL を初めて使う場合は、先に&lt;code&gt;pg gem&lt;/code&gt;をインストールしておきます。
&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ gem install pg
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;アプリの作成:75b64ddf54d76b23d517b111450a597c&#34;&gt;アプリの作成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;パラメータでDBでPostgreSQLに指定する&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ rails new myapp -T -d postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;接続先情報の設定:75b64ddf54d76b23d517b111450a597c&#34;&gt;接続先情報の設定&lt;/h3&gt;

&lt;p&gt;先ほど作成したデータベースとアカウントの情報を設定します。&lt;/p&gt;

&lt;p&gt;config/database.yml
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt; default: &amp;amp;default
   adapter: postgresql
   encoding: unicode
   pool: 5&lt;/p&gt;

&lt;p&gt;development:
   &amp;lt;&amp;lt;: *default
   database: myapp
   username: postgres
   password: hogehoge&lt;/p&gt;

&lt;p&gt;test:
   &amp;lt;&amp;lt;: *default
   database: myapp_test
   username: postgres
   password: hogehoge
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;###(おまけ) PostgeSQLのコマンド&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;データベース一覧を取得する &amp;hellip; \l&lt;/li&gt;
&lt;li&gt;データベースを選択する     &amp;hellip; \c [データベース名]&lt;/li&gt;
&lt;li&gt;テーブル一覧を取得する     &amp;hellip; \z&lt;/li&gt;
&lt;li&gt;テーブルスキーマを取得する &amp;hellip; \d [テーブル名]&lt;/li&gt;
&lt;li&gt;ユーザ(Role)の一覧         &amp;hellip; \du&lt;/li&gt;
&lt;li&gt;パスワードの変更           &amp;hellip; alter role [ロール名] with password &amp;lsquo;[新しいパスワード]&amp;lsquo;;&lt;/li&gt;
&lt;li&gt;データベースの作成         &amp;hellip; create database [データベース名] owner [ロール名];&lt;/li&gt;
&lt;li&gt;データベースの削除         &amp;hellip; drop database [データベース名];&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考サイト:75b64ddf54d76b23d517b111450a597c&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.workabroad.jp/posts/1079&#34;&gt;RubyonRailsでsqliteでなくてPostgresqlを使う時&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails4をherokuにdeployする</title>
      <link>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</link>
      <pubDate>Thu, 19 Feb 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</guid>
      <description>

&lt;p&gt;備忘のため、Rails4をheroku上にdeployする方法をメモしておきます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;herokuのアカウントの作成、及び鍵の設定は終っているものとします。&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ ruby  -v 2.2.0p0
$ rails -v 4.2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## サンプルアプリの作成

まずはherokuにdeployするアプリを生成

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ rails new heroku-rails
$ cd heroku-rails
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

herokuではsqlite3はサポートされていないので、productionからは外すようにする。今回productionで使うDBは、heroku標準のpostgressを選択。
また、Rail4から`rails_12factor`が必須になったらしいので設定。

Gemfile
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;group :development do
  gem &#39;sqlite3&#39;
end
group :production do
  gem &#39;pg&#39;
  gem &#39;rails_12factor&#39;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

開発環境では、postgressを使っていないので、`--without production`をつけて
productionでのみ必要なGemは開発環境には入れないようにする。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ bundle install --without production
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

開発環境でも`pg`を使う場合は、以下のようにpostgress本体と、develをインストールする。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ sudo yum install -y postgresql-devel
$ sudo yum install -y postgresql
$ gem install pg
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

ここまでで空のアプリができたので、いったん`git commit`。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ git init
$ git add .
$ git commit -m &#39;initial commit&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

次にherokuにログインし、`heroku create`してheroku上にアプリを生成する。
この時、アプリ名を指定しなければ、適当な名前で生成される(後から変更可)。
*アプリ名はURLに含まれるため、heroku全体でユニークである必要がある*

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ heroku login
$ heroku create &lt;アプリ名&gt;
$ git push heroku master  # この段階でheroku上にdeployされる。
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

ちなみに`git commit`する前に`heroku create`すると、herokuのremote-urlが設定されないので、
その場合は、自分で設定する必要がある。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ git remote set-url heroku  https://git.heroku.com/&lt;アプリ名&gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

アプリの情報は、`heroku app:info`で確認ができる。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ heroku apps:info
=== fast-stream-xxxx
Addons:        heroku-postgresql:hobby-dev
Dynos:         1
Git URL:       https://git.heroku.com/fast-stream-xxxx.git
Owner Email:   xxxxxx@xxxx.com
Region:        us
Repo Size:     24k
Slug Size:     27M
Stack:         cedar-14
Web URL:       https://fast-stream-xxxx.herokuapp.com/
Workers:       0
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

しかし、作成したアプリのURLをたたくと、以下のようなエラーが出る。

![](https://dl.dropboxusercontent.com/u/159938/blog_images/deploy-the-rails4-to-heroku_01.png)

heroku上のアプリでは、いつものRailsのTOP画面は出てこない。

ここまでの状態で、heroku上で動いているのを確認したい場合は、
仮のTOPページを生成してgit commitし、再度`heroku push origin master`してdeployすると確認できる。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ cat &gt;&gt; public/index.html
index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## herokuでDBを使う　

`scaffold`で、DBにアクセスする機能を実装してみる。
開発環境で、`rake db:migrate`した場合は、herokuでも`migrate`する必要がある。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;$ rails g scaffold Book title:string price:integer
$ rake db:migrate
$ git add .
$ git commit -m &#39;rails g scaffold Book title:string price:integer&#39;

$ git push heroku master
$ heroku run rake db:migrate　# &lt;= This!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/deploy-the-rails4-to-heroku_02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;twitterbootstrapのglyphiconを使う:69d872b5ac14e5d9ddb41de50a34f0aa&#34;&gt;TwitterBootStrapのGlyphiconを使う&lt;/h2&gt;

&lt;p&gt;BootStrapのGlyphiconを使ったアプリをherokuにdeployしても、そのままでは使えない。
使うためには、production環境(heroku)でも、assets.compileを有効にする必要がある。&lt;/p&gt;

&lt;p&gt;config/environments/production.rb
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;#config.assets.compile = false
 config.assets.compile = true
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:69d872b5ac14e5d9ddb41de50a34f0aa&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://railsgirls.jp/heroku/&#34;&gt;Heroku に Rails アプリをアップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tstomoki/items/cd2391e028dc44dd6f40&#34;&gt;Railsで簡単なアプリをscaffoldで作ってHerokuにデプロイするまで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.machacks.net/2014/01/21/heroku%E3%81%A7rails%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6%E8%BA%93%E3%81%84%E3%81%9F%E6%89%80/&#34;&gt;HerokuでRailsアプリを公開しようとして躓いた所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/&#34;&gt;Rails4でBootstrap3を導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/20588786/glyphicon-works-locally-but-not-on-heroku&#34;&gt;Glyphicon works locally but not on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails4でBootstrap3を導入</title>
      <link>http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/</link>
      <pubDate>Wed, 18 Feb 2015 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/</guid>
      <description>

&lt;p&gt;※ &lt;a href=&#34;http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/&#34;&gt;Bootstrapをより簡単に導入する(sass版)記事&lt;/a&gt;
もあるので、そちらも参照してみてください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;twitter-bootstrap-rails&lt;/code&gt;というGemを使って、Rails4にBootstrap3を導入します。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails -v Rails 4.1.1
$ ruby -v  ruby 2.1.0p0
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;サンプルアプリの用意:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;サンプルアプリの用意&lt;/h2&gt;

&lt;p&gt;まずはbootstrap3という名前のサンプルアプリを生成し、次に確認用のページを生成します。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails new bootstrap3
$ cd bootstrap3
$ rails g scaffold Book title:string price:integer
$ rake db:migrate
$ rails server
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/introduced-bootstrap3-to-rails4_01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;gemfileの設定:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;Gemfileの設定&lt;/h2&gt;

&lt;p&gt;Bootstrapのcssがlessで書かれているので、Railsでもlessが扱えるようにし、さらにlessをコンパイルするためのGemもインストールします。&lt;/p&gt;

&lt;p&gt;bootstrap3/Gemfile
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem &amp;lsquo;therubyracer&amp;rsquo;            # javascript runtime。lessをコンパイルするために必要
gem &amp;lsquo;less-rails&amp;rsquo;              # Railsでlessを使えるようにする。Bootstrapがlessで書かれているため
gem &amp;lsquo;twitter-bootstrap-rails&amp;rsquo; # Bootstrapの本体
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Gemを反映します。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;bootstrapの設定:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;Bootstrapの設定&lt;/h2&gt;

&lt;p&gt;まずはBootstrapのJsとCssを生成します。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g bootstrap:install
      insert  app/assets/javascripts/application.js
      create  app/assets/javascripts/bootstrap.js.coffee
      create  app/assets/stylesheets/bootstrap_and_overrides.css.less
      create  config/locales/en.bootstrap.yml
        gsub  app/assets/stylesheets/application.css
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;ヘッダー-フッターのbootstrap化:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;ヘッダー、フッターのBootstrap化&lt;/h3&gt;

&lt;p&gt;次にヘッダー、フッターをBootstrapのコンポーネントに差し替えるため、
&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;を上書き(Overwrite)します。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g bootstrap:layout application
    conflict  app/views/layouts/application.html.erb
    Overwrite /bootstrap3/app/views/layouts/application.html.erb? (enter &amp;ldquo;h&amp;rdquo; for help) [Ynaqdh] Y
           force  app/views/layouts/application.html.erb
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/introduced-bootstrap3-to-rails4_02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;scaffoldしたページのbootstrap化:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;scaffoldしたページのBootstrap化&lt;/h3&gt;

&lt;p&gt;次に、scaffoldしたページ全体に対してBootstrap化をしていきます。
ページはすでに生成されているので、ここでも上書きするかメッセージが出ますが、すべて&lt;code&gt;Y&lt;/code&gt;で上書きます。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g bootstrap:themed Books&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conflict  app/views/books/index.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Overwrite /bootstrap3/app/views/books/index.html.erb? (enter &amp;ldquo;h&amp;rdquo; for help) [Ynaqdh] Y
       force  app/views/books/index.html.erb
    conflict  app/views/books/new.html.erb&lt;/p&gt;

&lt;p&gt;Overwrite /bootstrap3/app/views/books/new.html.erb? (enter &amp;ldquo;h&amp;rdquo; for help) [Ynaqdh] Y
       force  app/views/books/new.html.erb
    conflict  app/views/books/edit.html.erb&lt;/p&gt;

&lt;p&gt;Overwrite /bootstrap3/app/views/books/edit.html.erb? (enter &amp;ldquo;h&amp;rdquo; for help) [Ynaqdh] Y
       force  app/views/books/edit.html.erb
    conflict  app/views/books/_form.html.erb&lt;/p&gt;

&lt;p&gt;Overwrite /bootstrap3/app/views/books/_form.html.erb? (enter &amp;ldquo;h&amp;rdquo; for help) [Ynaqdh] Y
       force  app/views/books/_form.html.erb
    conflict  app/views/books/show.html.erb&lt;/p&gt;

&lt;p&gt;Overwrite /bootstrap3/app/views/books/show.html.erb? (enter &amp;ldquo;h&amp;rdquo; for help) [Ynaqdh] Y
       force  app/views/books/show.html.erb
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/introduced-bootstrap3-to-rails4_03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;glyphicons-webフォント-の設定:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;Glyphicons(Webフォント)の設定&lt;/h2&gt;

&lt;p&gt;Bootstrap3からGlyphiconsは、Webフォントなっており、別途サーバーにフォントをインストールする必要があります。&lt;/p&gt;

&lt;p&gt;本家サイトからbootstrap本体をダウンロードし、fontを&lt;code&gt;app/vendor/assets/&lt;/code&gt;配下にコピーします。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget &lt;a href=&#34;https://github.com/twbs/bootstrap/releases/download/v3.3.2/bootstrap-3.3.2-dist.zip&#34;&gt;https://github.com/twbs/bootstrap/releases/download/v3.3.2/bootstrap-3.3.2-dist.zip&lt;/a&gt;
$ unzip bootstrap-3.3.2-dist.zip
$ cp -a bootstrap-3.3.2-dist/fonts /bootstrap3/vendor/assets/
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;次にダウンロードしたフォントを読み込むため、configに設定します。&lt;/p&gt;

&lt;p&gt;bootstrap3/config/application.rb
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;module Bootstrap3
  class Application &amp;lt; Rails::Application
      config.assets.paths &amp;lt;&amp;lt; &amp;ldquo;#{Rails}/vendor/assets/fonts&amp;rdquo; #&amp;lt;- 追加
&amp;hellip;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;最後にlessファイルに対して、ダウンロードしたフォントのパスを設定します。&lt;/p&gt;

&lt;p&gt;bootstrap3/app/assets/stylesheets/bootstrap＿and＿overrides.css.less
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@font-face {
  font-family: &amp;lsquo;Glyphicons Halflings&amp;rsquo;;
  src: url(&amp;lsquo;/assets/glyphicons-halflings-regular.eot&amp;rsquo;);
  src: url(&amp;lsquo;/asstes/glyphicons-halflings-regular.eot?#iefix&amp;rsquo;) format(&amp;lsquo;embedded-opentype&amp;rsquo;),
  url(&amp;lsquo;/assets/glyphicons-halflings-regular.woff&amp;rsquo;) format(&amp;lsquo;woff&amp;rsquo;),
  url(&amp;lsquo;/assets/glyphicons-halflings-regular.ttf&amp;rsquo;) format(&amp;lsquo;truetype&amp;rsquo;),
  url(&amp;lsquo;/assets/glyphicons-halflings-regular.svg#glyphicons-halflingsregular&amp;rsquo;) format(&amp;lsquo;svg&amp;rsquo;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;試しにindex.html.erbに、Glyphiconsのspanタグを書いてみます。&lt;/p&gt;

&lt;p&gt;bootstrap3/app/views/books/index.html.erb&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;%-&amp;nbsp;model_class&amp;nbsp;=&amp;nbsp;Book&amp;nbsp;-%&amp;gt;
&amp;lt;div&amp;nbsp;class=&amp;lsquo;page-header&amp;rsquo;&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;lt;h1&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;%=&amp;lsquo;.title&amp;rsquo;,&amp;nbsp;:default&amp;nbsp;=&amp;gt;&amp;nbsp;model_class.model_name.human.pluralize.titleize&amp;nbsp;%&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;span&amp;nbsp;class=&amp;lsquo;glyphicon&amp;nbsp;glyphicon-heart&amp;rsquo;&amp;nbsp;aria-hidden=&amp;lsquo;true&amp;rsquo;&amp;gt;&amp;lt;/span&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;lt;/h1&amp;gt;
&amp;hellip;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/introduced-bootstrap3-to-rails4_04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-rails.hatenadiary.com/entry/20140801/1406818800&#34;&gt;RailsにTwitter Bootstrapの導入と簡易な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techracho.bpsinc.jp/kazumasa-ogawa/2014_03_27/15892&#34;&gt;Rails4でサイト構築をする – Bootstrap導入編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/next49/20141110/p2&#34;&gt;Bootstrap3をRails4で使うときのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hivecolor.com/id/125&#34;&gt;rails4でbootstrap3のglyphiconを使う方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連する記事:5cfef58f6f27ac7b7203d43f347caa64&#34;&gt;関連する記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/&#34;&gt;Rails4でBootstrap3を導入(sass版)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails4でのデバッグ方法</title>
      <link>http://tatsuyano.github.io/2015/02/18/how-to-debug-in-rails4/</link>
      <pubDate>Wed, 18 Feb 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/how-to-debug-in-rails4/</guid>
      <description>

&lt;p&gt;最近覚えたデバッグ方法を、備忘のためにまとめておきます。&lt;/p&gt;

&lt;h2 id=&#34;ログに出力する:c4921657da7f6c61871c1bfb230ed626&#34;&gt;ログに出力する&lt;/h2&gt;

&lt;p&gt;ActiveSupport::Logger#debugメソッドを使って、rails serverの標準出力にデバッグコードを出力する。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;logger.debug(&amp;lsquo;Hello world&amp;rsquo;)
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;sqlを出力する:c4921657da7f6c61871c1bfb230ed626&#34;&gt;SQLを出力する&lt;/h3&gt;

&lt;p&gt;ActiveRecord::Relation#to_sqlメソッドでSQLを出力する。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.all.to_sql #=&amp;gt; SELECT &amp;ldquo;users&amp;rdquo;.* FROM &amp;ldquo;users&amp;rdquo;
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;ブレークポイントを設定する:c4921657da7f6c61871c1bfb230ed626&#34;&gt;ブレークポイントを設定する&lt;/h2&gt;

&lt;p&gt;コード内に&lt;code&gt;binding.pry&lt;/code&gt;というコードを書くと、そこまで実行中のプログラムが中断され、
以降をコンソール上からデバッグできます。&lt;/p&gt;

&lt;p&gt;Gemfile
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &amp;lsquo;pry-rails&amp;rsquo;,  group: [:development, :test]
gem &amp;lsquo;pry-byebug&amp;rsquo;, group: [:development, :test]
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ bundle install
$ rails server
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;中断したい箇所に&lt;code&gt;binding.pry&lt;/code&gt;を記述。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def index
  @users = User.all&lt;/p&gt;

&lt;p&gt;binding.pry # &amp;lt;- This!&lt;/p&gt;

&lt;p&gt;logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 1 &amp;mdash;&amp;mdash;-&amp;rsquo;)
  logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 2 &amp;mdash;&amp;mdash;-&amp;rsquo;)
  logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 3 &amp;mdash;&amp;mdash;-&amp;rsquo;)
  logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 4 &amp;mdash;&amp;mdash;-&amp;rsquo;)
end
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ブレークポイントの移動は&lt;code&gt;next&lt;/code&gt;,&lt;code&gt;step&lt;/code&gt;,&lt;code&gt;exit&lt;/code&gt;で行う。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     7: def index
     8:   @users = User.all
     9:
    10:   binding.pry
    11:
 =&amp;gt; 12:   logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 1 &amp;mdash;&amp;mdash;-&amp;rsquo;)
    13:   logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 2 &amp;mdash;&amp;mdash;-&amp;rsquo;)
    14:   logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 3 &amp;mdash;&amp;mdash;-&amp;rsquo;)
    15:   logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 4 &amp;mdash;&amp;mdash;-&amp;rsquo;)
    16: end
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;おまけ1-出力結果を見やすく整形する:c4921657da7f6c61871c1bfb230ed626&#34;&gt;おまけ1 出力結果を見やすく整形する&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;pコマンド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;p Array.new(10) { {:hoge =&amp;gt; :fuga} }
#=&amp;gt; [{:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga}, {:hoge=&amp;gt;:fuga}]
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ppコマンド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &amp;lsquo;pp&amp;rsquo;
pp Array.new(10) { {:hoge =&amp;gt; :fuga} }
#=&amp;gt; [{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga},
{:hoge=&amp;gt;:fuga}]
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;おまけ2-オブジェクトの情報を出力する:c4921657da7f6c61871c1bfb230ed626&#34;&gt;おまけ2 オブジェクトの情報を出力する&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Object#inspectメソッドでオブジェクトを文字列として出力する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.inspect
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクトのメソッドを出力する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.methods
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクト(クラス)の継承関係を出力する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.ancestors
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト-書籍:c4921657da7f6c61871c1bfb230ed626&#34;&gt;参考サイト&amp;amp; 書籍&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/B00P0UR1RU/&#34;&gt;パーフェクトRuby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://secondlife.hatenablog.jp/entry/20061010/1160453355&#34;&gt;Ruby で debug する7つの方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.matzmtok.com/blog/?p=119&#34;&gt;Rubyでのデバッグテクニック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>