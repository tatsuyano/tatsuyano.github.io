<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/tags/js/</link>
    <description>Recent content in Js on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 06 Apr 2016 19:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CasperJsの使い方メモ</title>
      <link>http://tatsuyano.github.io/2016/04/06/how-to-use-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 19:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/how-to-use-casperjs/</guid>
      <description>日本語のページのキャプチャを取る 日本語のページのキャプチャを撮るには、CasperJsを実行するサーバーに日本語フォントが入っている必要がある。
sudo yum -y groupinstall &amp;quot;Japanese Support&amp;quot;  CasperJsを一時停止させる 3秒プログラムを停止させてからキャプチャを撮る
casper.then(function() { this.wait(3000, function() { console.log(&#39;3秒後&#39;); this.capture(&#39;capture/test.png&#39;); }); });  CasperJsからJSONをPOSTする casper.start(); casper.open(&#39;http://hoge.com/api/hoge&#39;, { method: &#39;post&#39;, headers: { &#39;Accept-Language&#39;: &#39;ja&#39; }, data: { uuid : &#39;UUID&#39;, secret : &#39;SECRET&#39; } }); // this.getPageContent()で結果を取得できる casper.then(function(response) { var json = JSON.parse(this.getPageContent()); });  CasperJsにメソッドを定義する casper.then(function() { this.createMarkdown(&#39;title&#39;,&#39;describe&#39;); }); casper.createMarkdown = function(title,describe){ template = fs.read(&#39;result/api_template.md&#39;, &#39;utf8&#39;); template = template.replace(/{{title}}/g ,title); template = template.</description>
    </item>
    
    <item>
      <title>CasperJsでAlert、Confirmのイベントをキャッチする</title>
      <link>http://tatsuyano.github.io/2016/04/06/i-have-catched-alert-or-confirm-events-in-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 15:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/i-have-catched-alert-or-confirm-events-in-casperjs/</guid>
      <description>AlertやConfirmダイアログのOKボタン、キャンセルボタンを押下するには、casper.page.onAlert、casper.page.onConfirmを使う。
下の例では、購入ボタン(#buy)を押下すると、 Confirmダイアログが立ち上がり 商品を購入します。よろしいですか？とメッセージが表示される。 OKボタンを押下すると、商品購入処理が実行され 商品の購入が成功すれば 商品を購入しました、 ポイントが足りず購入に失敗すると ポイントが足りません とメッセージが表示される。
var casper = require(&#39;casper&#39;).create({clientScripts: [&#39;./src/includes/jquery.min.js&#39;]}); var point = 100; casper.start(); casper.open(&#39;http://192.168.33.10/shopping/cart&#39;).viewport(1024, 690); casper.then(function() { // AlertダイアログはOKボタンしかないので、返り値は必ずtrueを返す。 // 同一画面で、複数のダイアログを表示する場合は、引数のメッセージで分岐する this.page.onAlert = function(message) { if (message == &#39;商品を購入しました&#39;) { return true; } else if (message == &#39;ポイントが足りません&#39;) { return true; } }; // Confirmダイアログが立ち上がると発火する。 // trueを返すとOKボタンが押下され、falseを返すとキャンセルボタンが押下される this.page.onConfirm = function(message) { if (message == &#39;商品を購入します。よろしいですか？&#39;) { return true; } }; // #add_pointというテキストフィールドに100ポイントを入力し、#buyボタンを押下する this.</description>
    </item>
    
    <item>
      <title>CasperJSのajaxでPOSTの送信ができない</title>
      <link>http://tatsuyano.github.io/2016/04/06/if-you-can-not-send-post-in-ajax-of-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 12:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/if-you-can-not-send-post-in-ajax-of-casperjs/</guid>
      <description>地味にハマった。Chromeだとパラメータにtype:&amp;quot;POST&amp;quot;がなくてもPOSTでリクエストを送信してくれるが、 CasperJsのブラウザでは、type:&amp;quot;POST&amp;quot;を明示しないとGETでリクエストを送信してしまう。
$.ajax({ url: &amp;quot;/shopping/addpoint/&amp;quot;, type: &amp;quot;POST&amp;quot;, // &amp;lt;-このパラメータが必須 data: data, success: function(data, dataType) { var data_arr = JSON.parse(data); $(&#39;#point&#39;).text(data_arr[&#39;point&#39;]); alert(data_arr[&#39;msg&#39;]); } });  手動で操作するぶんには問題なく動いていたので(typeパラメータが設定されていなくても)、 CasperJs(自分で書いたソース)側に問題があると思い込んでしまった。
思い込みで判断せずに、まずはアクセスログを確認しようという教訓でした。</description>
    </item>
    
    <item>
      <title>aglioを使ってmarkdownからAPIドキュメントとStubを作成する</title>
      <link>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</link>
      <pubDate>Tue, 15 Sep 2015 15:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</guid>
      <description>仕事で簡単なAPIを実装する必要があったので、簡単にAPIドキュメントを公開したり、ドキュメントからStubを自動で用意する方法を調べてみた。
で、こちらの記事にやりたいことがまんま載っていた(ありがとうございます！)ので、 記事を参考に自分用のテンプレートを用意した。

Blueprint Blueprintの記述は下記をページを参照。
 API Blueprint Tutorial API Blueprint examples  
api-mockの起動をgulpに設定する 以下のように設定し、$ gulp mock
var gulp = require(&#39;gulp&#39;), aglio = require(&#39;gulp-aglio&#39;), ApiMock = require(&#39;api-mock&#39;); var TEMPLATE_FILES = [&#39;apidocs/*.md&#39;], LAYOUT_FILE = &#39;apidocs/layout.md&#39;, PUBLISHED_DIR = &#39;published&#39;; gulp.task(&#39;api-mock&#39;, function () { var mockServer = new ApiMock({ blueprintPath: PUBLISHED_DIR + &#39;/index.md&#39;, options: { port: 3000 } }); mockServer.run(); }); gulp.task(&#39;mock&#39;, [&#39;api-mock&#39;]);  
Vagrantで使う場合、ポートを開ける vagrant上からaglioとapi-mockを使うには、デフォルトだと8088と3000を開ける必要があるので、Vagrantファイルに以下の設定を加える。
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 3000, host: 3000 config.</description>
    </item>
    
    <item>
      <title>EmacsにternをインストールしてjQueryを補完する</title>
      <link>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</link>
      <pubDate>Thu, 06 Aug 2015 16:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</guid>
      <description> EmacsでjQueryの補完をするには、Ternというツールを使うことで実現できる。

Ternのインストール まずはTern本体をインストール。このTernとEmacs(tern-mode)が裏で通信しながら補完を行う。 Rubyでいうところのrobeと同じ形。
npm install -g tern  
tern、tern-auto-completeのインストール 自分はCaskで管理しているので、Caskファイルに追加し、インストール。 tern-auto-complateは「auto-complate」を使ってpopupで補完候補を表示する。
Cask
(depends-on &amp;quot;tern&amp;quot;) (depends-on &amp;quot;tern-auto-complete&amp;quot;)  「js2-mode」が起動したらtern-modeとtern-auto-complateも起動するよう設定する。
init_loader/03_javascript.el
(autoload &#39;js2-mode &amp;quot;js2-mode&amp;quot; nil t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\.js$&amp;quot; . js2-mode)) (add-hook &#39;js2-mode-hook (lambda () (tern-mode t))) (eval-after-load &#39;tern &#39;(progn (require &#39;tern-auto-complete) (tern-ac-setup)))  
tern-configの設定 ホーム直下に.tern-configというJsonファイルを設定する。ここで補完するライブラリなどを指定できる。
{ &amp;quot;libs&amp;quot;: [ &amp;quot;browser&amp;quot;, &amp;quot;jquery&amp;quot; ], &amp;quot;plugins&amp;quot;: { &amp;quot;node&amp;quot;: {} } }  
tern-modeの実行 正常にインストールが完了すると、以下のようにポップアップで補完が出るようになる。
 

参考サイト  Tern demo emacs で javascript なら js2-mode, tern-mode Emacs の JavaScript 開発環境を整備する(Tern編)  </description>
    </item>
    
    <item>
      <title>Emacsにflymake-jshintをインストールする</title>
      <link>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</link>
      <pubDate>Tue, 28 Jul 2015 11:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</guid>
      <description> 今読んでいる シングルページWebアプリケーション の サンプルコードが「JSLint」を使っていたので、インストールしようと思ったが 「JSHint」のほうが良さそうなのでEmacsに「flymake-jshint」をCask経由でインストールした。
JSHintのインストール まずはnpmでJSHint本体をインストール。
npm install -g jshint  
flymake-jshintのインストール 自分はCaskで管理しているので、Caskファイルに追加しインストール。 flymake-jshintは「js2-mode」に必須のようなので、インストールしていない場合は先にインストールする。
# Cask (depends-on &amp;quot;flymake-jshint&amp;quot;)  JSHintのパスを通し、js2-modeが起動したら、JSHintがロードするよう設定する。
# init_loader/03_javascript.el (setq exec-path (append exec-path &#39;(&amp;quot;~/.anyenv/envs/ndenv/shims/&amp;quot;))) (add-hook &#39;js2-mode-hook &#39;(lambda () (require &#39;flymake-jshint) (flymake-jshint-load)))  
JSHintの実行 正常にインストールが完了すると、タイポなどミスがあると以下のようにポップアップで警告が出るようになる。 うまくいかない場合はM-x flymake-jshint-loadで手動でJSHintを起動し、エラーを確認すること。
参考サイト  JSLint から JSHint をフォークした理由(翻訳) Emacsでflymake-jshintを利用してリアルタイムでのJavaScript文法チェックができるようにする  </description>
    </item>
    
    <item>
      <title>Jsのスコープについて</title>
      <link>http://tatsuyano.github.io/2015/06/08/for-the-scope-of-the-js/</link>
      <pubDate>Mon, 08 Jun 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/08/for-the-scope-of-the-js/</guid>
      <description>グローバルスコープとローカルスコープしかない Jsには2種類のスコープしかない。グローバルスコープ内で宣言した変数をグローバル変数、ローカルスコープ内で宣言した変数をローカル変数という。
 スクリプト全体(トップレベル)で有効なグローバル変数  プログラム終了時までメモリを確保してしまう 多用すると、名前がバッティングする可能性がある   関数内でのみ有効なローカル変数  関数終了時にメモリが開放される 宣言時にvarをつけないと、*グローバル変数*として認識されてしまう   var hoge = &#39;global&#39;; // = グローバル変数 function func () { var fuga = &#39;local&#39;; // = ローカル変数、必ずvarをつける console.log(fuga); }  また、他言語のようにブロックスコープは存在しない。 if (true) { var hoge = &#39;block&#39;; } console.log(hoge); // = block ブロック内で宣言した変数も参照できてしまう  ## 変数の巻き上げ(hoisting) Jsには「変数の巻き上げ」という概念がある。 var hoge = &#39;global&#39;; function func() { console.log(hoge); // = undefined なぜか global と出力されない var hoge = &#39;local&#39;; console.</description>
    </item>
    
    <item>
      <title>Jsの関数について</title>
      <link>http://tatsuyano.github.io/2015/06/08/for-function-of-js/</link>
      <pubDate>Mon, 08 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/08/for-function-of-js/</guid>
      <description>Jsには主に「Function文」と「Function式(関数リテラル)」という２つの関数の宣言方法がある。 ※本当は「Functionコンストラクタ」という方法もあるが、あまり実用的ではないので省略。
// Function文 function func () { console.log(&#39;statements&#39;); } // Function式 var func = function func() { console.log(&#39;expression&#39;); }; //関数の呼び出し方法は同じ func();  違いは評価のタイミング。「Function文」は関数が静的な構造として宣言される。つまり、Jsの実行環境がコードを解析するタイミングで関数が静的に登録され、これにより「関数をどこで定義していても呼び出せる」ようになります。 func(); // = 宣言前に読み出してもエラーにならない function func () { console.log(&#39;statements&#39;); }  逆に「Function式」は、変数に代入された段階で評価される。そのため、宣言後に呼び出さないとエラーになる。 func(); // = TypeError: undefined is not a function var func = function func () { console.log(&#39;expression&#39;); }  ## 無名関数 「無名関数」とは、Function式の関数名を省略した形 。Function式を使う場合は、主に無名関数が使われる。 // 無名関数 var func = function () { console.log(&#39;expression&#39;); }; func();  ## 即時関数 「即時関数」とは、関数を()で囲んだ状態で実行することで、関数宣言と同時にその関数を実行する書き方です。 // 即時関数 (function () { console.</description>
    </item>
    
    <item>
      <title>webpackを使ってes6-promiseを読み込む</title>
      <link>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</link>
      <pubDate>Wed, 03 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</guid>
      <description>最近勉強中のPromiseですが、現段階(15/06/03)ではIE11に対応していません。 PromiseをIEに対応させるためには、es6-promiseというNode.jsのライブラリをフロントエンドで読み込む必要があります。
しかしNode.jsのライブラリは、そのままではフロントエンドで使えないので、 webpackでフロントエンド向けにBuildする必要があります。
-webpackは他にも多くの機能がありますが、ここではNode.jsのモジュールをフロントエンドで使うため方法のみにフォーカスします。-
webpackを使うための準備 まずは本体のインストール。 $ npm install webpack -g 
次に適当なディレクトリを作成します。 $ mkdir webpack-sample &amp;amp;&amp;amp; cd webpack-sample 
今回使うライブラリ(es6-promise)をディレクトリにインストールします。 $ npm install es6-promise 
ライブラリはglobalではなく、ディレクトリ直下(/webpack-sample/node_modules)にインストールしてください。
JsのBuild方法 次に(Node.jsの)ライブラリを読み込むJs(main.js)をビルドします。
$ webpack main.js bundle.js Hash: de7b4a8a87c6e52d026f Version: webpack 1.9.10 Time: 109ms Asset Size Chunks Chunk Names bundle.js 40.1 kB 0 [emitted] main [0] ./main.js 255 bytes {0} [built] + 6 hidden modules  BuildしたJs(bundle.js)は、main.jsが依存しているライブラリ(es6-promise等)も含んだ一つのファイルに圧縮されます。 このJsのみをHTMLに読み込むだけで、Node.jsが利用できるようになります。 &amp;lt;script&amp;nbsp;src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  main.js &#39;use strict&#39; var Promise = require(&#39;es6-promise&#39;).</description>
    </item>
    
    <item>
      <title>Promiseを使って、非同期処理を任意のタイミングで実行する</title>
      <link>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</link>
      <pubDate>Tue, 02 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</guid>
      <description> Promiseを使って、非同期処理を任意の順番で実行するサンプル。 ES5でも順番を指定して実行する事ができるが、Promiseを使うと綺麗に実装できる。
 参考サイト  JavaScript Promiseの本 JavaScript Promises es6-promise Babel repl  関連する記事  webpackを使ってes6-promiseを読み込む  </description>
    </item>
    
  </channel>
</rss>