<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/post/</link>
    <description>Recent content in Posts on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 19 Sep 2017 10:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://tatsuyano.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Syntax checker html-tidy reported too many errors</title>
      <link>http://tatsuyano.github.io/2017/09/19/installed-tidy-html5-for-flycheck/</link>
      <pubDate>Tue, 19 Sep 2017 10:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2017/09/19/installed-tidy-html5-for-flycheck/</guid>
      <description>macのemacsでHTMLを開くとflycheck(html-tidy)で警告がでるようになった。
Warning (flycheck): Syntax checker html-tidy reported too many errors (960) and is disabled.  tidyという名前のパッケージがなかったので調べたら、最近はtidy-html5という名前らしい。
$ brew install tidy-html5  </description>
    </item>
    
    <item>
      <title>hugoを再インストールした</title>
      <link>http://tatsuyano.github.io/2017/09/18/re-installed-hugo/</link>
      <pubDate>Mon, 18 Sep 2017 20:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2017/09/18/re-installed-hugo/</guid>
      <description>久々にblogに記事を書こうと新しいmacにhugoをインストールしたが、まったく動かなかっていたので自分用にメモ。
ちなみに構成は、Hugo本体をbitbucketのリポジトリに非公開で管理し、生成した記事(HTML)をgithub pagesで管理している。
Install Hugo 今回はhomebrewでインストール。
$ brew install hugo $ hugo version Hugo Static Site Generator v0.27.1 darwin/amd64 BuildDate: 2017-09-16T19:35:01+09:00   Quick Start  Add submodule まずgithub pageでブログを公開するために、github上に生成したHTMLを管理するリポジトリをsubmoduleとして管理している。
そもそもsubmoduleの仕組みだが、git submodule addすると、リポジトリの直下に.gitmodules、.git/config、.git/modulesの３箇所に記載、ファイルが追加される。
しかし今回のように、すでにある(add moduleした)リポジトリをcloneした場合.git/modules中にファイルが存在しない。 なので一旦git rm publicでsubmoduleを削除し(すると上記３ファイルの記載が消える)、再度git submodule addする。
$ git rm public $ git submodule add git@github.com:tatsuyano/tatsuyano.github.io.git ##.gitsubmodules [submodule &amp;quot;public&amp;quot;] path = public url = git@github.com:tatsuyano/tatsuyano.github.io.git ## .git/config [submodule &amp;quot;public&amp;quot;] url = git@github.com:tatsuyano/tatsuyano.github.io.git ## git/modules $ ll .</description>
    </item>
    
    <item>
      <title>fishをインストールする</title>
      <link>http://tatsuyano.github.io/2017/09/17/install-fish/</link>
      <pubDate>Sun, 17 Sep 2017 14:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2017/09/17/install-fish/</guid>
      <description>macを新調したので、shellもzshからfishに乗り換えてみた。
Install fish $ brew install fish $ fish -v fish, version 2.6.0  fishをログインシェルにせず、bashから起動する ログインシェルをfishにするとfishに問題があったときにterminalが動かなくなってしまうので、bash_profileからexec fishで起動する。 またanyenvがfishに完全に対応していないみたいなので、bashでanyenvを動かしてからfishを動かす。
## HOME/.bash_profile if [ -d $HOME/.anyenv ]; then export PATH=$HOME/.anyenv/bin:$PATH eval &amp;quot;$(anyenv init -)&amp;quot; fi exec fish   ログインシェルはbashのままfishを利用する fishシェルでanyenvを設定したときにcalled during startupエラーが出る  Install fisherman はじめはOhMyFishをインストールしたが、調べた結果fishermanのほうがよさそうだったのでプラグインマネージャーはfishermanに。コマンドはfisher
$ curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs https://git.io/fisher $ fisher -v fisherman version 2.13.1 ~/.config/fish/functions/fisher.fish   fisherman/fisherman oh-my-fish は古い！fisherman で置き換えられる fishのプラグインマネージャ比較  テーマはOhMyFishのagnosterを選択。別のテーマに変更する場合は、再度installすると変更される。
$ fisher install omf/theme-agnoster  pluginのインストール</description>
    </item>
    
    <item>
      <title>netcatを使って、ポートの状況を確認する</title>
      <link>http://tatsuyano.github.io/2016/04/11/check-the-status-of-the-port-using-the-netcat/</link>
      <pubDate>Mon, 11 Apr 2016 14:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/11/check-the-status-of-the-port-using-the-netcat/</guid>
      <description> ローカルマシン(今回はWindows)から、ホストのLinux(ローカルマシン内のVagrant)に、 メッセージを送ってポートの確認を行う方法
netcatのインストール まずはyumでLinuxにインストール
sudo yum -y install nc.x86_64  次に下記URLからWindowsにインストール
 windows版のnetcat  WindowsからLinuxの指定のポートにメッセージを送る Windowsのコンソールを立ち上げ、Linux(192.168,33.10)の(例えば)8082ポートにecho これで8082ポートが開いている確認できる
C:\Program Files (x86)\netcat&amp;gt; echo &#39;hello&#39; | nc 192.168.33.10 8082  次に Linux側で8082ポートをListen。すると期待どおりメッセージが表示される
$ nc -l 8082 &#39;hello&#39;  ホスト側の現在開いているポートを確認する ホスト側でポート状況を確認するには、以下のパラーメータをつける
$ netstat -ant  オプション  -t TCPポートを表示する -u UDPポートを表示する -a すべての有効なポートを表示する -n 一切の名前解決を行なわない  参考サイト  Netcat でネットワークをもう少し活用する netstatコマンドを使いこなす netstat（1）――TCP通信の接続状況を調べる  </description>
    </item>
    
    <item>
      <title>CasperJsの使い方メモ</title>
      <link>http://tatsuyano.github.io/2016/04/06/how-to-use-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 19:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/how-to-use-casperjs/</guid>
      <description>日本語のページのキャプチャを取る 日本語のページのキャプチャを撮るには、CasperJsを実行するサーバーに日本語フォントが入っている必要がある。
sudo yum -y groupinstall &amp;quot;Japanese Support&amp;quot;  CasperJsを一時停止させる 3秒プログラムを停止させてからキャプチャを撮る
casper.then(function() { this.wait(3000, function() { console.log(&#39;3秒後&#39;); this.capture(&#39;capture/test.png&#39;); }); });  CasperJsからJSONをPOSTする casper.start(); casper.open(&#39;http://hoge.com/api/hoge&#39;, { method: &#39;post&#39;, headers: { &#39;Accept-Language&#39;: &#39;ja&#39; }, data: { uuid : &#39;UUID&#39;, secret : &#39;SECRET&#39; } }); // this.getPageContent()で結果を取得できる casper.then(function(response) { var json = JSON.parse(this.getPageContent()); });  CasperJsにメソッドを定義する casper.then(function() { this.createMarkdown(&#39;title&#39;,&#39;describe&#39;); }); casper.createMarkdown = function(title,describe){ template = fs.read(&#39;result/api_template.md&#39;, &#39;utf8&#39;); template = template.replace(/{{title}}/g ,title); template = template.</description>
    </item>
    
    <item>
      <title>CasperJsでAlert、Confirmのイベントをキャッチする</title>
      <link>http://tatsuyano.github.io/2016/04/06/i-have-catched-alert-or-confirm-events-in-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 15:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/i-have-catched-alert-or-confirm-events-in-casperjs/</guid>
      <description>AlertやConfirmダイアログのOKボタン、キャンセルボタンを押下するには、casper.page.onAlert、casper.page.onConfirmを使う。
下の例では、購入ボタン(#buy)を押下すると、 Confirmダイアログが立ち上がり 商品を購入します。よろしいですか？とメッセージが表示される。 OKボタンを押下すると、商品購入処理が実行され 商品の購入が成功すれば 商品を購入しました、 ポイントが足りず購入に失敗すると ポイントが足りません とメッセージが表示される。
var casper = require(&#39;casper&#39;).create({clientScripts: [&#39;./src/includes/jquery.min.js&#39;]}); var point = 100; casper.start(); casper.open(&#39;http://192.168.33.10/shopping/cart&#39;).viewport(1024, 690); casper.then(function() { // AlertダイアログはOKボタンしかないので、返り値は必ずtrueを返す。 // 同一画面で、複数のダイアログを表示する場合は、引数のメッセージで分岐する this.page.onAlert = function(message) { if (message == &#39;商品を購入しました&#39;) { return true; } else if (message == &#39;ポイントが足りません&#39;) { return true; } }; // Confirmダイアログが立ち上がると発火する。 // trueを返すとOKボタンが押下され、falseを返すとキャンセルボタンが押下される this.page.onConfirm = function(message) { if (message == &#39;商品を購入します。よろしいですか？&#39;) { return true; } }; // #add_pointというテキストフィールドに100ポイントを入力し、#buyボタンを押下する this.</description>
    </item>
    
    <item>
      <title>CasperJSのajaxでPOSTの送信ができない</title>
      <link>http://tatsuyano.github.io/2016/04/06/if-you-can-not-send-post-in-ajax-of-casperjs/</link>
      <pubDate>Wed, 06 Apr 2016 12:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/04/06/if-you-can-not-send-post-in-ajax-of-casperjs/</guid>
      <description>地味にハマった。Chromeだとパラメータにtype:&amp;quot;POST&amp;quot;がなくてもPOSTでリクエストを送信してくれるが、 CasperJsのブラウザでは、type:&amp;quot;POST&amp;quot;を明示しないとGETでリクエストを送信してしまう。
$.ajax({ url: &amp;quot;/shopping/addpoint/&amp;quot;, type: &amp;quot;POST&amp;quot;, // &amp;lt;-このパラメータが必須 data: data, success: function(data, dataType) { var data_arr = JSON.parse(data); $(&#39;#point&#39;).text(data_arr[&#39;point&#39;]); alert(data_arr[&#39;msg&#39;]); } });  手動で操作するぶんには問題なく動いていたので(typeパラメータが設定されていなくても)、 CasperJs(自分で書いたソース)側に問題があると思い込んでしまった。
思い込みで判断せずに、まずはアクセスログを確認しようという教訓でした。</description>
    </item>
    
    <item>
      <title>SwiftからObjective-Cを呼ぶ方法</title>
      <link>http://tatsuyano.github.io/2016/01/06/how-to-call-objective-c-from-swift/</link>
      <pubDate>Wed, 06 Jan 2016 10:40:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/01/06/how-to-call-objective-c-from-swift/</guid>
      <description> Swiftで開発していて、Objective-Cのライブラリを使いたいケースがよくあります。 試しに、LUKeychainAccessというKeychain ServicesのラッパークラスををSwiftから呼び出したいと思います。 今回はLUKeychainAccessのインストールは、CocoaPodなどを使わず手動で行います
実装の流れ 実装の流れは以下のようになります。
 Swiftのプロジェクトを作成し、Objective-Cのライブラリを追加 ブリッジファイルを作成し、Objective-Cのライブラリのをimport SwiftのからObjective-Cのコードを呼び出す  Swiftのプロジェクトを作成し、Objective-Cのライブラリを追加 まずは、いつもどおりSwiftのプロジェクトを作成します。 テンプレートは「SingleViewApplication」、プロジェクト名は「LUKeychainFromSwift」で作成します。
次にダウンロードしたLUKeychainAccessのヘッダーファイルなどが入っているディレクトリ(LUKeychainAccess/LUKeychainAccess)をD&amp;amp;Dで、プロジェクトにコピーします。 今回はプロジェクト内にライブラリを追加したいので、Copy items if neededとCreate groupsにチェックを入れてください。
ライブラリを追加すると、自動でBuild Phases &amp;gt; Compile Sources にLUKeychainAccess.mとLUKeychainServices.mが追加されます。 追加されていない場合は手動で追加してください。
ブリッジファイルを作成し、Objective-Cのライブラリをimport ブリッジファイルを作成して、呼び出したいライブラリ(ヘッダーファイル)を指定(import)します。
File &amp;gt; New &amp;gt; File... &amp;gt; Header File からヘッダーファイルを選択し、ブリッジファイル「LUKeychainFromSwift-Bridging-Header.h」を作成します。 作成したブリッジファイルにimport先のライブラリ(LUKeychainAccess.h)を指定します。
※ 今回は自前でObjective-Cのクラスを実装しないので、手動でブリッジファイルを用意しましたが、 新規にObjective-Cのファイルを作成することで、自動でブリッジファイルを作成することが可能です。くわしくは下記サイトを確認してください。
 Bridging Headerのファイル作成と設定を簡単に行う手順  Build Setting に作成したブリッジファイルを指定する 次にBuild Setting &amp;gt; Swift Compiler - Code Generation &amp;gt; Objective-C Bridgeing Headerに作成したブリッジファイル名を設定します。 以上で設定は完了です。
SwiftのからObjective-Cのコードを参照する 設定が正常に完了していれば、コード補完が機能されます。
ためしに実行してみると、Keychain Servicesに保存した値が引っ張ってこれることが確認できます。
参考サイト  Objective-CプログラムをSwiftから呼び出す方法 Bridging Headerのファイル作成と設定を簡単に行う手順 How to call Objective C code from Swift Undefined symbols for architecture armv7:〜という警告が出たときの対策方法  </description>
    </item>
    
    <item>
      <title>aglioを使ってmarkdownからAPIドキュメントとStubを作成する</title>
      <link>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</link>
      <pubDate>Tue, 15 Sep 2015 15:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</guid>
      <description>仕事で簡単なAPIを実装する必要があったので、簡単にAPIドキュメントを公開したり、ドキュメントからStubを自動で用意する方法を調べてみた。
で、こちらの記事にやりたいことがまんま載っていた(ありがとうございます！)ので、 記事を参考に自分用のテンプレートを用意した。

Blueprint Blueprintの記述は下記をページを参照。
 API Blueprint Tutorial API Blueprint examples  
api-mockの起動をgulpに設定する 以下のように設定し、$ gulp mock
var gulp = require(&#39;gulp&#39;), aglio = require(&#39;gulp-aglio&#39;), ApiMock = require(&#39;api-mock&#39;); var TEMPLATE_FILES = [&#39;apidocs/*.md&#39;], LAYOUT_FILE = &#39;apidocs/layout.md&#39;, PUBLISHED_DIR = &#39;published&#39;; gulp.task(&#39;api-mock&#39;, function () { var mockServer = new ApiMock({ blueprintPath: PUBLISHED_DIR + &#39;/index.md&#39;, options: { port: 3000 } }); mockServer.run(); }); gulp.task(&#39;mock&#39;, [&#39;api-mock&#39;]);  
Vagrantで使う場合、ポートを開ける vagrant上からaglioとapi-mockを使うには、デフォルトだと8088と3000を開ける必要があるので、Vagrantファイルに以下の設定を加える。
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 3000, host: 3000 config.</description>
    </item>
    
    <item>
      <title>package化したboxを使うときによく出るエラー</title>
      <link>http://tatsuyano.github.io/2015/08/28/errors-out-when-using-to-package-the-box/</link>
      <pubDate>Fri, 28 Aug 2015 19:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/28/errors-out-when-using-to-package-the-box/</guid>
      <description>vagrant packageコマンドでパッケージ化したboxで仮想環境を作成(vagrant up)するさいによく出るエラーをまとめました。
An error occurred while downloading the remote file(モートファイルのダウンロード中にエラーが発生しました) An error occurred while downloading the remote file. The error message, if any, is reproduced below. Please fix this error and try again. Couldn&#39;t open file xxxxxxxxxxxx  解決方法
パッケージ(コピー)元のboxと同じ設定のbox(パッケージ化したboxで生成した仮想環境)がバッティングしている？ パッケージ元の仮想環境をvagrant destroyして削除する。 Authentication failure. Retrying&amp;hellip;(認証の失敗。再試行)  default: SSH username: vagrant default: SSH auth method: private key default: Warning: Connection timeout. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure.</description>
    </item>
    
    <item>
      <title>YAPC::Asia2015に行ってきた</title>
      <link>http://tatsuyano.github.io/2015/08/22/yapc-asia-2015/</link>
      <pubDate>Sat, 22 Aug 2015 08:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/22/yapc-asia-2015/</guid>
      <description>6年ぶりにYAPCに行ってきた。思っていた以上に混んでいて、 メイン会場以外での人気のセッションだと、部屋にも入れないほどの盛況ぶりだった。
前の会社の同僚も結構来ていてみたいだったので、顔を合わせたら声かけようと思っていたが、 見ていたセッションがまったくかぶらず、開発言語が変わると(自分はPerlから今はPHPをメインで使っている)、 こうも趣向が変わるのかと少し切なかった。
2日目は1日目の失敗を踏まえ、なるべく部屋を移動しないよう工夫してみたが、結局ランチセッションは逃した。
予定していたセッションは半分ぐらいしか聞けなかったが、セッションを聞いているうち、無性にプログラミングがしたくなったので途中で帰った。
セッションの自体はYoutubeなどにすぐに上がるし、 ただ見たいだけなら直接行くメリットは実はあまりないんだけど、こうやって熱に当てられることで頑張ろうと思えるところが、 イベントのイイトコなのかなと思う。
最後に楽しいイベント、ありがとうございました。</description>
    </item>
    
    <item>
      <title>台湾に旅行に行ってきた</title>
      <link>http://tatsuyano.github.io/2015/08/13/i-went-to-travel-to-taiwan/</link>
      <pubDate>Thu, 13 Aug 2015 14:40:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/13/i-went-to-travel-to-taiwan/</guid>
      <description>7月末に3泊4日で台湾旅行に行ってきた。 海外旅行は10年ぶりぐらいだったので、ツアーにするか迷ったけど、もういい大人なので、自由旅行で台北を中心に淡水、九份などを回ってきた。
台北 ガイド本などを見ると、台湾は親日で日本語も結構通じるみたいな事が書いてあったが、それは観光地など特定のポイントの話で、 それ意外は普通に日本語は通じなかった(当たり前か)。なのでチケットを買うにも四苦八苦したが、なんとかホテル(王朝大酒店)に到着。
写真では伝わらないかもしれないが、今まで一番大きなホテルでテンションがかなり上がった。
  
また平日ということもあり原チャの数が凄かった。日本の感覚で歩いていると事故りそうなので、注意が必要。
台北101 初日は雨が降っていたので、遠出はせずに先に台北101で買い物をすることにした。 高さ509メートルという世界第二位の高さは圧巻だった。大きな建物というだけで、十分観光名所として成立するのだなあとなんか関心した。
 
展望台から見た夜景。

臨江街観光夜市 台北101の近くの余市。「臭豆腐」という台湾のソウルフードの匂いがなかなかきつい。 旅行前は余市で臭豆腐を食べるつもりだったが、ちょっときつそうだったので断念。
 
龍山寺 有名なパワースポット？らしいお寺。参拝のルールが解らず、周りのやり方を眺めていたら、親切なおせっかいおばさんがやり方を教えてくれた。

中正紀念堂 とにかく広い。平日で人も少なかったこともあり、なおさら感じたのかもしれない。 広場で遠くを眺めていると、以前行った中国を思い出した。やはり台湾も中国なのだなあと改めて感じた。

この写真はgoogleフォトが自動で写真を連結してパノラマ化した写真。このクオリティならもう広角カメラは必要ないかもしれない。
淡水 台北からMRT(電車)で約一時間くらい。日本で言うところの横浜っぽいところ。夜景が綺麗ということで18時くらいまで粘ったがなかなか日は落ちず。

故宮博物院 主に陶器や、翡翠などの美術品を中心に展示している博物館。

九份 今回一番楽しみにしていた九份。元々炭鉱の町ということで、山の中の一部分に町がある感じ。
 
日が暮れてくると、幻想的な雰囲気になってくる。

感想 今回は台北を中心にひと通り回れてとても楽しかった。 初めは久々の海外旅行ということもあり、言葉が通じず苦労したが、2日目からは電車移動も覚え、かなり自由な旅行を満喫できた。
ただ英語がもう少しまともに聞き取れれば(話せれば)、もっと楽しかったなあと強く思った。 次回海外に行く時までに、もう少し英語を勉強しようと思う(小並感)。</description>
    </item>
    
    <item>
      <title>EmacsにternをインストールしてjQueryを補完する</title>
      <link>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</link>
      <pubDate>Thu, 06 Aug 2015 16:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</guid>
      <description> EmacsでjQueryの補完をするには、Ternというツールを使うことで実現できる。

Ternのインストール まずはTern本体をインストール。このTernとEmacs(tern-mode)が裏で通信しながら補完を行う。 Rubyでいうところのrobeと同じ形。
npm install -g tern  
tern、tern-auto-completeのインストール 自分はCaskで管理しているので、Caskファイルに追加し、インストール。 tern-auto-complateは「auto-complate」を使ってpopupで補完候補を表示する。
Cask
(depends-on &amp;quot;tern&amp;quot;) (depends-on &amp;quot;tern-auto-complete&amp;quot;)  「js2-mode」が起動したらtern-modeとtern-auto-complateも起動するよう設定する。
init_loader/03_javascript.el
(autoload &#39;js2-mode &amp;quot;js2-mode&amp;quot; nil t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\.js$&amp;quot; . js2-mode)) (add-hook &#39;js2-mode-hook (lambda () (tern-mode t))) (eval-after-load &#39;tern &#39;(progn (require &#39;tern-auto-complete) (tern-ac-setup)))  
tern-configの設定 ホーム直下に.tern-configというJsonファイルを設定する。ここで補完するライブラリなどを指定できる。
{ &amp;quot;libs&amp;quot;: [ &amp;quot;browser&amp;quot;, &amp;quot;jquery&amp;quot; ], &amp;quot;plugins&amp;quot;: { &amp;quot;node&amp;quot;: {} } }  
tern-modeの実行 正常にインストールが完了すると、以下のようにポップアップで補完が出るようになる。
 

参考サイト  Tern demo emacs で javascript なら js2-mode, tern-mode Emacs の JavaScript 開発環境を整備する(Tern編)  </description>
    </item>
    
    <item>
      <title>Emacsにflymake-jshintをインストールする</title>
      <link>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</link>
      <pubDate>Tue, 28 Jul 2015 11:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</guid>
      <description> 今読んでいる シングルページWebアプリケーション の サンプルコードが「JSLint」を使っていたので、インストールしようと思ったが 「JSHint」のほうが良さそうなのでEmacsに「flymake-jshint」をCask経由でインストールした。
JSHintのインストール まずはnpmでJSHint本体をインストール。
npm install -g jshint  
flymake-jshintのインストール 自分はCaskで管理しているので、Caskファイルに追加しインストール。 flymake-jshintは「js2-mode」に必須のようなので、インストールしていない場合は先にインストールする。
# Cask (depends-on &amp;quot;flymake-jshint&amp;quot;)  JSHintのパスを通し、js2-modeが起動したら、JSHintがロードするよう設定する。
# init_loader/03_javascript.el (setq exec-path (append exec-path &#39;(&amp;quot;~/.anyenv/envs/ndenv/shims/&amp;quot;))) (add-hook &#39;js2-mode-hook &#39;(lambda () (require &#39;flymake-jshint) (flymake-jshint-load)))  
JSHintの実行 正常にインストールが完了すると、タイポなどミスがあると以下のようにポップアップで警告が出るようになる。 うまくいかない場合はM-x flymake-jshint-loadで手動でJSHintを起動し、エラーを確認すること。
参考サイト  JSLint から JSHint をフォークした理由(翻訳) Emacsでflymake-jshintを利用してリアルタイムでのJavaScript文法チェックができるようにする  </description>
    </item>
    
    <item>
      <title>Hugoに独自ドメインを適応したので、sitemap.xmlを置換する</title>
      <link>http://tatsuyano.github.io/2015/07/26/replacing-sitemap-of-hugo/</link>
      <pubDate>Sun, 26 Jul 2015 21:15:01 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/26/replacing-sitemap-of-hugo/</guid>
      <description>Hugoに独自ドメインを適応したところ、自動生成されるsitemap.xmlが
Github pagesのURLで生成されていたので、deploy.shにsedコマンドを追加した。
sedコマンドで上書き置換(sed -i)したら、バックアップファイルが自動で生成
されるを止めるのはどうしたらいいのだろうか。。
 </description>
    </item>
    
    <item>
      <title>ブログをGhostからHugoに移行した</title>
      <link>http://tatsuyano.github.io/2015/07/25/switch-hugo/</link>
      <pubDate>Sat, 25 Jul 2015 18:15:01 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/25/switch-hugo/</guid>
      <description> 今までaws上でブログ(Ghost)を運用していたが、無料期間が終わったら月2000円
ちょっとかかったので、またGithub Pages上にブログを移行させた。
以前はGithub PagesでOctopressを使っていたが、最近はHugoというのが流行っているらしいので使ってみた。
記事が思いの外多かったので、エクスポート用のコードをrubyで書いた。
コードを書くのに思ったより時間がかかったが、久々にrubyを使って楽しかった。
 参考サイト  HugoとCircleCIでGitHub PagesにBlogを公開してみたら超簡単だった Hugoを使ってみたときのメモ Hugo + Github Pages + Wercker CI = ¥0（無料）でコマンド 1 発  </description>
    </item>
    
    <item>
      <title>Jsのスコープについて</title>
      <link>http://tatsuyano.github.io/2015/06/08/for-the-scope-of-the-js/</link>
      <pubDate>Mon, 08 Jun 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/08/for-the-scope-of-the-js/</guid>
      <description>グローバルスコープとローカルスコープしかない Jsには2種類のスコープしかない。グローバルスコープ内で宣言した変数をグローバル変数、ローカルスコープ内で宣言した変数をローカル変数という。
 スクリプト全体(トップレベル)で有効なグローバル変数  プログラム終了時までメモリを確保してしまう 多用すると、名前がバッティングする可能性がある   関数内でのみ有効なローカル変数  関数終了時にメモリが開放される 宣言時にvarをつけないと、*グローバル変数*として認識されてしまう   var hoge = &#39;global&#39;; // = グローバル変数 function func () { var fuga = &#39;local&#39;; // = ローカル変数、必ずvarをつける console.log(fuga); }  また、他言語のようにブロックスコープは存在しない。 if (true) { var hoge = &#39;block&#39;; } console.log(hoge); // = block ブロック内で宣言した変数も参照できてしまう  ## 変数の巻き上げ(hoisting) Jsには「変数の巻き上げ」という概念がある。 var hoge = &#39;global&#39;; function func() { console.log(hoge); // = undefined なぜか global と出力されない var hoge = &#39;local&#39;; console.</description>
    </item>
    
    <item>
      <title>Jsの関数について</title>
      <link>http://tatsuyano.github.io/2015/06/08/for-function-of-js/</link>
      <pubDate>Mon, 08 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/08/for-function-of-js/</guid>
      <description>Jsには主に「Function文」と「Function式(関数リテラル)」という２つの関数の宣言方法がある。 ※本当は「Functionコンストラクタ」という方法もあるが、あまり実用的ではないので省略。
// Function文 function func () { console.log(&#39;statements&#39;); } // Function式 var func = function func() { console.log(&#39;expression&#39;); }; //関数の呼び出し方法は同じ func();  違いは評価のタイミング。「Function文」は関数が静的な構造として宣言される。つまり、Jsの実行環境がコードを解析するタイミングで関数が静的に登録され、これにより「関数をどこで定義していても呼び出せる」ようになります。 func(); // = 宣言前に読み出してもエラーにならない function func () { console.log(&#39;statements&#39;); }  逆に「Function式」は、変数に代入された段階で評価される。そのため、宣言後に呼び出さないとエラーになる。 func(); // = TypeError: undefined is not a function var func = function func () { console.log(&#39;expression&#39;); }  ## 無名関数 「無名関数」とは、Function式の関数名を省略した形 。Function式を使う場合は、主に無名関数が使われる。 // 無名関数 var func = function () { console.log(&#39;expression&#39;); }; func();  ## 即時関数 「即時関数」とは、関数を()で囲んだ状態で実行することで、関数宣言と同時にその関数を実行する書き方です。 // 即時関数 (function () { console.</description>
    </item>
    
    <item>
      <title>webpackを使ってes6-promiseを読み込む</title>
      <link>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</link>
      <pubDate>Wed, 03 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</guid>
      <description>最近勉強中のPromiseですが、現段階(15/06/03)ではIE11に対応していません。 PromiseをIEに対応させるためには、es6-promiseというNode.jsのライブラリをフロントエンドで読み込む必要があります。
しかしNode.jsのライブラリは、そのままではフロントエンドで使えないので、 webpackでフロントエンド向けにBuildする必要があります。
-webpackは他にも多くの機能がありますが、ここではNode.jsのモジュールをフロントエンドで使うため方法のみにフォーカスします。-
webpackを使うための準備 まずは本体のインストール。 $ npm install webpack -g 
次に適当なディレクトリを作成します。 $ mkdir webpack-sample &amp;amp;&amp;amp; cd webpack-sample 
今回使うライブラリ(es6-promise)をディレクトリにインストールします。 $ npm install es6-promise 
ライブラリはglobalではなく、ディレクトリ直下(/webpack-sample/node_modules)にインストールしてください。
JsのBuild方法 次に(Node.jsの)ライブラリを読み込むJs(main.js)をビルドします。
$ webpack main.js bundle.js Hash: de7b4a8a87c6e52d026f Version: webpack 1.9.10 Time: 109ms Asset Size Chunks Chunk Names bundle.js 40.1 kB 0 [emitted] main [0] ./main.js 255 bytes {0} [built] + 6 hidden modules  BuildしたJs(bundle.js)は、main.jsが依存しているライブラリ(es6-promise等)も含んだ一つのファイルに圧縮されます。 このJsのみをHTMLに読み込むだけで、Node.jsが利用できるようになります。 &amp;lt;script&amp;nbsp;src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  main.js &#39;use strict&#39; var Promise = require(&#39;es6-promise&#39;).</description>
    </item>
    
    <item>
      <title>Promiseを使って、非同期処理を任意のタイミングで実行する</title>
      <link>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</link>
      <pubDate>Tue, 02 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</guid>
      <description> Promiseを使って、非同期処理を任意の順番で実行するサンプル。 ES5でも順番を指定して実行する事ができるが、Promiseを使うと綺麗に実装できる。
 参考サイト  JavaScript Promiseの本 JavaScript Promises es6-promise Babel repl  関連する記事  webpackを使ってes6-promiseを読み込む  </description>
    </item>
    
    <item>
      <title>Rails4の非公開情報をdotenvで管理する</title>
      <link>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</link>
      <pubDate>Wed, 13 May 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</guid>
      <description>TwitterのAPIキーなど、公開したくない情報をどこに設定すればいいか調べたところ、 config/secrets.ymlに設定して、.gitignoreして使うようなので、設定してみました。
# config/secrets.yml development: twitter_api_key: hogefuga..... # 呼び出し側 key = Rails.application.secrets.twitter_api_key  しかしherokuを利用する場合、この`secrets.yml`というファイル自体必須なので、`.gitignore`するわけにはいきません。 * [How to solve error &#34;Missing secret_key_base for production environment&#34; on Heroku](http://stackoverflow.com/questions/23180650/how-to-solve-error-missing-secret-key-base-for-production-environment-on-h) ## dotenv-railsの設定 そこで検討した結果、`dotenv-rails`というGemを使うことにしました。 このGemを使うと、アプリケーションごとに環境変数(非公開情報)が設定できるようになり、 `secrets.yml`に公開したくない情報を設定しなくても良くなります。 # Gemfile gem &#39;dotenv-rails&#39;  まず、アプリケーションのディレクトリの直下に.envというファイルを作成し、環境変数を設定します。
# .env TWITTER_API_KEY=&#34;hogehoge&#34; TWITTER_API_SECRET=&#34;fugafuga&#34;  読み出す時は、以下のように指定します。 puts ENV[&amp;lsquo;TWITTER_API_KEY&amp;rsquo;] # =&amp;gt; &amp;ldquo;hogehoge&amp;rdquo; 
最後に.envファイルを.gitignoreします。
以上で完了です。
herokuに環境変数を設定する ちなみに、herokuに環境変数を設定するには以下のように指定します。
$ heroku config:add TWITTER_API_KEY=&amp;ldquo;hogehoge&amp;rdquo; &amp;ndash;app アプリ名 $ heroku config:add TWITTER_API_SECRET=&amp;ldquo;fugafuga&amp;rdquo; &amp;ndash;app アプリ名  参考サイト  Rails4.1のsecrets.ymlはfigaroと違うの？ Rails セキュリティガイド 10 利用環境のセキュリティ  Rails4.</description>
    </item>
    
    <item>
      <title>jquery-readyselectorとbower-railsを使って、ページ単位でJsを管理する</title>
      <link>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</link>
      <pubDate>Tue, 28 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</guid>
      <description>ページごとに読み込むJsを制限したいなあと思って、ググってみたところいろいろ出てくる。 ただ、今回はできるかぎりシンプルにやりたかったのでjquery-readyselectorというJqueryプラグインを使うことにした。
このプラグインはBowerで管理されている(Node)モジュールみたいなので、まずはbower-railsをインストールして、 bower-rails経由でjquery-readyselectorをインストールすることにした。
bower-railsを使うには、事前にBowerをインストールしておく必要がある
bower-railsのインストール まずはGemfileの設定し、インストール。
$ cat Gemfile gem &amp;quot;bower-rails&amp;quot; $ bundle install  
次に、Nodeモジュールを管理するための設定ファイル(Gemfileみたいなもの)の形式を決める。 形式はjson形式のbower.jsonの場合か、
$ rails g bower_rails:initialize json create bower.json create config/initializers/bower_rails.rb  DSL形式のBowerfileのどちらか選べる。今回はこちらの方法を選択。
$ rails g bower_rails:initialize create Bowerfile create config/initializers/bower_rails.rb   bower-railsの設定はconfig/initializers/bower_rails.rbで行う。 今回は特に設定なし(デフォルトのまま)。
BowerRails.configure do |bower_rails| # Tell bower-rails what path should be considered as root. Defaults to Dir.pwd # bower_rails.root_path = Dir.pwd # Invokes rake bower:install before precompilation. Defaults to false # bower_rails.</description>
    </item>
    
    <item>
      <title>rails_configで定数を管理する</title>
      <link>http://tatsuyano.github.io/2015/04/08/manage-constant-in-rails_config/</link>
      <pubDate>Wed, 08 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/08/manage-constant-in-rails_config/</guid>
      <description>環境ごとに定数を管理したい時は、rails-config を使うのが便利。
インストール Gemfileに下記を追加しbundle install
# Gemfile gem &#39;rails_config&#39;  bundle install後、rails_config の初期設定を実行
$ rails g rails_config:install create config/initializers/rails_config.rb create config/settings.yml create config/settings.local.yml create config/settings create config/settings/development.yml create config/settings/production.yml create config/settings/test.yml append .gitignore  ## 環境ごとに読み込まれるファイル  環境(env) ファイル名   共通 config/settings.yml   (ローカルの)開発環境 config/settings.local.yml   開発環境 config/settings/development.yml   テスト環境 config/settings/test.yml   本番環境 config/settings/production.yml   開発環境で同じ定数を読み込む場合、優先度は下記の順番でなります。 1. `config/settings.local.yml` 2. `config/settings/development.yml` 3. `config/settings.yml` ちなみにこの`config/settings.local.yml`は、gitignore の対象ファイルです。 ※ `rails g rails_config:install`実行時に追加されます。 config/settings.</description>
    </item>
    
    <item>
      <title>Railsでページごとのscssを管理する方法</title>
      <link>http://tatsuyano.github.io/2015/04/02/how-to-manage-the-page-specific-scss-in-rails/</link>
      <pubDate>Thu, 02 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/02/how-to-manage-the-page-specific-scss-in-rails/</guid>
      <description>GitHubにあるREADME.mdを参考に、bootstrap-sassをインストールしてみました。
application.scssの設定 するとapplication.scssにimportするファイルは、bootstrapとbootstrap-sprocketsの2ファイルのみとなっています。
// &#39;bootstrap-sprockets&#39; must be imported before &#34;bootstrap&#34; and &#34;bootstrap/variables&#34; @import &#34;bootstrap-sprockets&#34;; @import &#34;bootstrap&#34;;&#34;  そのため、このままですと、ページごとに用意したscssファイルを読み込むためには、 毎回application.scssにimportする必要がでてきてしまいます。
デフォルトのapplication.css 通常、設定なしで rails new を行うと、application.css には、
$ cat app/assets/stylesheets/application.css /* *= require_tree . # 指定されたディレクトリ以下のすべてを再帰的にインクルード(順番の保証なし) *= require_self # require_self呼び出しが行われたその場所にCSSファイルがあれば読み込みます */  というディレクティブが設定され、stylesheetsディレクトリ以下にcssを置くと、 自動で読み込まれる(順番は保証されない)ようになります。
RailsでSassファイルをどう管理するべきか いろいろ方法は有ると思うのですが、今回はこちらの記事を参考に ディレクトリ構成を作ってみました。
まず、読み込み順を守る必要のあるファイル(bootstrapとbootstrap-sprockets)は、そのままapplication.scssに。
ページ個々のscssに関しては、app/assets/stylesheets/partialsディレクトリを生成し、そちらに配置しておきます。
partialsディレクトリでは、読み込み順が保証されないので、注意してください。 # app/assets/stylesheets/application.scss @import &amp;ldquo;bootstrap-sprockets&amp;rdquo;; @import &amp;ldquo;bootstrap&amp;rdquo;; @import &amp;ldquo;partials/*&amp;ldquo;; // glob importing 
※ sass-railsのバージョンが古いと、glob importing には対応していないので、動かない場合はバージョンを上げてみて下さい。
partialsディレクトリにファイルがないとエラーになる ただこのままの状態だと、partialsディレクトリにファイルがないので、File to import not found or unreadableエラーが出てしまいます。 それを防ぐために、とりあえずブランクのscssファイルをディレクトリに配置するようにしました。</description>
    </item>
    
    <item>
      <title>アプリケーションテンプレートを使って、プロジェクトのひな形を作る</title>
      <link>http://tatsuyano.github.io/2015/03/31/use-rails-application-templates/</link>
      <pubDate>Tue, 31 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/31/use-rails-application-templates/</guid>
      <description>Railsアプリを作っていると、ある程度決まったRuby Gemを使うようになってきたり、 同じ設定(config周りとか)を繰り返すようになってきます。
そこでRailsのアプリケーションテンプレート機能を使うと、 そういった決まった作業をコード化することができるようになります。
今回は、主にデータベースをPostgreSQL、テストFWをRSpec、CSSFWにTwitterBootStrapの初期設定を行い、最後にgit commit -m &#39;Initial commit&#39;するまでのアプリケーションテンプレートを作ってみたいと思います。
作業の流れ  templateファイルを作成 templateファイルをGitHubなどにpush templateファイルを使って、Railsアプリを作ってみる  template.rb コードを実際見てもらえばわかるように、templateファイルといっても特別なものではなく、 Gemfileと同じように、必要なGemを指定し、実際の作業を明文化したファイルになります。
※ 最新のソースはこちら
# -*- coding: utf-8 -*- @app_name = app_name gem &#39;rails&#39;, &#39;4.2.0&#39; gem &#39;pg&#39; gem &#39;sass-rails&#39;, &#39;~ 5.0&#39; gem &#39;uglifier&#39;, &#39;= 1.3.0&#39; gem &#39;coffee-rails&#39;, &#39;~ 4.1.0&#39; gem &#39;jquery-rails&#39; gem &#39;turbolinks&#39; gem &#39;jbuilder&#39;, &#39;~ 2.0&#39; gem &#39;annotate&#39; # modelクラスにスキーマ情報の注釈をつける gem &#39;bootstrap-sass&#39; # bootstrap gem_group :development, :test do gem &#39;spring&#39; gem &#39;pry-rails&#39; gem &#39;pry-byebug&#39; gem &#39;better_errors&#39; gem &#39;binding_of_caller&#39; gem &#39;rspec-rails&#39; gem &#39;guard-rspec&#39; # railsでguardを使うためのGem gem &#39;spring-commands-rspec&#39; , &#39;~ 1.</description>
    </item>
    
    <item>
      <title>Rails4でBootstrap3を導入(sass版)</title>
      <link>http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/</link>
      <pubDate>Tue, 31 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/31/introduced-bootstrap3-to-rails4-sass/</guid>
      <description> 以前、twitter-bootstrap-rails をつかってBootstrap3を導入という記事を書いたんですが、 Twitter社が提供しているbootstrap-sassのほうが導入が簡単だったので、今後はこちらを使っていきたいと思います。
設定 まずはGemfileの設定から。
cat Gemfile gem &amp;lsquo;bootstrap-sass&amp;rsquo;, &amp;lsquo;~&amp;gt; 3.3.4&amp;rsquo; gem &amp;lsquo;sass-rails&amp;rsquo;, &amp;lsquo;&amp;gt;= 3.2&amp;rsquo;
$ bundle install  application.css を削除し、新たに application.sass を生成します。
$ rm app/assets/stylesheets/application.css $ cat &amp;gt; app/assets/stylesheets/application.scss @import &amp;ldquo;bootstrap-sprockets&amp;rdquo;; @import &amp;ldquo;bootstrap&amp;rdquo;;  application.js の設定を変更します。読み込み順に注意してください。
$ cat &amp;gt; app/assets/javascripts/application.js //= require jquery //= require bootstrap-sprockets  これでGlyphicons(Webフォント)も使えるようになります。便利ですね。
参考サイト  twbs/bootstrap-sass 全部はいらないよね？bootstrap-sassをカスタマイズして使う方法  関連する記事  Rails4でBootstrap3を導入  </description>
    </item>
    
    <item>
      <title>ActiveRecordのモデルに注釈を付ける</title>
      <link>http://tatsuyano.github.io/2015/03/30/i-annotate-model-of-activerecord/</link>
      <pubDate>Mon, 30 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/30/i-annotate-model-of-activerecord/</guid>
      <description>annotate を使うと、rake db:migrate をしたタイミングで、自動でmodelクラスの先頭に、スキーマ情報のコメントを挿入してくれるようになります。
設定 まずはインストール。Gemfileに追加後 bundle install します。
cat Gemfile gem &#39;annotate&#39; $ bundle install  `rake db:migrate`をしたタイミングで自動で、スキーマ情報を挿入するためには、 `annotate:install` します。 $ rails g annotate:install create lib/tasks/auto_annotate_models.rake  自動で挿入したくない場合は、annotate:installはせずに、modelクラスを更新した都度、bundle exec annotateを行って下さい。 $ bundle exec annotate  確認 試しにbooksモデルを作成し、コメントが挿入されるか確認してみます。
$ rails g scaffold Book title:string price:integer $ rake db:migrate == 20150330032832 CreateBooks: migrating ====================================== &amp;ndash; create_table(:books) -&amp;gt; 0.0090s == 20150330032832 CreateBooks: migrated (0.0094s) =============================
Annotated (1): Book  modelクラスにスキーマ情報が挿入されていることを確認できます。
$ cat app/models/book.</description>
    </item>
    
    <item>
      <title>Rubyの標準ライブラリの構成について</title>
      <link>http://tatsuyano.github.io/2015/03/27/standard-library-of-ruby/</link>
      <pubDate>Fri, 27 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/27/standard-library-of-ruby/</guid>
      <description>$LOAD_PATHについて調べていた時に、Rubyの標準ライブラリの ディレクトリ構成の意味をわかっていない事にきづいたので、調べてみました。
$ ruby -e &amp;lsquo;puts $:&amp;rsquo; $HOME/.anyenv/envs/rbenv/rbenv.d/exec/gem-rehash $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0/x86_64-linux $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0/x86_64-linux $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0/x86_64-linux  大きくは4つの階層に分かれていて、以下のような構成になっています。
$ cd $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby
$ tree -d -L 1 . ├── 2.2.0 # 標準ライブラリ ├── gems # gemファイルの置き場 ├── site_ruby # ユーザのライブラリ置き場 └── vendor_ruby # ベンダー用のライブラリ  また、gemsディレクトリ意外のディレクトリには、それぞれ環境依存のソースを置くディレクトリがあります。 ※ 自分の環境はCentOSなので、x86_64-linuxという名前のディレクトリになっています。
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0/x86_64-linux # soファイルなど、環境に依存したソース
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/site_ruby/2.2.0/x86_64-linux # 環境依存
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0 $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/vendor_ruby/2.2.0/x86_64-linux # 環境依存  参考サイト * Rubyのライブラリの標準ディレクトリ構成を考えて、自作ライブラリを何処に置くべきか思案する</description>
    </item>
    
    <item>
      <title>ファイルを読み込む時は require_relative を使う</title>
      <link>http://tatsuyano.github.io/2015/03/27/use-require_relative-when-you-read-file/</link>
      <pubDate>Fri, 27 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/27/use-require_relative-when-you-read-file/</guid>
      <description> こちら[requireとrequire_relativeの違いとは？] に詳しく書いてあるのですが、
ファイルを読み込む時はrequireではなく、require_relativeを使いましょう(Ruby1.9.2以降で、かつ$LOAD_PATHに含まれていない場合)。
Ruby1.9.2以降、$LOAD_PATHにカレントディレクトリが含まれなくなったため、 例えば、同じ階層のfile.rbを読み込もうと思ってrequire &#39;file&#39;と書いたらエラーになります。
$HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;: cannot load such file -- file (LoadError)  その回避方法として、require ./file　と相対パスで書くことも可能ですが、 違う階層から読み込むと結局エラーになってしまいます。
どうしてもrequireと使いたい場合は、require する前に、 カレントディレクトリを$LOAD_PATHに追加する方法があります。
$:.unshift File.dirname(__FILE__) # ロードパスにカレントディレクトリを追加 require &#39;file&#39;  因みに$:は$LOAD_PATHの別の書き方です。
 $LOAD_PATH &amp;hellip; プログラム実行時に読み込まれるパス $: &amp;hellip; $LOAD_PATHの別の書き方  参考サイト  requireとrequire_relativeの違いとは？ Rubyのrequireとrequire_relative  </description>
    </item>
    
    <item>
      <title>if $0 == __FILE__のコードの意味</title>
      <link>http://tatsuyano.github.io/2015/03/26/meaning-of-the-code-dollar0-equal-__file__/</link>
      <pubDate>Thu, 26 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/26/meaning-of-the-code-dollar0-equal-__file__/</guid>
      <description>最近こちらの記事を読んでいて、 以下のコードの意味が解らなかったので調べてみました。
if $0 == __FILE__ # 何らかの処理 end  まず結論から言うと「requireされた時は実行したくないけど、スクリプトファイルを直接実行した時は処理したい」 場合に使います。ややこしいですね。 主には簡易なテストコードやサンプルコードを書く場合に使われるようです。 ただ、なぜ上記のコードがそのような動きになるのか解らなかったのでもう少し調べてみました。 * `__FILE__` ... 実行中のファイル名(相対パス)を返します。フルパスが必要な場合は File.expand_path(\_\_FILE\_\_) とする必要があります。 * `$0` ... 直接実行したファイル名(相対パス)を返します。 [こちらのコード](http://qiita.com/naoty_k/items/f84b2a9034a3bb3bfcb2)とほぼ同じですが、 # target_file.rb puts &#34;__FILE__ = #{__FILE__}&#34; puts &#34;$0 = #{$0}&#34; if $0 == __FILE__ puts &#34;Sample codeを実行&#34; else puts &#34;Sample codeは実行されない&#34; end  target_file.rb自体を直接実行すると、 $0と__FILE__に同じ値が入ることになるので、Sample codeが実行されます。
$ ruby target_file.rb __FILE__ = filename.rb $0 = filename.rb Sample codeを実行  しかし、target_file.rbをライブラリとして使う(requireする)場合などは、`$0` と `__FILE__` の値が異なるので、Sample codeは実行されません。 # require_file.</description>
    </item>
    
    <item>
      <title>emacsにrcodetoolsをインストールして、返り値をコメントに出力する</title>
      <link>http://tatsuyano.github.io/2015/03/25/install-rcodetools-to-emacs/</link>
      <pubDate>Wed, 25 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/25/install-rcodetools-to-emacs/</guid>
      <description> 返り値をコメントに出力したい場合、rcodetoolsのxmpfilterを使うことで可能になります。
3 + 4 ↓ 3 + 4 # =&amp;gt; 7  インストール まずはrcodetools本体をインストールします。
$ gem install rcodetools  次にインストールしたgemの中にあるrcodetools.elをemacsのload-pathが通っている階層にコピーします。
$ cp -a $HOME/.anyenv/envs/rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/rcodetools-0.8.5.0/rcodetools.el $HOME/src/github.com/tatsuyano/dot.emacs.d/init_loader/  emacsの設定 今回は、M-pにxmpfilterを割り当てます。
(require &amp;lsquo;rcodetools) (define-key ruby-mode-map (kbd &amp;ldquo;M-p&amp;rdquo;) &amp;lsquo;xmp)  操作方法  まずは返り値を出力したい行で、M-;(comment-dwim)を2回実行すると「# =&amp;gt;」というコメントがソースに出力されます。 その状態で、M-p(xmp)を実行すると、コメントに返り値が出力されます。  ちなみにM-;はAltを押しながら;を押下です。
3 + 4 ↓ 3 + 4 # =&amp;gt; 1. comment-dwimを2回実行 ↓ 3 + 4 # =&amp;gt; 7 2. xmpfilterを実行  ※ 環境によっては、gems/rcodetools/bin/をPATHに加える必要があるようなので、動かない場合は試してみてください。
参考サイト  EmacsでRubyの開発環境をさらにめちゃガチャパワーアップしたまとめ Emacs で rcodetools を使って &amp;ldquo;=&amp;gt;&amp;rdquo; で値を表示する  </description>
    </item>
    
    <item>
      <title>WerckerのBuild結果をSlackに通知する</title>
      <link>http://tatsuyano.github.io/2015/03/13/notification-build-results-of-wercker-to-slack/</link>
      <pubDate>Fri, 13 Mar 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/13/notification-build-results-of-wercker-to-slack/</guid>
      <description>Werckerに登録したアプリケーションのBuild結果をSlackのwebHookという機能を使うことで、Slackに通知することができるようになります。
SlackにWebHookを追加する  サイドメニューの Configure Integrations を押下してください。  Incoming WebHooksを追加してください。  どのチャンネルに追加するか選択してください。  URLをコピーし、Save Settingsを押下します。   WerckerにSlackのTOKENを設定する 先ほどコピーしたURLの一番後ろについているパラーメータがSLACK_TOKENになります。
https://hooks.slack.com/services/aaaaa/bbbbb/[SLACK-TOKEN]
SLACK_TOKENはProtectedにチェックした状態でSAVEしてください。Protectedをチェックすると、ログ上で値が非表示になります。 wercker.ymlにafter-stepsを追加 Build後(build: after-steps)に、Slackに通知するようwercker.ymlを設定します。subdomainはSlackのURLhttp://hoge.slack.comのhogeの部分にあたります。 box: wercker/ruby services: - wercker/postgresql build: steps: - bundle-install - rails-database-yml: service: postgresql - script: name: echo ruby information code: | echo &amp;ldquo;ruby version $(ruby &amp;ndash;version) running!&amp;rdquo; echo &amp;ldquo;from location $(which ruby)&amp;rdquo; echo -p &amp;ldquo;gem list: $(gem list)&amp;rdquo; - script: name: Set up db code: RAILS_ENV=test bundle exec rake db:schema:load - script: name: Run RSpec code: bundle exec rspec # ここから追加 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; after-steps: - sherzberg/slack-notify: subdomain: hoge token: $SLACK_TOKEN channel: &amp;ldquo;#general&amp;rdquo; username: wercker icon_url: https://avatars3.</description>
    </item>
    
    <item>
      <title>Werckerを使ってHerokuにデプロイする</title>
      <link>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</link>
      <pubDate>Fri, 13 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/13/deploying-to-heroku-using-wercker/</guid>
      <description>Bitbucket(プライベートリポジトリ)に用意したアプリケーション(Rails)を WerckerでBuildし、HerokuにDeployした時の備忘録です。
前提  Bitbucketにアプリケーションが用意済み Werckerにアカウントを持っていて、Bitbacketと連携済み Herokuにアカウントを持っていて、Bitbacketと連携済み  BitbacketのリポジトリをWerckerに登録する  プロバイダを選択します。  リポジトリを選択します。  リポジトリへの接続方法を選択します。  wercker.ymlの内容が自動生成されます。wercker.ymlは後で新規に作成するので、ここではコピーせずに次に進みます。  Make my app publicにチェックを入れると、後ほど出てくるbadgeをクリックしたさいに、deploy情報を公開できるようになります(今回はチェックしません)。   これで、WerckerにBitbacketのリポジトリの登録が完了しました。
wercker.ymlを作成し、アプリケーションをBuildする WerckerでアプリケーションをBuild、Deployするための設定は、wercker.ymlに記載します。wercker.ymlは、アプリケーションのRootディレクトリ直下(Gemfileなどが置いてある階層)に置いてください。
wercker.yml box: wercker/ruby services: - wercker/postgresql build: steps: - bundle-install - rails-database-yml: service: postgresql - script: name: echo ruby information code: | echo &amp;ldquo;ruby version $(ruby &amp;ndash;version) running!&amp;rdquo; echo &amp;ldquo;from location $(which ruby)&amp;rdquo; echo -p &amp;ldquo;gem list: $(gem list)&amp;rdquo; - script: name: Set up db code: RAILS_ENV=test bundle exec rake db:schema:load - script: name: Run RSpec code: bundle exec rspec deploy: steps: - heroku-deploy: install-toolbelt: true - script: name: Update database code: heroku run rake db:migrate &amp;ndash;app $APP_NAME - script: name: Update assets code: heroku run rake add_static_assets &amp;ndash;app $APP_NAME  生成したwercker.</description>
    </item>
    
    <item>
      <title>RailsでPostgreSQLを使う</title>
      <link>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</link>
      <pubDate>Mon, 09 Mar 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/03/09/i-use-postgresql-with-rails/</guid>
      <description>アプリをHerokuにdeployしたらSQLエラーが出てしまったので、 ローカルでの開発もPostgreSQLを使ってみようと思います。
PostgreSQLのインストール ちなみにインストール先のOSはamazon-linuxです。 $ sudo yum -y install postgresql93 $ sudo yum -y install postgresql93-devel $ sudo yum -y install postgresql93-server
$ psql &amp;ndash;version psql (PostgreSQL) 9.3.6
データベースの初期化 $ sudo /etc/init.d/postgresql93 initdb
データベースの起動 $ sudo /etc/init.d/postgresql93 start
サーバー起動時にpostgresの起動設定 $ sudo chkconfig postgresql93 on  PostgreSQLアカウントの設定 まずは PostgreSQL にスーパーユーザ(postgres)で接続し、パスワードを設定します。 $ sudo -u postgres psql postgres=# alter role postgres with password &amp;lsquo;hogehoge&amp;rsquo;; # alter role [user_name] with password &amp;lsquo;[password]&amp;lsquo;;  データベースの作成 わかりやすいようにデータベース名とRailsのアプリ名(myapp)を同じにします。 ついでにテスト(RSpec)用のデータベースも作成しておきます。 postgres=# create database myapp owner postgres; # create database [database_name] owner [user_name]; postgres=# create database myapp_test owner postgres;  アクセス権限の設定 Rails から PostgreSQL に接続するために、pg_hba.</description>
    </item>
    
    <item>
      <title>Rails4をherokuにdeployする</title>
      <link>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</link>
      <pubDate>Thu, 19 Feb 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/19/deploy-the-rails4-to-heroku/</guid>
      <description>備忘のため、Rails4をheroku上にdeployする方法をメモしておきます。
herokuのアカウントの作成、及び鍵の設定は終っているものとします。
$ ruby -v 2.2.0p0 $ rails -v 4.2.0  ## サンプルアプリの作成 まずはherokuにdeployするアプリを生成 $ rails new heroku-rails $ cd heroku-rails  herokuではsqlite3はサポートされていないので、productionからは外すようにする。今回productionで使うDBは、heroku標準のpostgressを選択。 また、Rail4から`rails_12factor`が必須になったらしいので設定。 Gemfile group :development do gem &#39;sqlite3&#39; end group :production do gem &#39;pg&#39; gem &#39;rails_12factor&#39; end  開発環境では、postgressを使っていないので、`--without production`をつけて productionでのみ必要なGemは開発環境には入れないようにする。 $ bundle install --without production  開発環境でも`pg`を使う場合は、以下のようにpostgress本体と、develをインストールする。 $ sudo yum install -y postgresql-devel $ sudo yum install -y postgresql $ gem install pg  ここまでで空のアプリができたので、いったん`git commit`。 $ git init $ git add .</description>
    </item>
    
    <item>
      <title>Rails4でのデバッグ方法</title>
      <link>http://tatsuyano.github.io/2015/02/18/how-to-debug-in-rails4/</link>
      <pubDate>Wed, 18 Feb 2015 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/how-to-debug-in-rails4/</guid>
      <description>最近覚えたデバッグ方法を、備忘のためにまとめておきます。
ログに出力する ActiveSupport::Logger#debugメソッドを使って、rails serverの標準出力にデバッグコードを出力する。
logger.debug(&amp;lsquo;Hello world&amp;rsquo;)  SQLを出力する ActiveRecord::Relation#to_sqlメソッドでSQLを出力する。
User.all.to_sql #=&amp;gt; SELECT &amp;ldquo;users&amp;rdquo;.* FROM &amp;ldquo;users&amp;rdquo;  ブレークポイントを設定する コード内にbinding.pryというコードを書くと、そこまで実行中のプログラムが中断され、 以降をコンソール上からデバッグできます。
Gemfile gem &amp;lsquo;pry-rails&amp;rsquo;, group: [:development, :test] gem &amp;lsquo;pry-byebug&amp;rsquo;, group: [:development, :test]  $ bundle install $ rails server  中断したい箇所にbinding.pryを記述。
def index @users = User.all
binding.pry # &amp;lt;- This!
logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 1 &amp;mdash;&amp;mdash;-&amp;rsquo;) logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 2 &amp;mdash;&amp;mdash;-&amp;rsquo;) logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 3 &amp;mdash;&amp;mdash;-&amp;rsquo;) logger.debug(&amp;lsquo;&amp;mdash;&amp;mdash; 4 &amp;mdash;&amp;mdash;-&amp;rsquo;) end  ブレークポイントの移動はnext,step,exitで行う。
7: def index 8: @users = User.</description>
    </item>
    
    <item>
      <title>htopコマンドをインストール</title>
      <link>http://tatsuyano.github.io/2015/02/18/how-to-install-htop/</link>
      <pubDate>Wed, 18 Feb 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/how-to-install-htop/</guid>
      <description> centos6とamazon-linuxにhtopをインストールしたときのメモです。
yumでインストール # wget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
rpm -Uhv rpmforge-release*.rf.x86_64.rpm yum &amp;ndash;enablerepo=epel install -y htop  参考サイト  top の代わりに htop を使ってみた。 Install htop in CentOS htopを使ってサーバのプロセスの状態を詳しく見る方法 htopのCPU付加とメモリ使用量の色の意味  </description>
    </item>
    
    <item>
      <title>Rails4でBootstrap3を導入</title>
      <link>http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/</link>
      <pubDate>Wed, 18 Feb 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/02/18/introduced-bootstrap3-to-rails4/</guid>
      <description>※ Bootstrapをより簡単に導入する(sass版)記事 もあるので、そちらも参照してみてください。
twitter-bootstrap-railsというGemを使って、Rails4にBootstrap3を導入します。
$ rails -v Rails 4.1.1 $ ruby -v ruby 2.1.0p0  サンプルアプリの用意 まずはbootstrap3という名前のサンプルアプリを生成し、次に確認用のページを生成します。
$ rails new bootstrap3 $ cd bootstrap3 $ rails g scaffold Book title:string price:integer $ rake db:migrate $ rails server  Gemfileの設定 Bootstrapのcssがlessで書かれているので、Railsでもlessが扱えるようにし、さらにlessをコンパイルするためのGemもインストールします。
bootstrap3/Gemfile gem &amp;lsquo;therubyracer&amp;rsquo; # javascript runtime。lessをコンパイルするために必要 gem &amp;lsquo;less-rails&amp;rsquo; # Railsでlessを使えるようにする。Bootstrapがlessで書かれているため gem &amp;lsquo;twitter-bootstrap-rails&amp;rsquo; # Bootstrapの本体  Gemを反映します。 $ bundle install  Bootstrapの設定 まずはBootstrapのJsとCssを生成します。
$ rails g bootstrap:install insert app/assets/javascripts/application.js create app/assets/javascripts/bootstrap.</description>
    </item>
    
    <item>
      <title>phpenvを導入する</title>
      <link>http://tatsuyano.github.io/2014/12/04/how-to-install-and-setup-phpenv/</link>
      <pubDate>Thu, 04 Dec 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/12/04/how-to-install-and-setup-phpenv/</guid>
      <description>phpもanyenvで管理できるようなので入れてみた。
anyenv本体のインストールはこちらを参照してください。
phpenvのインストール $ anyenv install phpenv $ source $HOME/.zshrc  phpenv には2種類あるらしく、anyenv でインストールされるのは phpenv/phpenv。 この phpenv/phpenv だと、anyenv だとうごかなかったので、CHH/phpenv に差し替える必要がある。
phpenvの差し替え $ cd ~/.anyenv/envs/phpenv $ git clone https://github.com/CHH/php-build.git plugins/php-build $ rm libexec/phpenv-install 
### PHPのインストール 結構必要なライブラリが多い。面倒なので、参考サイトに記載のあったライブラリを全部いれた。 $ sudo yum install -y re2c libxml2-devel openssl-devel libcurl-devel libjpeg-turbo-devel libpng-devel libmcrypt-devel readline-devel libtidy-devel libxslt-devel $ phpenv install 5.5.17 $ phpenv global 5.5.17 $ source $HOME/.zshrc $ which php /home/noguchi/.anyenv/envs/phpenv/shims/php  php.ini も anyenv 以下に作成される /home/noguchi/.</description>
    </item>
    
    <item>
      <title>require_onceを使わず、Composerを使う</title>
      <link>http://tatsuyano.github.io/2014/12/02/without-using-require-once-use-composer/</link>
      <pubDate>Tue, 02 Dec 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/12/02/without-using-require-once-use-composer/</guid>
      <description>毎回require_onceを書くのがだるかったので、ローカルのパッケージを自動で読み込む方法を調べてみたら、 PHP5.3以上ならComposerが使えることを知ったので試してみた。
ただ前提として読み込まれる側のソース(パッケージ)は、Gitなど バージョンコントロールシステム(vcs)で管理されている必要がある。
Composer のインストール まずはComposerのインストールから。 今回はすでにpathの通っている/usr/local/binにインストールする。
$ sudo bash # cd /usr/local/bin # curl -sS https://getcomposer.org/installer | php $ which composer.phar /usr/local/bin/composer.phar  ### ローカルパッケージの構成 読み込まれる(require_onceされる)側の構成は以下のようにした。 composer-test │ ├── composer.json └── src └── Tatsuyano ├── ParentClass │ └── ChildClass.php └── ParentClass.php  まずは作成したパッケージ(composer-test)をかならずgit commitする。
というのも、たとえ読み込む側、読み込まれる側、両方が同じローカル環境内にあっても 読み込む側は、Git 経由でソースを読み込む(インストールする)ので、 commitした内容しか反映されない。
composer.json { &#34;name&#34;: &#34;composer-test/tatsuyano&#34;, &#34;description&#34;: &#34;Composerを使ってのファイルのロードテスト&#34;, &#34;license&#34;: &#34;MIT&#34;, &#34;autoload&#34;: { &#34;psr-0&#34;: { &#34;Tatsuyano\\&#34;: &#34;src/&#34; } } }  #### ParentClass.</description>
    </item>
    
    <item>
      <title>Octocat Figurineを衝動買いした</title>
      <link>http://tatsuyano.github.io/2014/11/29/i-bought-octocat-figurine/</link>
      <pubDate>Sat, 29 Nov 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/11/29/i-bought-octocat-figurine/</guid>
      <description>なんとなくOctocat Figurineを衝動買いした。
購入方法はpaypalで、配送期間は9日間と思っていたより短かった。 料金は配送手数料込みで$102.19、円安の影響も受け、最終的に12,216円。ちと高い。
配送方法は2パターンあって、安いほうを使ったみたが、特に問題はなかった。
サイズが5インチということでいがいと存在がある。ひげと台座が取り外し可能。
けっこうよく出来てると思う。</description>
    </item>
    
    <item>
      <title>日本国宝展に行ってきた</title>
      <link>http://tatsuyano.github.io/2014/11/27/kokuhou2014/</link>
      <pubDate>Thu, 27 Nov 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/11/27/kokuhou2014/</guid>
      <description>上野の東京国立博物館で開催されている日本国宝展に行ってきた。
目的は 金印と土偶。きっかけは忘れたが、１年ほど前くらいから人類の起源(人類はどこで生まれ、どういうルートで日本に来たか？)から、弥生時代あたりまでの歴史にハマっている。
会場は連休中ということもあり、チケットの購入を含めて３時間半も並ぶのハメになった。もしこれから行かれる方は、チケットは事前にネットで印刷したほうがいい。
国宝展ということで、主に飛鳥時代ものから鎌倉時代の仏像がメインで、土偶などの弥生、古墳時代のものは少なかった(もともと現存しているものが少ないのだからしょうがないが)。
金印は思ったより小さかった。はじめは純金で溶けて小さくなっているのかなとも思ったが、模様はしっかりしていたので、おそらくはじめから小さいのだろう。ただそれでも2000年前のものがこうして見られるのは浪漫がある。
 おみやげに買った、土偶フィギュアと金印。</description>
    </item>
    
    <item>
      <title>戸田マラソンin彩湖2014</title>
      <link>http://tatsuyano.github.io/2014/11/25/toda-marathon-in-saiko-2014/</link>
      <pubDate>Tue, 25 Nov 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/11/25/toda-marathon-in-saiko-2014/</guid>
      <description>最近あまり走れていなかったので、自分を追い込むためにハーフマラソンに参加した。 2ヶ月前くらいから月100キロペースで走るスケジュールを組んではみたが、案の定予定どおりにいかず。
とりあえず今どのくらい走れるか不安だったので、大会一週間前に16キロ走ってタイムをとってみる。 約キロ6分ペースで走れたが、スタミナはバテバテ。情けないが大会はキロ6分30秒で走ることにした。
レース会場 自宅から会場までは約1時間、なるべくギリギリまで家で調整したかったので、1時間前に付くように出発したら、着替えたりなんだで、スタート地点に5分前ついた。 ある意味予定どおりだが、さすがにもう少し余裕をもって行動しようと反省。
コンディション 天候は曇り時々晴れ、とほぼ理想的な天気。コースもほぼフラットで、 しっかりと準備ができていればタイムが出そうなコース。
レース状況 とにかく今回は、のんびり無理せず確実にゴールすることに終始。 ほぼ予定どおりキロ6分30秒ペースで走る。途中15キロ付近で膝に痛みというか、 膝のお皿がふわふわとする感じになる。前は20キロぐらいで出た症状だったが、やはり体重が重いせいか。 少し余裕がったので、残り2キロぐらいで少しペースを上げようと思ったが、上がらずそのままゴール。
感想 レースと呼べるものではなかったが、久々に走ったという満足感があったので、良かったと思う。今度出るレースでは、ちゃんと走れるよう、まずは走れる体に戻さなければ。</description>
    </item>
    
    <item>
      <title>elasticsearch&amp;kibanaをインストール</title>
      <link>http://tatsuyano.github.io/2014/10/21/how-to-install-and-setup-elasticsearch-and-kibana/</link>
      <pubDate>Tue, 21 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/21/how-to-install-and-setup-elasticsearch-and-kibana/</guid>
      <description>fluentdをインストールするの続きです。
インストールする環境は以下になります。
 AmazonLinux nginx ruby 2.1.0 (anyenv) fluentd 0.10.55 java 1.7.0_71  elasticsearchのインストール elasticsearch には java が必要なので、事前にインストールしてください。
$ cd /opt $ wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.3.4.tar.gz $ tar xvzf elasticsearch-1.3.4.tar.gz $ mv elasticsearch-1.3.4 elasticsearch $ rm -rf elasticsearch-1.3.4.tar.gz  #### セットアップ elasticsearch/config/elasticsearch.yml index.number_of_replicas: 0 # レプリカセットの数 index.number_of_shards: 1 # シャードの数 path.data: /opt/elasticsearch/data # index(データ)の保存先 path.logs: /var/log/elasticsearch/logs # ログの保存先  elasticsearch.ymlに設定したディレクトリを作成
$ mkdir /opt/elasticsearch/data $ sudo bash
mkdir -p /var/log/elasticsearch/logs /var/log chmod 777 -R elasticsearch/logs  起動方法 バッググラウンドで動かす場合は-dをつけます。</description>
    </item>
    
    <item>
      <title>fluentdをインストールする</title>
      <link>http://tatsuyano.github.io/2014/10/20/how-to-install-and-setup-fluentd/</link>
      <pubDate>Mon, 20 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/20/how-to-install-and-setup-fluentd/</guid>
      <description>blogのアクセス数がほんの少し増えてきたので、fluentd(フルーエントディ) をインストールしてみます。 今回、fluentd をインストールする環境は、以下になります。
 AmazonLinux nginx ruby 2.1.0 (anyenv)  fluentd を導入すると何ができるか fluentd はログなどを取得し、取得したデータを整形して elasticsearch + kibana などに渡すことで、データを簡単に可視化することができます。
fluentdをgem経由でインストールする まずは公式どおりにgemでインストールしてみます。
注意
こちらの記事を参考に、yum経由でインストールも行いました。
$ gem install fluentd --no-ri --no-rdoc  メモリが割り当てられない？というエラーが出ました。 ERROR: Error installing fluentd: ERROR: Failed to build gem native extension. $HOME/.anyenv/envs/rbenv/versions/2.1.0/bin/ruby extconf.rb Cannot allocate memory - $HOME/.anyenv/envs/rbenv/versions/2.1.0/bin/ruby extconf.rb 2&amp;1 Gem files will remain installed in $HOME/.anyenv/envs/rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/yajl-ruby-1.2.1 for inspection. Results logged to $HOME/.anyenv/envs/rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/extensions/x86_64-linux/2.1.0-static/yajl-ruby-1.2.1/gem_make.out  試しに`aws-sdk`をインストールしてから、再度インストールしてみたらうまくいきました。 $ gem install aws-sdk $ gem install fluentd --no-ri --no-rdoc $ source $HOME/.</description>
    </item>
    
    <item>
      <title>PHP Conference 2014にいってきた</title>
      <link>http://tatsuyano.github.io/2014/10/18/i-went-to-php-conference-2014/</link>
      <pubDate>Sat, 18 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/18/i-went-to-php-conference-2014/</guid>
      <description>仕事でPHPをつかうようになったので、PHPのカンファレンスに参加してきた。
会場の雰囲気 本当は朝一から行きたかったが、やることがあって12:10分の部から参加。
申込時、定員オーバーしてたので、すごく混んでいると思ったが意外と空いていた。
セッション Perlでも言えることだけど、やっぱり歴史ある言語だけに、あらためて発表することが少ないのか、自社のシステム構成や、ミドルウェアについてのセッションが多かったような気がする。
自分が見れた中で面白かったのは「PHPerがAWSと出会ってDevOpsを目指した話」と「Lightning Talks(無差別級)」のPHP7の話。
AWSについては、そろそろ実務でバリバリ触れる環境に身を置いておかないと、 今後AWSなどクラウドを提供する側が推奨するベストプラクティスに乗っかった上での 開発手法みたいなのに乗り遅れるなあと感じた。
PHP7がPHP6をすっ飛ばした話は、なんか少しノスタルジックな気分になった。
感想 今まで自分はあまりPHPを好きではなかった理由の一つに、PHPのコミュニティがわかりずらい(PHPの有名人の顔が見えにくい)というのがあったんだけど、今回少しPHPのコミュニティの匂いが感じられてよかった。
あと「PHPer」の読み方が「ペチパー」だということがわかって良かった。</description>
    </item>
    
    <item>
      <title>Homebrew CaskでMacアプリをインストールする</title>
      <link>http://tatsuyano.github.io/2014/10/15/how-to-install-and-setup-homebrew-cask/</link>
      <pubDate>Wed, 15 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/15/how-to-install-and-setup-homebrew-cask/</guid>
      <description> EmacsのCaskのように、インストールしたMacアプリをファイルに記述して、一括管理できる方法を探していたところ、 Homebrew Caskというものを見つけました。
Homebrew CaskはHomebrewの拡張で、コマンドラインでMacアプリをインストールできるようになります。 また、Homebrewの拡張なので、Brewfileを使って、アプリも一括インストール(管理)できるようになります。
Homebrew Caskのインストール 念のため、先にHomebrew本体、インストール済みのコマンドをアップデートします。
$ sudo -E bash
brew update brew upgrade brew tap phinze/homebrew-cask brew install brew-cask  Macアプリの検索 searchに続けて、検索文字を入力すれば、絞り込み検索ができます。
# brew cask search  Macアプリの(単体)インストール、アンインストール デフォルトだと、インストール先は/Users/hoge/Application 配下になります。 変更する場合は、HOMEBREW_CASK_OPTSを設定してください。
# export HOMEBREW_CASK_OPTS=&amp;ldquo;&amp;ndash;appdir=/Applications&amp;rdquo;
brew cask install github brew cask uninstall github  Brewfileでのインストール Macアプリ以外にもHomebrewでインストールしたコマンドもインストール(管理)できます。
# brew bundle  こちらにgitにあげた私のBrewfileを貼っておきます。gist-itを使うと、 gistではなく、gitに上げたファイルも読み込めるようになりました。
 参考サイト  homebrew-caskを使って簡単にMacの環境構築をしよう！ Homebrewで*.dmgなアプリをインストールしたい→それhomebrew-caskで出来るよ  </description>
    </item>
    
    <item>
      <title>herokuでfuelphpをデプロイ</title>
      <link>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</link>
      <pubDate>Tue, 07 Oct 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/07/deploying-the-fuelphp-in-heroku/</guid>
      <description>まずはherokuの準備をしてください。
 herokuことはじめ  herokuにデプロイするアプリを、github上に用意してください。
 fuelphpアプリのgit管理  herokuにアプリを登録 今回は sample-of-chat という名前のアプリを登録します。 アプリ名はわかりやすいように、リポジトリと同じ名前がいいと思います。 また、アプリ名がURLになるので、注意してください。
http://sample-of-chat.herokuapp.com
$ cd sample-of-chat $ heroku create sample-of-chat git remote -v heroku git@heroku.com:sample-of-chat.git (fetch) heroku git@heroku.com:sample-of-chat.git (push)  webサーバーとDocumentRootを指定するファイルProcfileを作成します。 webサーバーはapacheかnginxから選択します。
$ cd sample-of-chat $ cat  Procfile web: vendor/bin/heroku-php-apache2 public/   Setting the document root  次に、.gitignoreからcomposer.lockをコメントアウトし、
composer.jsonに設定(bin-dir)を追加します。
&#34;config&#34;: { &#34;bin-dir&#34;: &#34;vendor/bin&#34;, &#34;vendor-dir&#34;: &#34;fuel/vendor&#34; },  herokuにデプロイ herokuにpushすることで、デプロイが行われます。
git push heroku master  これでデプロイ完了です。デプロイが完了すると、</description>
    </item>
    
    <item>
      <title>herokuことはじめ</title>
      <link>http://tatsuyano.github.io/2014/10/07/start-heroku/</link>
      <pubDate>Tue, 07 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/07/start-heroku/</guid>
      <description>まずはherokuアカウントを作成します。
2段階認証にも対応しているので、設定したほうがいいと思います。
heroku-toolbeltのインストール CentOS(AmazonLinux)に、herokuコマンドをインストールします。
$ wget -qO- https://toolbelt.heroku.com/install.sh | sh  $HOME/.zshrc
if [ -d /usr/local/heroku ]; then export PATH=/usr/local/heroku/bin:$PATH fi  $ source $HOME/.zshrc $ which heroku /usr/local/heroku/bin/heroku   Vagrant 上の CentOS 6.5 から Heroku を使うには  herokuに公開鍵を登録 秘密鍵を作成
$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Home/hoge/.ssh/id_rsa): /Home/hoge/.ssh/heroku_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Home/hoge/.</description>
    </item>
    
    <item>
      <title>fuelphpアプリのgit管理</title>
      <link>http://tatsuyano.github.io/2014/10/06/git-management-of-fuelphp/</link>
      <pubDate>Mon, 06 Oct 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/10/06/git-management-of-fuelphp/</guid>
      <description>fuelphpをcreate(clone)した状態だと、push先がfuelを向いているので、アプリをgit管理するためにgit initし直す必要がある。
まずはfuelphpをインストールするためのoilコマンドをインストールし、アプリのひな形を作成
$ curl get.fuelphp.com/oil | sh $ cd Sites/ $ oil create sample  必要のないファイルを削除
$ rm -rf .git .gitmodules *.md docs fuel/core fuel/packages  fuel/core、fuel/packagesをgit submoduleで新たにインストール。
$ cd sample $ git init $ git submodule add git://github.com/fuel/core.git fuel/core $ git submodule add git://github.com/fuel/oil.git fuel/packages/oil $ git submodule add git://github.com/fuel/auth.git fuel/packages/auth $ git submodule add git://github.com/fuel/parser.git fuel/packages/parser $ git submodule add git://github.com/fuel/orm.git fuel/packages/orm $ git submodule add git://github.com/fuel/email.git fuel/packages/email  push先(GitHubなど)、remote/originを設定する</description>
    </item>
    
    <item>
      <title>AWSのセキュリティを強化する</title>
      <link>http://tatsuyano.github.io/2014/09/26/enhanced-security-of-aws/</link>
      <pubDate>Fri, 26 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/26/enhanced-security-of-aws/</guid>
      <description> AWSを本格的に使い始めて来たので、こちらの記事を参考にセキュリティの設定を行いました。改めて記事にするか迷いましたが、いちよ備忘のために残しておこうと思います。
今回の作業の流れは以下になります。
 Authyを使ってrootアカウントに2段階認証を導入する IAMユーザを作成し、IAMユーザでAWSを運用する rootアカウントのAccessKeyを削除する  Authyの設定、インストール セキュリティといってもいろいろあると思うのですが、まずはAWSコンソールにログインできるrootアカウント のセキュリティを強化することだと思います。
今回はAuthyというアプリケーションを使って、AWSに2段階認証を導入しようと思います。
通常の2段階認証だと、ログインする度に事前に登録してあるSMSにPINコードを送ってもらい、そのPINコードを入力すると思うのですが、 Authyを使うことで、Authyが生成するPINコードを入力してログインが可能になります。
Authyの設定はこちらの記事を参考にしてください。
MFAを有効にし、rootアカウントを2段階認証に対応させる IAMに、MFA(multi-factor authentication)という外部のサービスを使って 2段階認証する機能を使って、AuthyにrootアカウントのPINコードを生成できるように設定します。
IAMユーザを作成する Administrator権限のIAMユーザを作成し、こちらもAuthyに紐付けます。
rootアカウントのAccessKeyを削除する 今後rootアカウントを使って、インスタンスの操作はしないので、AccessKeyを削除します。
ここまでの作業で、
 rootアカウントに2段階認証の導入 IAMユーザの作成、及び2段階認証の導入  今後はコンソールにもIAMユーザでログインして作業してください。 お疲れ様でした。
参考サイト  Authy: 2段階認証のコードをまとめて管理! 紛失時の復元・データ同期もできる AWSアカウント作ったらこれだけはやっとけ！IAMユーザーとAuthyを使ったMFAで2段階認証  関連する記事  Route53のDNSを使う Route53にドメインを移管する  </description>
    </item>
    
    <item>
      <title>jqをインストールする</title>
      <link>http://tatsuyano.github.io/2014/09/25/how-to-install-and-setup-jq/</link>
      <pubDate>Thu, 25 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/25/how-to-install-and-setup-jq/</guid>
      <description>こちらのサイトを参考に、jqをインストールしてみました。
思っていた以上に必要なライブラリがあって、ちょっと時間がかかりました。
libtoolとflexのインストール $ sudo yum -y install libtool flex  bisonのインストール バージョン3.0以上が必要です。
configure: error: You need bison version 3.0 or greater.
初めはyumでインストールしましたが、バージョンが2.4.1だったので、手動でmakeしました。
$ sudo bash # cd /usr/local/src # wget http://ftp.gnu.org/gnu/bison/bison-3.0.2.tar.gz # tar xvzf bison-3.0.2.tar.gz # cd bison-3.0.2 # ./configure # make # make install # ln -s /usr/local/bin/bison /usr/bin/bison  bisonにyaccコマンドをaliasする $ alias yacc=&#39;bison&#39; /usr/bin/bison   yacc command not found and y.tab.c error 127 after installing bison  鬼車のインストール oniguruma-5.</description>
    </item>
    
    <item>
      <title>helm-gtags-modeを導入してソースコードの読解する</title>
      <link>http://tatsuyano.github.io/2014/09/17/to-reading-comprehension-of-the-source-code-by-introducing-the-helm-gtags-mode/</link>
      <pubDate>Wed, 17 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/17/to-reading-comprehension-of-the-source-code-by-introducing-the-helm-gtags-mode/</guid>
      <description>helm-gtagsを導入すると、メソッドの定義先に簡単に移動できたり(メソッドジャンプ)、 メソッドの参照元の一覧を表示できたりと大変便利です。
helm-gtagsはGNU GLOBAL(gtag)というソフトウェアを使って上記の機能を実装しています。 ただGNU GLOBALは今まではC言語やJava、PHPなど一部言語しか対応していませんでした。
GNU GLOBAL(gtag)とは、ソースファイルを解析し、インデックスファイルを生成してくれるソフトウェアです
しかし、バージョン6.3.2からglobal-pygments-pluginが取り込まれたことで、Rubyなど多くの言語に対応しました。
今回は、RubyとPHPをhelm-gtags-modeに対応するようにしました。
ソフトウェアの依存関係 少しややこしいので整理しておきますと、
 helm-gtags(複数言語対応)は GNU GLOBAL 6.3.2が必要 GNU GLOBALに取り込まれたglobal-pygments-pluginは、Pygmentが必要 PygmentはPython 2.6以上が必要  [helm-gtags] &amp;lt;- [GLOBAL] &amp;lt;- [Pygment] &amp;lt;- [Python 2系] という関係性なので、 まずは、Python 2系からインストールします。
注意 Pygmentのコマンドはpygmentizeで、初めからインストールされている可能性があります。 その場合は、Python 2系、Pygmentのインストール手順はスルーしてください。
$ which pygmentize $ /usr/bin/pygmentize $ pygmentize -V $ Pygments version 1.4, (c) 2006-2008 by Georg Brandl.  Python 2系のインストール pyenvを使って2系をインストールします。 pyenvのインストールはこちらを参考にしてください。
$ pyenv install 2.7.8 $ pyenv global 2.7.8 $ pyenv version 2.</description>
    </item>
    
    <item>
      <title>Route53にドメインを移管する</title>
      <link>http://tatsuyano.github.io/2014/09/16/transferred-a-domain-to-route53/</link>
      <pubDate>Tue, 16 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/16/transferred-a-domain-to-route53/</guid>
      <description> Route53のDNSを使うようにしたので、続けてドメインも移管したいと思います。
AuthCodeの取得 value-domainからAuthCodeを取得します。
まずはAuthCodeを取得する前に、whois代行を利用している場合は 先に自分の情報に変更します。
whois情報を自分の情報に変更後、一度saveをし、 再度同じページを開くと、画面下側にAuthCodeが表示されています。
ドメインの移管 ドメインの移管時にドメインが利用しているNSを入力するので、事前に確認しておきます。
次にドメインがRoute53で移管できるか確認します。 ちなみに.comドメインの移管料は$12.00でした。
移管をすると、ドメインの利用期間が1年伸びます
whois情報を登録します。
「Thank you for transferring your domain to Route 53」とメッセージがでれば完了です。
登録完了後、数日後に確認メールが来るのでaccept(許可)してください。
ちなみに移管が完了するまでに、7日かかりました。。
以上で完了です。お疲れ様でした。
参考サイト  Amazon Route 53にドメインを移管してみた Value Domainからお名前.comへドメインを移管してみた  関連する記事  Route53のDNSを使う aws はじめました。  </description>
    </item>
    
    <item>
      <title>Route53のDNSを使う</title>
      <link>http://tatsuyano.github.io/2014/09/11/using-the-dns-of-route53/</link>
      <pubDate>Thu, 11 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/11/using-the-dns-of-route53/</guid>
      <description>BlogをEC2で運用しているので、せっかくなのでネームサーバーもAmazonが提供しているRoute53 を使ってみたいと思います。 料金が少し気になるところですが、個人のサイトなら100円/月ぐらい見ておけばよさそうです(未確認)。
 個人サイトでAmazon Route 53を一ヶ月間使った場合の料金 Amazon Route 53 料金表  今回変更するドメイン(10rane.com)はvalue-domainで管理しています。 作業の流れとしては、以下になります。
 Route53にレコードを登録 レジストラ(value-domain)に設定しているネームサーバーを変更  変更前のネームサーバーの状態を確認 value-domainのネームサーバーを利用していることがわかります。
$ nslookup -type=any 10rane.com 10rane.com nameserver = ns1.value-domain.com. 10rane.com nameserver = ns2.value-domain.com. 10rane.com origin = ns1.value-domain.com mail addr = hostmaster.10rane.com serial = 1410401066 refresh = 16384 retry = 2048 expire = 1048576 minimum = 2560 Name: 10rane.com Address: 49.212.146.214  　$ dig 10rane.com ns ;; ANSWER SECTION: 10rane.com. 1124 IN NS ns2.</description>
    </item>
    
    <item>
      <title>Ghostをv0.5にアップグレードする</title>
      <link>http://tatsuyano.github.io/2014/09/10/upgrade-to-v05-ghost/</link>
      <pubDate>Wed, 10 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/10/upgrade-to-v05-ghost/</guid>
      <description>運用中のGhost(v0.4)にGhost(v0.5)のファイルを一部コピーするだけで、アップグレードすることができます。
以下のような構成で話をすすめます。
$ tree $HOME/app -d -L 1 $HOME/app ├── ghost #&amp;lt;- 運用中のGhost(v0.4) └── ghost.v5 #&amp;lt;- コピー元のGhost(v0.5)  Ghost v0.5のダウンロード $ cd app $ curl -L https://ghost.org/zip/ghost-latest.zip -o ghost.zip $ unzip -uo ghost.zip -d ghost.v5  Ghost v0.5から一部ファイルをコピーする コピーする前にforeverを止めてください。
$ cd $HOME/app/ghost $ NODE_ENV=production forever stop index.js  　$ cd ../ghost.v5/ $ cp -a *.md *.js *.json ../ghost/ $ cp -R core ../ghost $ cp -R content/themes/casper ../ghost/content/themes  nodeパッケージを再インストール</description>
    </item>
    
    <item>
      <title>Postfixをインストールする</title>
      <link>http://tatsuyano.github.io/2014/09/09/how-to-install-and-setup-postfix/</link>
      <pubDate>Tue, 09 Sep 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/09/how-to-install-and-setup-postfix/</guid>
      <description>仕事ではじめて Postfix を使ったので、インストール方法などを残しておきます。
Postfixのインストール まず Postfix のインストール前に Sendmail がインストールされている場合は止めておきます。
$ sudo chkconfig sendmail off $ sudo /etc/init.d/sendmail stop $ sudo yum -y install postfix $ sudo chkconfig --add postfix $ sudo chkconfig on postfix $ sudo /etc/init.d/postfix start  メールサーバー(MTA)を postfix に切り替え
$ sudo update-alternatives --set mta /usr/sbin/sendmail.postfix  
postfix の設定 設定は主に/etc/postfix/配下の3ファイル
/etc/postfix/main.cf (設定全般) # mydomainを設定しない場合、メールのホスト名としても使われる(と思われる) myhostname = hogehoge.net # メールをローカルで受信するドメイン名を設定 mydestination = $myhostname # 全てのメールを受け取る inet_interfaces = all # ipv6、ipv4 両方許可する inet_protocols = all # コメントアウト #mynetworks_style = host # LAN内のネットワークを指定 mynetworks = 127.</description>
    </item>
    
    <item>
      <title>Amazon LinuxにGhostをインストールする</title>
      <link>http://tatsuyano.github.io/2014/09/09/how-to-install-and-setup-ghost-on-amazon-linux/</link>
      <pubDate>Tue, 09 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/09/how-to-install-and-setup-ghost-on-amazon-linux/</guid>
      <description>新たにt2.microのインスタンスを立ち上げたので、Ghost を新規でインストールしようと思います。
Node.js のインストール anyenvを使って、0.10.0以上のNode.js をインストールしてください。
$ which node HOME/.anyenv/envs/ndenv/shims/node $ which npm $HOME/.anyenv/envs/ndenv/shims/npm $ node --version v0.10.26   anyenvをインストールする  nginx のインストール yumでのバージョンは1.4.7と少し古いですが、面倒なのでインストール
$ sudo yum -y install nginx $ /usr/sbin/nginx -v nginx version: nginx/1.4.7 $ sudo chkconfig nginx on $ sudo chkconfig --list | grep nginx nginx 0:off 1:off 2:on 3:on 4:on 5:on 6:off  念のため起動テスト
$ sudo /etc/init.d/nginx start  confの設定 特定のドメインのみを停止(切り離)したりするために、 設定ファイルのリンクを貼ったディレクトリをincludeします。
sites-availableにはドメインごとの設定ファイル、 sites-enabledには設定ファイルのリンクを貼ります。</description>
    </item>
    
    <item>
      <title>emacsのruby環境をセットアップする</title>
      <link>http://tatsuyano.github.io/2014/09/01/set-up-ruby-mode-of-emacs/</link>
      <pubDate>Mon, 01 Sep 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/09/01/set-up-ruby-mode-of-emacs/</guid>
      <description>最近caskに切り替えたので、ruby環境も一から作り直したいと思います。 オムニ補完には、今まではRsenseを使っていましたが、今回はrobeというパッケージと使ってみたいと思います。
対象のEmacsのバージョンは24.3.1になります
今回インストールするパッケージ  ruby-mode ruby-end ruby-block inf-ruby robe auto-complete rvenv # 2015/02/23追記 smart-newline　# 2015/02/23追記 rspec-mode # 2015/02/23追記  ruby-mode,ruby-end,ruby-blockをインストール まずは基本的なところから。 Emacs24だとruby-electricがうまく動かなかったので、 今回はインストールしませんでしたが、ruby-endだけで事足りました。
~/.emacs/Cask
;; Ruby (depends-on &amp;quot;ruby-mode&amp;quot;) (depends-on &amp;quot;ruby-end&amp;quot;) (depends-on &amp;quot;ruby-block&amp;quot;)  ~/.emacs.d/init_loader/03_ruby.el
;; -------------------------------------------------- ;; ruby-mode ;; http://shibayu36.hatenablog.com/entry/2013/03/18/192651 ;; -------------------------------------------------- (autoload &#39;ruby-mode &amp;quot;ruby-mode&amp;quot; &amp;quot;Mode for editing ruby source files&amp;quot; t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.rb$&amp;quot; . ruby-mode)) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Capfile$&amp;quot; . ruby-mode)) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Gemfile$&amp;quot; . ruby-mode)) (add-to-list &#39;interpreter-mode-alist &#39;(&amp;quot;ruby&amp;quot; .</description>
    </item>
    
    <item>
      <title>init-loaderをCaskでインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-initloader-in-cask/</link>
      <pubDate>Thu, 28 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-initloader-in-cask/</guid>
      <description> 最近caskに乗り換えたので、init-loader.elも再度設定し直しました。
init-loaderのインストール まずはCaskファイルに設定し、caskコマンドでinit-loaderをインストールします。
~/.emacs.d/Cask
;; Setup (depends-on &amp;quot;init-loader&amp;quot;)  次に設定ファイル(elisp)を格納するディレクトリ、init_loaderを作成します。
mkdir $HOME/.emacs.d/init_loader  先ほど作成したディレクトリをinit-loaderがロードするように設定します。
~/.emacs.d/init.el
;; init-loader (custom-set-variables &#39;(init-loader-show-log-after-init &#39;error-only)) (init-loader-load (concat user-emacs-directory &amp;quot;init_loader&amp;quot;))  init-loaderで読み込むファイル とりあえずinit-loaderで読み込むファイルは以下のように設定しました。 まだすべてcaskに移行しきれていないので、順々に対応していきたいと思います。
init_loader │ ├── 01_basic.el ├── 02_helm.el └── 02_migemo.el  お疲れ様でした。
参考サイト  syohex/dotfiles/emacs  関連する記事  Caskをインストールする Amazon LinuxにMigemoをインストールする HelmをCaskでインストールする  </description>
    </item>
    
    <item>
      <title>HelmをCaskでインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-helm-in-cask/</link>
      <pubDate>Thu, 28 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/28/how-to-install-and-setup-helm-in-cask/</guid>
      <description>anything.elをフォークして作られたツール、HelmをCaskでインストール、管理したいと思います。
インストール ~/.emacs.d/Cask
(depends-on &amp;quot;helm&amp;quot;)  caskコマンドの実行
$ cd .emacs.d $ cask Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/archives/gnu/archive-contents Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/archives/marmalade/archive-contents Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/archives/melpa/archive-contents Making version-control local to helm-autoloads.el while let-bound! Wrote $HOME/.emacs.d/.cask/24.3.1/elpa/helm-20140827.436/helm-autoloads.el  最小限の設定 とりあえずREADME.mdに書いてある最小限の設定をします。
~/.emacs.d/init.el
;; Helm (require &#39;helm-config) (global-set-key (kbd &amp;quot;C-c h&amp;quot;) &#39;helm-mini) (helm-mode 1) ;;ミニバッファでC-hをバックスペースに割り当て (define-key helm-read-file-map (kbd &amp;quot;C-h&amp;quot;) &#39;delete-backward-char)  基本的な操作  C-c hで最近開いたバッファ(ファイル)を選択する C-c fでhelm-mode-find-fileが実行  helm-mode 1がどういう設定になっているかわかっていないので、今はこれぐらいしか把握していません(笑)。 もう少し理解したら書き足したいと思います。
追加 2014.9.11 Helmの設定 こちらのサイトを参考に設定してみました。設定はまったく同じなので、省略します。
参考サイト  emacs-helm helmでC-eとC-jが使えなくなったので取り戻した helm.elをインストールしてみた anything.elのフォークhelm-modeをインストールする syohex/dot_files/emacs/init_loader/02_helm.</description>
    </item>
    
    <item>
      <title>Amazon LinuxにMigemoをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-migemo-on-amazon-linux/</link>
      <pubDate>Wed, 27 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-migemo-on-amazon-linux/</guid>
      <description>migemoを使うと、日本語の文章をローマ字で検索できるようになります。
作業の流れ  RPMでnkfをインストール ghqでcmigemoのインストール caskでmigemo.elをインストール init.elにmigemoの設定を行う  RPMでnkfをインストール migemoをインストールするにはnkfが必要です。nkfがないと下記のようなエラーが出ます。 ERROR: Require qkc or nkf installed for encode filter.
ただAmazon Linuxのyumには、nkfパッケージがないので、RPMでインストールします。
$ sudo bash # cd /tmp/ # wget http://mirror.centos.org/centos/6/os/x86_64/Packages/nkf-2.0.8b-6.2.el6.x86_64.rpm # rpm -ivh nkf-2.0.8b-6.2.el6.x86_64.rpm # which nkf /usr/bin/nkf  ghqでcmigemoのインストール migemoは元々rubyで実装されていたらしいのですが、今はC言語で実装されたcmigemoをインストールします。
$ ghq get https://github.com/koron/cmigemo.git $ cd $HOME/src/github.com/koron/cmigemo $ ./configure $ make gcc $ make gcc-dict $ sudo make gcc-install $ which cmigemo /usr/local/bin/cmigemo  cmigemoが正常にインストールされているか確認 $ cmigemo -d /usr/local/share/migemo/utf-8/migemo-dict  適当なローマ字(toukyoなど)を入力すると正規表現を生成される -&amp;gt; 正常にインストールされている</description>
    </item>
    
    <item>
      <title>ghqをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-ghq/</link>
      <pubDate>Wed, 27 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/27/how-to-install-and-setup-ghq/</guid>
      <description>ghqというローカルリポジトリを一元的に 管理するツールをインストールしてみました。こちらのツールを使うとgolangと同じようなディレクトリ構成で リポジトリを管理できるようになります。
また今回はこちらの記事を参考に(というかまんま同じに)、 リポジトリ(ソース)を管理するようにしてみました。
golangのディレクトリ構成 まずはGOPATHを$HOMEに設定し、以下のようなディレクトリ構成にします。
.zshrc
## golang export GOPATH=$HOME export PATH=$PATH:$GOPATH/bin  $HOME配下の構成
. ├── bin ├── pkg └── src └── github.com ├── clone ├── codegangsta ├── mattn └── peco  これでgolangのリポジトリ(ソース)は、src配下に作成されます。 また今回はghqを使ってインストール(clone)するgolang以外のリポジトリもsrc配下にインストールするよう設定します。
ghqのインストール $ go get github.com/motemen/ghq  $HOME/.gitconfigにghqを使ってインストールするディレクトリ先を指定します。
[ghq] root = ~/src  これでghqコマンドを使って、インストールできるようになります。
$ ghq get https://github.com/zsh-users/zsh-syntax-highlighting.git  srcディレクトリ配下にインストールされます。
src └── github.com └── zsh-users └── zsh-syntax-highlighting  ghqでインストールしたリポジトリの一覧を表示し、移動するスクリプト # peco-src # (http://blog.kentarok.org/entry/2014/06/03/135300) function peco-src () { local selected_dir=$(ghq list --full-path | peco --query &amp;quot;$LBUFFER&amp;quot;) if [ -n &amp;quot;$selected_dir&amp;quot; ]; then BUFFER=&amp;quot;cd ${selected_dir}&amp;quot; zle accept-line fi zle clear-screen } zle -N peco-src bindkey &#39;^S&#39; peco-src  まとめ 今までの自己流から、ずいぶん分かりやすくなりました。</description>
    </item>
    
    <item>
      <title>pecoで接続先hostを選ぶスクリプトを書いた</title>
      <link>http://tatsuyano.github.io/2014/08/21/select-host-for-peco/</link>
      <pubDate>Thu, 21 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/21/select-host-for-peco/</guid>
      <description> pecoを使って、sshするhostを選択するスクリプトを書きました。
.oh-my-zsh/custom/peco.zsh
function peco-select-host () { host=$(grep -iE &#39;^host\s+(\w|\d)+&#39; ~/.ssh/config | awk &#39;{print $2}&#39; | peco) if [ -n &amp;quot;$host&amp;quot; ]; then ssh $host fi } alias hs=peco-select-host  元々ある~/.ssh/configをgrepしてhost名を渡してるだけ。
1、2文字のキーバインド(ストローク？)がなかったので、aliasでhsにしました。
$ hs QUERY&amp;gt; clgit support test01 ghost #&amp;lt;-接続先のhostを選ぶ  peco楽しいですね。お疲れ様でした。
関連する記事  流行りのpecoをcentosにインストールしました goパッケージ(peco)のバージョンを上げる  </description>
    </item>
    
    <item>
      <title>Caskをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/20/install-cask/</link>
      <pubDate>Wed, 20 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/20/install-cask/</guid>
      <description>やろうやろうと思ってやっていなかったCaskを導入しようと思います。 今ままでは主にel-getを中心に使っていたのですが、 どのパッケージをインストールしたかとか、環境の切り替えが少し面倒でした。
今回導入するCaskはrubyのBundlerチックに管理してくれるため、上記の問題を解決してくれます。
Caskのインストールにはpythonが必要です。 インストールされていない場合、anyenvでpythonをインストールしてください
Emacs 24のインストール Caskは Emacs 24以上が必須です。 今回うっかりyum経由でEmacsをインストールしていたため、バージョンが23.1.1.だったので いったん削除し、再度バージョン24以上のEmacsをインストールします。
yumでインストールしたEmacs 23を削除
# yum list installed | grep emacs # yum -y remove emacs.x86_64 emacs-common.x86_64  make &amp;amp; install
# yum install gcc make ncurses-devel # wget http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-24.3.tar.gz # tar zxvfp emacs-24.3.tar.gz # cd emacs-24.3 # ./configure -without-x -without-selinux # make # make install  バージョンの確認
$ emacs --version GNU Emacs 24.3.1 Copyright (C) 2013 Free Software Foundation, Inc.</description>
    </item>
    
    <item>
      <title>anyenvをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/19/install-anyenv/</link>
      <pubDate>Tue, 19 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/19/install-anyenv/</guid>
      <description>以前導入したanyenvのインストール方法を忘れないようメモしておきます。
anyenvは ruby、perl、python、nodejs、php(phpenv) のバージョン管理を一元化してくれるツールです。これでhome直下がずいぶんスッキリ。素敵です。
インストール ダウンロード
$ git clone https://github.com/riywo/anyenv ~/.anyenv  $HOME/.zshrc
$ echo &#39;export PATH=&amp;quot;$HOME/.anyenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc $ echo &#39;eval &amp;quot;$(anyenv init - zsh)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc  私はoh-my-zshを使っているので、実際は~/.zshrcではなく、~/.oh-my-zsh/custom/main.zshに設定しています。
シェルを再実行し、anyenvの設定を反映させます。
source $HOME/.zshrc でも結構です。
$ exec $SHELL -l $ which anyenv ~/.anyenv/bin/anyenv   anyenvで開発環境を整える completions/plenv.bash:16: command not found: completeの対処法  rubyのインストール とりあえずanyenv経由でrubyをインストールします。 rubyをインストールするには、事前にOpenSSL系のライブラリが必要なのでインストールしておきます。
また別記事で紹介しているrobeを使うには、read-lineが必要なので、入れておきます。
$ sudo yum -y install openssl-devel $ sudo yum -y install readline-devel   CentOSに rbenv 経路で Ruby 2.</description>
    </item>
    
    <item>
      <title>zshをバージョン5 に上げる</title>
      <link>http://tatsuyano.github.io/2014/08/19/install-zsh5/</link>
      <pubDate>Tue, 19 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/19/install-zsh5/</guid>
      <description>yumでインストールするとバージョンが4.3だったので、makeしてインストールしました。
まずはmakeするために必要なライブラリのインストール
# yum -y install gcc ncurses-devel  ダウンロード
# wget http://www.zsh.org/pub/zsh-5.0.5.tar.bz2 # tar jxvf zsh-5.0.5.tar.bz2  make &amp;amp; install
# cd zsh-5.0.5 # ./configure # make # make install  インストールが正常に終わったら、zshを登録します。
shellの登録 &amp;amp; 変更
# echo /usr/local/bin/zsh &amp;gt;&amp;gt; /etc/shells # chsh  /usr/local/bin/zsh以外にインストールされている可能性があるので、確認してください
$ zsh --version zsh 5.0.5 (x86_64-unknown-linux-gnu)  ログイン時にzshが起動するようbashrcに追加する。
~/.bashrc
# Use zsh if [ -f /usr/local/bin/zsh ]; then exec /usr/local/bin/zsh fi  一度ログアウトし、ログイン後shellがzshに切り替わっていれば完了です。
$echo $0 /usr/local/bin/zsh   linux/zsh 現在の shell を shellscript の中から確認する  お疲れ様でした。</description>
    </item>
    
    <item>
      <title>sudoでroot昇格した時に環境変数を引き継ぐ</title>
      <link>http://tatsuyano.github.io/2014/08/14/take-over-the-environment/</link>
      <pubDate>Thu, 14 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/14/take-over-the-environment/</guid>
      <description>知らなかった。
$ sudo -E bash   sudoで環境変数を引き継ぎたい  </description>
    </item>
    
    <item>
      <title>goパッケージ(peco)のバージョンを上げる</title>
      <link>http://tatsuyano.github.io/2014/08/14/updating-the-package-go/</link>
      <pubDate>Thu, 14 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/14/updating-the-package-go/</guid>
      <description> --prompt オプションを使いたかったので、バージョンをv0.1-&amp;gt;v0.2.4にあげました。
GOROOTとGOPATHの設定が必要なので、環境変数が引き継いだ状態でroot昇格します。
$ sudo -E bash # printenv |grep GO GOROOT=/usr/local/go GOPATH=/usr/local/mygo  go get -uでアップデートされます。
# go get -u github.com/peco/peco/cmd/peco  バージョンが上がりました。
# peco --verision peco: v0.2.4   How does Go update third-party packages?  関連する記事  流行りのpecoをcentosにインストールしました  </description>
    </item>
    
    <item>
      <title>GhostにGoogle Analyticsに設置しアクセス元IPを取得する</title>
      <link>http://tatsuyano.github.io/2014/08/10/get-access-ip-installed-google-analytics-to-ghost/</link>
      <pubDate>Sun, 10 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/10/get-access-ip-installed-google-analytics-to-ghost/</guid>
      <description>アクセス元IPを取得するには、Google Analyticsのデフォルト設定ではできません。 IPを取得、集計するには
 Google Analyticsにdimensionを設定し、アクセス元IPを集計できるようにする PHPを使って、blogの参照時のIPを取得する 取得したIPをdimensionに渡す 集計結果をGoogle Analyticsで参照できるよう、カスタムレポートを作成する  という手順で対応します。
この記事で紹介するシステム構成  CentOS6 Ghost Nginx  何はともあれ、まずはGoogleAnalyticsを導入してください。
 初心者必見！【Google Analytics(アナリティクス)】の導入と使い方 How to Add Google Analytics to Ghost  Google Analyticsにdimensionを設定し、アクセス元IPを集計できるようにする Analyticsが提供していない値(今回でいうところのアクセス元IP)を集計するには、dimension(変数)を設定し、その変数に値を代入することで、集計することができるようになります。
アナリティクス設定 &amp;gt; カスタム定義 &amp;gt; カスタム ディメンション 新しいカスタム ディメンション &amp;gt; カスタム ディメンションを編集 &amp;gt; 保存 保存するとdimension1という変数がAnalyticsに設定されます。
PHPを使って、blogが参照された時のIPを取得する このblogにはGhostを動かすための最小の設定しかしていなかったので、まずはNginx上でPHPが動く環境を整えます。
# yum -y install php php-fpm  次に、事前に用意したdomainをバーチャルホスト(VH)に割り振り、そのVHに対してPHPが動くように設定します。
/etc/nginx/conf.d/php.conf
```` server { listen 80; server_name ga.10rane.com;
location / { root /var/www/html; index index.</description>
    </item>
    
    <item>
      <title>Ricky for powerlineをmacにインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/06/install-ricky-powerline-for-mac/</link>
      <pubDate>Wed, 06 Aug 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/06/install-ricky-powerline-for-mac/</guid>
      <description> agnosterはpowerline.otfにある依存文字を使うことを前提しているので、 macにpowerline系のフォントをインストールします。
少しややこしいのですが、元々powerlineというフォントはvimで使う用？だったので ググるとよくvim-powerlineとかがヒットしますが同じもののようです。
また、既存のフォントをpowerline化(既存のフォントに依存文字を使えるようにする)することもできます。
今回は、今使っているRictyをそのまま使いたかったので、 新たにRicty for powerlineというフォントをbrewでインストールしてみました。
brew update brew uninstall ricty brew tap sanemat/font brew install --vim-powerline ricty cp -f /usr/local/Cellar/ricty/3.2.3/share/fonts/Ricty*.ttf ~/Library/Fonts/   homebrewを使ってiTerm2でRicty for powerline設定した  インストールが完了したら、iTermのフォントの設定を変更して、iTermを再起動してください。
お疲れ様でした。
関連する記事  oh-my-zshをインストールする  </description>
    </item>
    
    <item>
      <title>oh-my-zshをインストールする</title>
      <link>http://tatsuyano.github.io/2014/08/06/install-oh-my-zsh/</link>
      <pubDate>Wed, 06 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/06/install-oh-my-zsh/</guid>
      <description>今まで設定が面倒で試していなかったoh-my-zshをインストールしてみました。下記の方法で、mac、centosともに対応可能です。
oh-my-zshをインストールする すでにzshはインストールされているものとします。
また、今ある$HOME/.zshrcはインストール時に上書きされてしまうので事前に退避してください。
インストールするとHOME直下に.oh-my-zshというディレクトリが作成され.zshrcが上書きされます。
インストール
curl -L http://install.ohmyz.sh | sh  インストールが終わったので、いったんsorce .zshrcして、oh-my-zshを使ってみます。promptが変更されたはずです。
oh-my-zshは、themeとplugin(複数選択可)という単位でzshを管理しています。 初期設定はthemeがrobbyrussell、pluginがgitです。
oh-my-zshのディレクトリ構成
. ├── custom ... 自分が設定したzshrcを入れる │ └── plugins ... 自分で作ったpluginを入れる ├── lib ├── log ... zsh_historyなどを入れる ├── plugins ... gitなどソフトウェア単位の設定ファイルが入っている ├── templates ... zshrcのテンプレートファイルが入っている ├── themes ... promptなど見た目の設定ファイルが入っている └── tools  customに自分の設定ファイルを入れる 整理されていませんが、とりあえずcustomディレクトリに入れてみます。
因みに拡張子は.zshで、ファイル名は自由です。
main.zsh
export LC_ALL=en_US.UTF-8 export LANG=ja_JP.UTF-8 export EDITOR=emacs bindkey -e # emacsライクなキーバインド autoload -U compinit # 強力な補完機能 compinit -u # このあたりを使わないとzsh使ってる意味なし setopt autopushd # cdの履歴を表示 setopt pushd_ignore_dups # 同ディレクトリを履歴に追加しない setopt auto_cd # 自動的にディレクトリ移動 ## 履歴 HISTFILE=~/.</description>
    </item>
    
    <item>
      <title>autojumpからzに乗り換えた</title>
      <link>http://tatsuyano.github.io/2014/08/04/autojump-to-z/</link>
      <pubDate>Mon, 04 Aug 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/08/04/autojump-to-z/</guid>
      <description> autojumpを今まで使っていたが、zshrcを編集していたらエラーを吐くようになったので、 このタイミングでzに乗り換えてみた
インストール $ cd .dotfile git clone https://github.com/rupa/z.git .zsh  .zshrc
_Z_CMD=j source ~/.dotfile/.zsh/z.sh precmd() { _z --add &amp;quot;$(pwd -P)&amp;quot; }  キーバインドはjに変更。 ホーム直下に.zというファイルが作成され、そのファイルに履歴が溜まっていく
 z AUTOJUMPよりZ.SHのほうがPYTHONなしで動いて良いよ  </description>
    </item>
    
    <item>
      <title>fuelphpのエラー文言を日本語化する</title>
      <link>http://tatsuyano.github.io/2014/07/29/fuelphp-validation/</link>
      <pubDate>Tue, 29 Jul 2014 04:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/fuelphp-validation/</guid>
      <description>config.phpに設定を追加 app/config/config.php
//&#39;language&#39; =&amp;gt; &#39;en&#39;, // Default language //&#39;language_fallback&#39; =&amp;gt; &#39;en&#39;, // Fallback language when file isn&#39;t available for default language //&#39;locale&#39; =&amp;gt; &#39;en_US&#39;, // PHP set_locale() setting, null to not set &#39;language&#39; =&amp;gt; &#39;ja&#39;, &#39;language_fallback&#39; =&amp;gt; &#39;en&#39;, &#39;locale&#39; =&amp;gt; &#39;ja_JP.UTF-8&#39;,  langディレクトリに日本語用のディレクトリを作成 mkdir app/lang/ja touch app/lang/ja/validation.php  validation.phpの設定は core/lang/en/validation.php を参照 設定されているkey(メソッド)は、core/classes/validation.phpで設定されている
&amp;lt;?php return array( &#39;required&#39; =&amp;gt; &#39;「:label」は必須です&#39;, &#39;min_length&#39; =&amp;gt; &#39;「:label」は:param:1文字以上で入力してください&#39;, &#39;max_length&#39; =&amp;gt; &#39;「:label」は:param:1文字以内で入力してください&#39;, &#39;exact_length&#39; =&amp;gt; &#39;「:label」は:param:1文字で入力してください&#39;, &#39;match_value&#39; =&amp;gt; &#39;「:label」は「:param:1」と一致していません&#39;, &#39;match_pattern&#39; =&amp;gt; &#39;「:label」はパターン「:param:1」と一致しません&#39;, &#39;match_field&#39; =&amp;gt; &#39;「:label」は「:param:1」と一致していません&#39;, &#39;valid_email&#39; =&amp;gt; &#39;「:label」はメールアドレスが不正です&#39;, &#39;valid_emails&#39; =&amp;gt; &#39;「:label」に不正なメールアドレスが含まれてます&#39;, &#39;valid_url&#39; =&amp;gt; &#39;「:label」は不正なURLです&#39;, &#39;valid_ip&#39; =&amp;gt; &#39;「:label」は不正なIPアドレスです&#39;, &#39;numeric_min&#39; =&amp;gt; &#39;「:label」は:param:1以上で入力してください&#39;, &#39;numeric_max&#39; =&amp;gt; &#39;「:label」は:param:1以内で入力してください&#39;, &#39;valid_string&#39; =&amp;gt; &#39;「:label」は:param:1で入力する必要があります&#39;, );  自前のvalidation(helperクラス)を作成する mkdir app/classes/helper touch app/classes/helper/myvalidation.</description>
    </item>
    
    <item>
      <title>fuelphpでAgentClassを設定する</title>
      <link>http://tatsuyano.github.io/2014/07/29/fuelphp-use-agent-class/</link>
      <pubDate>Tue, 29 Jul 2014 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/fuelphp-use-agent-class/</guid>
      <description> ブラウザの識別やモバイルフォンとPCの識別をするには、fuelではAgentクラスを使用する。
AgentクラスはPHPのget_browser関数を利用する。
get_browser関数は、UA情報をBrowser Capabilities Projectというサイトから取得する。 fuelではこのサイトからUA情報を取得(キャッシュ化し2回目のアクセスからキャッシュを参照)し、識別する。
configファイルにUA情報(サイト)の取得先URLなどを設定 fuel/app/config/config.php
&#39;browscap&#39; =&amp;gt; array( &#39;enabled&#39; =&amp;gt; true, &#39;url&#39; =&amp;gt; &#39;http://browsers.garykeith.com/stream.asp?BrowsCapINI&#39;, &#39;method&#39; =&amp;gt; &#39;wrapper&#39;, &#39;file&#39; =&amp;gt; &#39;/tmp/php_browscap.ini&#39;, ),  キャッシュの保存先について fuelでは fuel/app/cache にキャシュを保存している
cache └── fuel └── agent ├── browscap.cache └── browscap_file.cache  キャッシュ周りで権限エラーがでたので、権限を777にする
chmod -R 777 fuel/app/cache/  Agentクラスの実装 Agent::is_mobiledevice();  参考サイト  FuelPHPのAgentクラスと拡張 Agent Class FuelPHPのAgentクラスによる端末振り分けが簡単すぎる  関連する記事  fuelphpのエラー文言を日本語化する fuelphpでredisを使う  </description>
    </item>
    
    <item>
      <title>daemontoolsのインストール</title>
      <link>http://tatsuyano.github.io/2014/07/29/install-daemontools/</link>
      <pubDate>Tue, 29 Jul 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/install-daemontools/</guid>
      <description>ダウンロード
# mkdir -p /package # chmod 1755 /package # cd /package # wget http://cr.yp.to/daemontools/daemontools-0.76.tar.gz # tar zxvf daemontools-0.76.tar.gz  インストールスクリプトの修正
/package/admin/daemontools-0.76/src/conf-cc
gcc -O2 -Wimplicit -Wunused -Wcomment -Wchar-subscripts -Wuninitialized -Wshadow -Wcast-qual -Wcast-align -Wwrite-strings #&amp;lt;- 削除 gcc -O2 --include /usr/include/errno.h #&amp;lt;-書き換え  インストール
# cd /admin/daemontools-0.76 # /package/install  daemontools本体の起動設定 /etc/init/svscan.conf
start on runlevel [12345] respawn exec /usr/local/bin/svscanboot   CentOS6.4にmemcachedを入れた。 memcachedの運用と互換アプリケーション 私家版 daemontools FAQ) 3. トラブルシューティング
  daemontoolsのコマンド ややこしいのですが、実際のコマンドは、/package/admin/daemontools/commandにあります。</description>
    </item>
    
    <item>
      <title>memcachedのインストール</title>
      <link>http://tatsuyano.github.io/2014/07/29/install-memcached/</link>
      <pubDate>Tue, 29 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/29/install-memcached/</guid>
      <description>まずはyumでmemcachedのインストール
# yum install -y memcached memcached-devel  libmemcachedのインストール
 最新のソース  # cd /usr/local/src # wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz # tar xvzf libmemcached-1.0.18.tar.gz # ./configure # make # make install  /etc/sysconfig/memcached
PORT=&amp;quot;11211&amp;quot; USER=&amp;quot;apache&amp;quot; MAXCONN=&amp;quot;1024&amp;quot; CACHESIZE=&amp;quot;64&amp;quot; OPTIONS=&amp;quot;&amp;quot;  PHPで使うために以下の設定 # yum install -y php-pecl-memcached  PHP Extensionのインストール
# git clone https://github.com/php-memcached-dev/php-memcached.git # cd php-memcached # phpize # ./configure --with-libmemcached-dir=/usr/local # make # make install  PHPで設定が有効になっているか確認
$ php -i | grep memcached memcached memcached support =&amp;gt; enabled libmemcached version =&amp;gt; 1.</description>
    </item>
    
    <item>
      <title>fuelphpでredisを使う</title>
      <link>http://tatsuyano.github.io/2014/07/28/use-the-redis-in-fuelphp/</link>
      <pubDate>Mon, 28 Jul 2014 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/28/use-the-redis-in-fuelphp/</guid>
      <description>まずはredisのインストールから
$ yum --enablerepo=epel install -y redis $ /etc/init.d/redis start redis-server を起動中: [ OK ]  confの場所
$ emacs /etc/redis.conf  redisが正常にインストールされているか確認
$ redis-cli redis 127.0.0.1:6379&amp;gt; set name &#39;hoge&#39; OK redis 127.0.0.1:6379&amp;gt; get name &amp;quot;hoge&amp;quot;  保存されているKEYを表示
$ redis-cli redis 127.0.0.1:6379&amp;gt; KEYS * 1) &amp;quot;particles&amp;quot; 2) &amp;quot;name&amp;quot; redis 127.0.0.1:6379&amp;gt;  fuelphpの設定 config/db.php
&#39;redis&#39; =&amp;gt; array( &#39;default&#39; =&amp;gt; array( &#39;hostname&#39; =&amp;gt; &#39;127.0.0.1&#39;, &#39;port&#39; =&amp;gt; 6379 ) ),  config.session.php
&#39;driver&#39; =&amp;gt; &#39;redis&#39;, .</description>
    </item>
    
    <item>
      <title>PHP5.4から error_reportingのE_ALLにE_RISTRICTが加わった</title>
      <link>http://tatsuyano.github.io/2014/07/28/e_ristrict-is-added-to-the-e_all/</link>
      <pubDate>Mon, 28 Jul 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/28/e_ristrict-is-added-to-the-e_all/</guid>
      <description> fuelphp案件でcomposer経由でxml_rpc2をインストールしたら、以下のようなエラーが出た
Uncaught exception Fuel\Core\PhpErrorException: Non-static method PEAR::loadExtension() should not be called statically  最初はソースの依存関係が原因かなあと思ったが、調べてみるとそうではなく PHP5.4から error_reportingのE_ALLにE_RISTRICTが加わったことで、エラーと判定されるようになった
 php5.4からはerror_reportingのE_ALLにE_RISTRICTが含まれる PHPでHTML上にエラー表示/非表示する php.ini 設定  対象箇所でのみerror_reportingを止めることにした production環境以外で、かつ一部分でのみerror_reportingを止めたかったので、対象箇所の前後で一時的に解除した
$before_level = error_reporting(0); // error_report解除 $options = array(&#39;prefix&#39; =&amp;gt; &#39;package.&#39;); $client = \XML_RPC2_Client::create(&#39;http://pear.php.net/xmlrpc.php&#39;, $options); $result = $client-&amp;gt;info(&#39;XML_RPC2&#39;); print_r($result); error_reporting($before_level); // error_reportを元に戻す   error_reporting 定義済み定数  </description>
    </item>
    
    <item>
      <title>mysqlを5.1-&gt;5.6に再インストールする</title>
      <link>http://tatsuyano.github.io/2014/07/28/reinstall-mysql56/</link>
      <pubDate>Mon, 28 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/28/reinstall-mysql56/</guid>
      <description>CentOS6の標準のyumでMysqlをインストールすると、バージョンが5.1だったので、再度yumで5.6を入れなおす。
mysql5.6の性能  MySQL 5.6での機能強化点 - パフォーマンスと使い勝手を大きく向上 開発スピードアクセル全開ぶっちぎり！日本よ、これがMySQL 5.6だッ！！ MySQL 5.1-&amp;gt;5.6のmy.cnfの差分とか  yumでインストールしたmysqlのパッケージの確認 $ rpm -qa | grep mysql mysql-libs-5.1.73-3.el6_5.x86_64 mysql-server-5.1.73-3.el6_5.x86_64 php-mysqlnd-5.5.10-1.el6.remi.1.x86_64 # &amp;lt;- これはphp5.5のパッケージ mysql-5.1.73-3.el6_5.x86_64  依存関係の解消 ただmysql-libsはcronやpostfixが使用しているため、先に依存関係を解消する必要がある
$ wget ftp://ftp.jaist.ac.jp/pub/mysql//Downloads/MySQL-5.6/MySQL-shared-compat-5.6.17-1.el6.x86_64.rpm $ rpm -Uvh MySQL-shared-compat-5.6.17-1.el6.x86_64.rpm 準備中... ########################################### [100%] 1:MySQL-shared-compat ########################################### [100%] 警告: /etc/my.cnf は /etc/my.cnf.rpmsave として保存されました。  MySQL-shared-compatは、mysql-libsと同等のライブラリを提供し、mysql-libsを置き換えてくれる
パッケージの削除 yum remove mysql*  削除されたパッケージ
========================== Package ========================= Removing: mysql mysql-community-release mysql-server Transaction Summary ========================== Remove 3 Package(s)   CentOS6.</description>
    </item>
    
    <item>
      <title>vagrant-aws-pluginをインストール</title>
      <link>http://tatsuyano.github.io/2014/07/21/install-vagrant-aws-plugin/</link>
      <pubDate>Mon, 21 Jul 2014 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/21/install-vagrant-aws-plugin/</guid>
      <description>vagrant-awsプラグインを使うことで、コマンドラインで インスタンスの作成、起動ができるようになります。
vagrant-aws(plugin)のインストール $ vagrant plugin install vagrant-aws Installing the &#39;vagrant-aws&#39; plugin. This can take a few minutes... Installed the plugin &#39;vagrant-aws (0.4.1)&#39;!  インストールされているpluginの確認 $ vagrant plugin list vagrant-aws (0.4.1) vagrant-login (1.0.1, system) vagrant-share (1.0.1, system)  BOXのインストール $ vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box ==&amp;gt; box: Adding box &#39;dummy&#39; (v0) for provider: box: Downloading: https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box ==&amp;gt; box: Successfully added box &#39;dummy&#39; (v0) for &#39;aws&#39;! $ vagrant box list chef/centos-6.</description>
    </item>
    
    <item>
      <title>aws はじめました。</title>
      <link>http://tatsuyano.github.io/2014/07/21/start-aws/</link>
      <pubDate>Mon, 21 Jul 2014 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/21/start-aws/</guid>
      <description>現在AWSの無料キャンペーンをやっているので、試してみました。
AWSのアカウント作成 こちらAmazonのサイトに詳細な説明があるので、省略。
 無料アカウント作成の流れ  インスタンスの作成 まずはEC2のコンソール画面を開きます。 REGIONの選択 レスポンスが気になるので、REGIONは「Tokyo」に。真ん中あたりの「Launch Instance」で作成画面に遷移します。 Image(AMI)の選択 「Free tier only」が無料Image(AMI)なので、「Amazon Linux」を選択。 Instanceの選択 こちらも無料の「Micro instances」を選択。 InstanceにTagをつける とりあえず Name というkeyに、「amz_tokyo」というvalueをつけました。 firewallの設定 allow(許可)の条件を設定する模様。固定IPがあるので、SSHにIPを指定します。 とりあえずHTTPとping(Custom ICMP Rule)も設定しました。 秘密鍵の作成、及びダウンロード 最後に秘密鍵を作成しダウンロードします。 DLした秘密鍵のpermissionを600にしてください。
$ chmod 600 .ssh/amz_tokyo.pem  DNS経由で、ssh接続 ユーザは「ec2-user」、接続先IPは、public DNSのURLを指定します。 $ ssh -i .ssh/amz_tokyo.pem ec2-user@ec2-xxxx-xxxx-.ap-northeast-1.compute.amazonaws.com   __| __|_ ) _| ( / Amazon Linux AMI ___|\___|___|  DNSから固定IP(Elastic Ips)に変更する Elastic Ips(EIP)の料金について インスタンスが「起動」しているIPに対してEIPを割り当てても無料だが、 「停止」しているインスタンスに対して、EIPを割り当てたまま放置しておくと1hに$0.01課金されるので注意。
Instanceを指定し、固定IPと紐付ける firewallの再設定 固定IPに変更したので、先ほど設定したfirewallの設定が再度行う。
 EC2でpingを許可する  pingでレスポンスの測定 「Tokyo」以外のREGIONと比較しないと意味がないが、計測方法をメモ。 下記のコマンドは 64byteのリクエストを10回投げて、レスポンスが帰ってくるまで計測結果。</description>
    </item>
    
    <item>
      <title>VagrantとVirtualBoxのインストール</title>
      <link>http://tatsuyano.github.io/2014/07/21/install-vagrant-and-virtualbox/</link>
      <pubDate>Mon, 21 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/21/install-vagrant-and-virtualbox/</guid>
      <description>今回はVagrantが1.5.4、VirtualBoxが4.3.10をインストール
 DOWNLOAD VAGRANT Download VirtualBox  BOXのインストール 新しくできたVAGRANT CLOUDにあるBOXをインストール
$ vagrant add chef/centos-6.5 1) virtualbox 2) hyperv Enter your choice: 1  仮想マシンを作る まずは設定ファイルを置くためのディレクトリを掘る $ mkdir -p ~/Vagrant/CentOS65 $ cd /Vagrant/CentOS65  インストールされているBOXの確認 $ vagrant box list $ chef/centos-6.5 (virtualbox, 1.0.0)  初期化と起動 $ vagrant init chef/centos-6.5 $ vagrant up  仮想マシンへの接続 $ vagrant ssh  仮想マシンのIPを固定にする Vagrantfileのconfig.vm.networkをコメントインする
$ grep -ir &amp;quot;private_network&amp;quot; ~/Vagrant/Centos65/Vagrantfile /$HOME/Vagrant/Centos65/Vagrantfile: # config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.</description>
    </item>
    
    <item>
      <title>流行りのpecoをcentosにインストールしました</title>
      <link>http://tatsuyano.github.io/2014/07/02/installed-the-peco-to-centos/</link>
      <pubDate>Wed, 02 Jul 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/07/02/installed-the-peco-to-centos/</guid>
      <description>最近購読しているブログとかに、pecoインストールしました的な記事をよく見かけるようになったので、御多分に洩れず入れてみました。
で、そもそもpecoって何なの？って話なんですが、READMEに書いてあるように、コマンドの履歴をいい感じにフィルタリングしてくれるツールみたいです。
元々はpercolというpythonで作られたツールを、JPAのMakiさんがgolangで作りなおしたものらしいです。 ツール作るのに、golang流行ってますね。。
こうやってperlの人が他の言語で開発しているのを見ると、少しノスタルジックな気持ちになるのは秘密です。
golangのインストール anyenvでバージョン管理できるのかなと思ったけどなかった &amp;amp; yumのリストになかった(2014&amp;frasl;06)ので、手動でmake?しました。 まずはgolangのパッケージを選びます。対象はcentos6の64bit(2014&amp;frasl;06)。
インストール方法は、詳しくは本家の翻訳サイトに乗っています。
$ sudo bash $ cd /usr/local/src # wget http://golang.org/dl/go1.3.linux-amd64.tar.gz # tar -C /usr/local -xzf go1.3.linux-amd64.tar.gz  golangの環境変数 今回はシステムワイドにインストールしたので、/etc/profileに設定します。
# emacs /etc/profile export GOROOT=/usr/local/go export GOPATH=/usr/local/mygo export PATH=$PATH:$GOPATH/bin:$GOROOT/bin # source /etc/profile # which go /usr/local/go/bin/go  GOPATHには、golangのソフトウェア(pecoとか)が入ります。
pecoのインストール golangのソフトウェアは、go getコマンドを使うみたいです。
# go get github.com/peco/peco/cmd/peco # which peco /usr/local/mygo/bin/peco   Ctrl-r &amp;hellip; リスト(履歴)の表示 Ctrl-g &amp;hellip; リストから抜ける  pecoの設定 pecoの設定はこちら(pecoを使い始めた)を参考にさせてもらいました。</description>
    </item>
    
    <item>
      <title>blogをoctopressからghostに乗り換えました。</title>
      <link>http://tatsuyano.github.io/2014/05/08/change-to-ghost-from-octopress/</link>
      <pubDate>Thu, 08 May 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/05/08/change-to-ghost-from-octopress/</guid>
      <description>深い理由はないのですが、何となく乗り換えてみました。
また備忘がてらのんびり書いていきたいと思います。</description>
    </item>
    
    <item>
      <title>東京マラソン2014</title>
      <link>http://tatsuyano.github.io/2014/03/01/tokyo-marathon-2014/</link>
      <pubDate>Sat, 01 Mar 2014 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2014/03/01/tokyo-marathon-2014/</guid>
      <description>なんと倍率10倍の東京マラソン、当たってしまいました！
単純計算10年間応募して1回当たるかどうかなんで、応募してたこともすっかり忘れてただけに、うれしさ倍増です！
レース会場、及びレースサポート いやあ、やっぱりレース会場が近いっていいですね。 今まで前泊せずに都心から行ける大会を選んで参加してましたが、それでも朝5起きだったり、夜行バスだったりで、いかに快適にレース会場にいけるかって、結構走る上で大事なポイントだったんですが、 今回は会場まで電車で15分とギリギリまでのんびりできました。
また、今回参加して知ったのですが、スタート地点の新宿で預けた荷物は、お台場まで、バスで運んでくれるんですね。さすがワールドマラソンメジャーズ!
レースコンディション 気温4度、天候は曇り時々雪と、はじめは少し肌寒く感じましたが、走り始めるとちょうどいい感じでした。また高低差もあまりなく、道路も当然舗装されているので、とても走りやすかったです。
結果 で肝心の結果、自己ベストを少し更新して4:48:05でした。
今までのレースでは、服装が間違えたり、夜行バスで寝不足だったりと、レース前の調整段階でうまくいかないことが多かったのですが、今回は初めてそういった心配のない大会でした。また来年出たいなあ。</description>
    </item>
    
    <item>
      <title>elpaでyasnippet.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/10/16/install-yasnippet-to-elpa/</link>
      <pubDate>Wed, 16 Oct 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/10/16/install-yasnippet-to-elpa/</guid>
      <description> 今さらですけどysnippet.elをインストールすることにしました。
でいつものようにel-getでインストールしようとしたんですが、
昨日scss-modeをインストールしようとした時と同じで、
githubに接続するところで止まってしまう(インストールが完了しない)。
もうel-getやめようかなあ。elpaだけのほうが楽っぽいし。。
とりあえず、今回はelpaでインストールすることにしました。
elpaでのインストール M-x list-packages でパッケージリストを表示させ、ysnippetの行で[x] &amp;amp; [i]でインストール。
~/.emacs.d/conf/82-yasnippet.el
;; yasnippetを置いているフォルダにパス (add-to-list &#39;load-path (expand-file-name &amp;quot;~/.emacs.d/elisp/el-get/package/elpa/yasnippet-0.8.0&amp;quot;)) (require &#39;yasnippet) (setq yas-snippet-dirs &#39;(&amp;quot;~/.emacs.d/elisp/el-get/package/elpa/yasnippet-0.8.0/snippets&amp;quot; )) (yas-global-mode 1)  スニペットの登録 試しに、html-modeでスペースのエスケープ文字を登録してみます。
[sp]と入力してtabを押下すると[&amp;amp;nbsp]と出力できるようにする
htmlモードに変更
M-x html-mode  snippetのひな形作成
M-x yas/new-snippet  # -*- mode: snippet -*- # name: &amp;amp;nbsp; # key: sp # -- &amp;amp;nbsp;  html-modeで使いたいので、保存先は以下にします。
/.emacs.d/elisp/el-get/package/elpa/yasnippet-0.8.0/snippets/html-mode/sp  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Emacsで「ysnippet.el」を使ってみる Emacs/yasnipettで、やさしいコードスニペットの作り方 yasnippet 8.0の導入からスニペットの書き方、anything/helm/auto-completeとの連携  </description>
    </item>
    
    <item>
      <title>auto-installでscss-modeをインストールする</title>
      <link>http://tatsuyano.github.io/2013/10/15/emacs-install-scss-mode/</link>
      <pubDate>Tue, 15 Oct 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/10/15/emacs-install-scss-mode/</guid>
      <description> el-getでうまくインストールできなかったので、今回はauto-installを使いました。
M-x auto-install-from-url RET https://raw.github.com/antonj/scss-mode/master/scss-mode.el  touch ~/.emacs.d/conf/55-scss.el
;; scss-mode ;; https://github.com/antonj/scss-mode (autoload &#39;scss-mode &amp;quot;scss-mode&amp;quot;) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.\\(scss\\|css\\|sass\\)\\&#39;&amp;quot; . scss-mode)) (setq scss-compile-at-save nil) ;; auto-comple (add-to-list &#39;ac-modes &#39;scss-mode) (add-hook &#39;scss-mode-hook &#39;ac-css-mode-setup)  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 emacsでscssを扱うscss-modeを入れる Emacsにscss-modeをいれた。  </description>
    </item>
    
    <item>
      <title>sassとcompassをインストールする</title>
      <link>http://tatsuyano.github.io/2013/10/14/install-sass-and-compass/</link>
      <pubDate>Mon, 14 Oct 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/10/14/install-sass-and-compass/</guid>
      <description>最近PGでもCSSがいじれて当たり前いう空気をヒシヒシと感じ、
せっかくなんでsassを勉強することにしました。
用語の整理  less &amp;hellip; CSS拡張メタ言語。コンパイルして使う less -&amp;gt; css scss &amp;hellip; CSS拡張メタ言語。コンパイルして使う scss -&amp;gt; css sass &amp;hellip; scssのバージョン違い。広義の意味ではこれもscss。ファイルの拡張子も.scss compass &amp;hellip; cssのFW、というかツールに近い。  どれを使うか 文法がシンプルでかつoctopressやrailsで採用されているので、sassを使うことにしました。
sassを記述するのにcompassを使うと便利、というか標準みたいなのでcompassも使います。
sassのインストール gem install sass gem list sass sass (3.2.12) gem which sass /home/hoge/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/sass-3.2.12/lib/sass.rb  compassのインストール gem install compass gem list compass compass (0.12.2) gem which compass /home/noguchi/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/compass-0.12.2/lib/compass.rb  パスを通す パスが通っていなかったので、パスの通っている
$HOME/.rbenv/shims/以下に同じ名前のスクリプトを置きました。
cp -a $HOME/.rbenv/shims/rake $HOME/.rbenv/shims/sass cp -a $HOME/.rbenv/shims/rake $HOME/.rbenv/shims/compass  プロジェクトの作成 compass create test --sass-dir &amp;quot;sass&amp;quot; --css-dir &amp;quot;css&amp;quot; --javascripts-dir &amp;quot;js&amp;quot; --images-dir &amp;quot;img&amp;quot; tree test test ├── config.</description>
    </item>
    
    <item>
      <title>livedoorプロバイダを使っていて、Bフレッツからフレッツ光ネクストに切り替えたらネットに繋がらなくなった</title>
      <link>http://tatsuyano.github.io/2013/09/27/connect-with-livedoor-provider-and-flets-hikari-pppoe/</link>
      <pubDate>Fri, 27 Sep 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/09/27/connect-with-livedoor-provider-and-flets-hikari-pppoe/</guid>
      <description>引越で、Bフレッツからフレッツ光ネクストに変わったら、
ネットに繋がらなくなって、少し焦ったという話。
livedoorプロバイダの光ファイバー(固定IP一つ)を使っていて、
引越しなどで、Bフレッツ(VDSL)からフレッツ光ネクスト(PPPoE)に切り替えた場合、
livedoorサポートに連絡して、新たにアカウントを取りなおす必要があります。
この時、固定IPとパスワードが変わります。
知っていればなんてことない話なのですが、
ネットにそれっぽい情報がなかったので記事に残しておきます。</description>
    </item>
    
    <item>
      <title>HandlerSocketをインストールする</title>
      <link>http://tatsuyano.github.io/2013/06/10/handlersocket-install/</link>
      <pubDate>Mon, 10 Jun 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/06/10/handlersocket-install/</guid>
      <description>インストールする内容  rpm版 MySQL 5.1.68 HandlerSocket-Plugin-for-MySQL 最新版(2013/06/05) php-handlersocket 0.3.1  作業の流れ  すでにyumでインストールしてあるMySQLの削除 MySQL(rpm版)のインストール Handler Socketのインストール php-handlersocketのインストール  すでにyumでインストールしてあるMySQLの削除 前にテスト導入で成功したバージョンにあわせるため、yumでインストールしたMySQLを削除
インストール済みのMySQLを確認 yum list installed | grep mysql mysql.x86_64 5.1.69-1.el6_4 @updates mysql-libs.x86_64 5.1.69-1.el6_4 @updates mysql-server.x86_64 5.1.69-1.el6_4 @updates php-mysql.x86_64 5.3.3-22.el6 @base  chkconfigからmysqldをoff chkconfig --list mysqld mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off chkconfig mysqld off  yumでインストールしたMySQLを削除 yum -y remove mysql mysql-server mysql-libs  MySQL(rpm版)のインストール 過去にインストールしたmysqlのバージョンは5.1.66 だったが見つからなかったので、
近いバージョンの5.1.68をインストールすることにした。
インストール先のディレクトリ作成 mkdir -p /usr/src/redhat/RPMS/x86_64/ cd /usr/src/redhat/ mkdir BUILD SOURCES SPECS SRPMS  rpmファイルのダウンロード cd /usr/src/redhat/RPMS/x86_64/ wget http://download.</description>
    </item>
    
    <item>
      <title>Octopressのコードスニペットの設定</title>
      <link>http://tatsuyano.github.io/2013/05/10/octopress-clippit/</link>
      <pubDate>Fri, 10 May 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/05/10/octopress-clippit/</guid>
      <description>Octopressの標準設定 rdiscountの場合、```で囲う。色は付かない。
ls CHANGELOG.markdown Gemfile.lock Rakefile config.rb plugins sass Gemfile README.markdown _config.yml config.ru public source  scheme ``` schemeで囲う。自分はelispの場合などに使っている。
(defvar dvar 1 &amp;quot;実験用&amp;quot;) ;; -&amp;gt; 1 (defvar dvar 2) ;; -&amp;gt; 1 値が上書きされない (setq dvar 3) ;; -&amp;gt; 3 defvar以外で宣言(代入)された場合は上書きされてしまう。  Js codeblock lang:jsで囲う。
class Animal constructor:(name) - @name = name say:(word) - console.log &#34;#{@name} said: #{word}&#34; class Dog extends Animal constructor:(name) - super name say:(word) - super &#34;Bowwow, #{word}&#34;</description>
    </item>
    
    <item>
      <title>octopressをインストールする</title>
      <link>http://tatsuyano.github.io/2013/05/09/octopress-install/</link>
      <pubDate>Thu, 09 May 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/05/09/octopress-install/</guid>
      <description>Octopressとは github上にブログを構築できるruby製のフレームワーク。
インストール 複数PCで更新したいので、Dropbox上にインストール。手順は公式サイトと同じです。
事前にrbenvかRVMでruby1.9.3以上をインストールしておいてください。
cd $HOME/Dropbox/ git clone git://github.com/imathis/octopress.git octopress cd octopress gem install bundler rbenv rehash bundle install  rake インストール時にエラー rakeをインストールしたさいにOctopressで使うバージョンが違うというエラーがでた。
rake install rake aborted! You have already activated rake 10.0.4, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.  gemのバージョンは、Gemfileに設定されているので、rakeのバージョンを 10.0 から 0.9に変更し、再度 rake install を行う
octopress/Gemfile
source &amp;quot;http://rubygems.org&amp;quot; group :development do gem &#39;rake&#39;, &#39;~&amp;gt; 0.9&#39; # 10.0 -&amp;gt; 0.9 gem &#39;jekyll&#39;, &#39;~&amp;gt; 0.</description>
    </item>
    
    <item>
      <title>tmuxでもpbcopy、pbpasteを使えるように設定する</title>
      <link>http://tatsuyano.github.io/2013/05/01/pbcopy-pbpaste/</link>
      <pubDate>Wed, 01 May 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/05/01/pbcopy-pbpaste/</guid>
      <description>最近しりましたpbcopyとpbpasteをtmuxで使う方法です。
pbcopyとpbpasteの使い方 ls -la | pbcopy # 標準出力 -&amp;gt; クリップボード pbpaste &amp;gt; hoge.txt # クリップボード -&amp;gt; 標準出力  pbcopyとpbpasteをtmuxで使うための設定 tmuxで、pbcopyとpbpasteが正しく動かない。
brew install reattach-to-user-namespace  .tmux.conf
set -g default-command &#39;reattach-to-user-namespace -l zsh&#39;  tmuxにpbcopyのキーバインドを追加 Mac の tmux でクリップボードを使う。のサイトを参考にpbcopyのキーバインドを追加しました。
.tmux.conf
# buffer copy bind C-q run-shell &#39;reattach-to-user-namespace tmux-pbcopy&#39;  emacs $HOME/Dropbox/dotfile/mybin/tmux-pbcopy
#! /bin/sh tmux save-buffer /tmp/.tmux_to_pbcopy cat /tmp/.tmux_to_pbcopy | pbcopy # 以下はメッセージを表示するだけ。無くてもOK。 HEAD=`head -1 /tmp/.tmux_to_pbcopy` TAIL=`tail -1 /tmp/.tmux_to_pbcopy` tmux display-message &amp;quot;Copy: $HEAD - $TAIL&amp;quot;  使い方  C-z C-[ でコピーモードに入る。 C-SPCで選択開始 C-wでバッファにコピー C-z C-qでバッファの内容をクリップボードにコピー  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>git-gutter.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/04/16/emacs-git-gutter/</link>
      <pubDate>Tue, 16 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/16/emacs-git-gutter/</guid>
      <description>gitの差分を表示してくれる git-gutter を入れてみました。
インストール はじめREADME.mdにかいてあるとおり、M-x package-install git-gutter で
  Installation You can install git-gutter.el from MELPA with package.el (M-x package-install git-gutter). And you can also install it with el-get.
  ELPA経由インストールしてみたが、versionが0.28と少し古くエラーがでたので、el-getのrecipeを用意してインストールした。
(:name emacs-git-gutter :type github :website &amp;quot;https://github.com/syohex/emacs-git-gutter&amp;quot; :description &amp;quot;[My Recipes] git-gutter.el is port of GitGutter which is a plugin of Sublime Text.&amp;quot; :pkgname &amp;quot;syohex/emacs-git-gutter&amp;quot;)  設定 とりあえず差分の表示だけがほしいので、最小限の設定に。
.emacs.d/conf/81-git-gutter.el
(require &#39;git-gutter) ;;(global-git-gutter-mode t) (setq git-gutter:separator-sign &amp;quot;|&amp;quot;) (set-face-foreground &#39;git-gutter:separator &amp;quot;yellow&amp;quot;) (add-hook &#39;cperl-mode-hook &#39;git-gutter-mode) (add-hook &#39;js2-mode-hook &#39;git-gutter-mode) (add-hook &#39;php-mode-hook &#39;git-gutter-mode) (add-hook &#39;ruby-mode-hook &#39;git-gutter-mode)  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>掛川・新茶マラソン</title>
      <link>http://tatsuyano.github.io/2013/04/15/kakegawa-shincha-marathon/</link>
      <pubDate>Mon, 15 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/15/kakegawa-shincha-marathon/</guid>
      <description>昨日、第8回掛川・新茶マラソンに参加してきました。
まずレース結果ですが、5時間オーバーの5:02:38(ネット)で、惨敗でした。。
それでは簡単にですがレビューしたいと思います。
会場までのアクセス 今回行きは、6:33分発の東海道新幹線で掛川駅まで行き、掛川駅からシャトルバスで、会場の「つま恋スポーツ＆アミューズメント」に行きました。
時間は予定どおり、スタートの1時間前に着いたのですが、駐車場から会場までが遠く、スタートの9:30に間に合わずになんと9:40分スタートになってしまいました。。
余裕をもって調整したつもりでしたが、これはちょっと予想外でした。
レースコンディション 天候は曇り時々晴れで、程よい風が吹いていて、とても走りやすい状態でした。
また体調調節もうまくいき、今までのフルマラソンの中で一番いいコンディションでした。
コース コースは思っていたよりフラットで、走りやすかったです。
また給水場の数も多く、とても良かったです。
27km地点くらいからペースダウン 前半、予定通りのペースでいけ、これは4時間30分を切れるかもしれないと考えていたのですが、27km地点で少し立ちくらみをし、ペースが落ちてしまいました。
実は今回、レース1ヶ月前ぐらいから膝に痛みがあり、あまり練習ができずスタミナが切れてしまいました。
総評 レースコンディション、体調調整とはじめてうまくいった大会でしたが、そもそもの練習不足という、もったいない大会になってしまいました。</description>
    </item>
    
    <item>
      <title>ディレクトリ中のファイルサイズの合計値を再帰的に集計したい その２</title>
      <link>http://tatsuyano.github.io/2013/04/07/find-cmd-on-mac-2/</link>
      <pubDate>Sun, 07 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/07/find-cmd-on-mac-2/</guid>
      <description>前回のディレクトリ中のファイルサイズの合計値を再帰的に集計したい その１でmac用、linux用のワンライナーを関数として登録したのですが、 mac用のワンライナーが厳密には、期待した結果とは違うので、作り直してみました。
#!/usr/bin/env perl use strict; use constant DELETED_STDOUT =&amp;gt; &amp;quot;\x1b[1A&amp;quot;; use constant INITIALIZE_STDOUT =&amp;gt; &amp;quot; &amp;quot;; my $dir = $ARGV[0] || &amp;quot;.&amp;quot;; my $info = file_info($dir); printf INITIALIZE_STDOUT; print_info($info); sub file_info { my $dir = shift; my @list = (); my $info = { file_size =&amp;gt; 0, directories =&amp;gt; 0, files =&amp;gt; 0 }; opendir(DIR, $dir) or die(&amp;quot;Can not open directory:$dir ($!)&amp;quot;); @list = readdir(DIR); closedir(DIR); foreach my $file (sort @list){ next if $file =~ /^\.</description>
    </item>
    
    <item>
      <title>ディレクトリ中のファイルサイズの合計値を再帰的に集計したい その１</title>
      <link>http://tatsuyano.github.io/2013/04/06/find-cmd-on-mac-1/</link>
      <pubDate>Sat, 06 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/06/find-cmd-on-mac-1/</guid>
      <description>たまにディレクトリ中のファイルサイズの合計値を、再帰的に集計したいときがある。
で、いつも考えなしにこちらのサイトで紹介されているコマンドを叩いていたわけなんですが、
ディレクトリ中のファイルサイズ合計値を バイト表示
find -type f -printf &amp;quot;%s\n&amp;quot; |perl -ne &#39;$i++; $byte += $_; $str = &amp;quot;\r$i files, $byte byte&amp;quot;; $str =~ s/(\d{1,3})(?=(?:\d\d\d)+(?!\d))/$1,/g; print $str&#39;  mac(osx)だと動かない。どうやらmacのfindのオプションに printf がないもよう。
Why does Mac&amp;rsquo;s $find not have the option -printf?
そこで printf f &amp;lsquo;%s\n&amp;rsquo; のかわりに stat -f &amp;lsquo;%z&amp;rsquo; を代用してみた。
find ./ -print0 | xargs -0 stat -f &#39;%z&#39; | perl -ne &#39;$i++; $byte += $_; $str = &amp;quot;\r$i files, $byte byte&amp;quot;; $str =~ s/(\d{1,3})(?</description>
    </item>
    
    <item>
      <title>iterm2のカラースキームを変更する</title>
      <link>http://tatsuyano.github.io/2013/04/05/item2-color-scheme/</link>
      <pubDate>Fri, 05 Apr 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/04/05/item2-color-scheme/</guid>
      <description>最近は background を白系の透過で使っていたが、なんとなくまた黒系の透過に戻してみた。
毎回自分で設定するのは面倒なので、今回はこちらの方のカラースキームを使わしてもらうことにした。
iTerm 2 で使えるカラースキーム、Japanesque を作った
カラースキームのダウンロード $ mkdir Dropbox/src/itermcolors $ cd Dropbox/src/itermcolors $ wget https://raw.github.com/aereal/dotfiles/master/colors/Japanesque/Japanesque.itermcolors  カラースキームの設定 新しい Profile を作成する Preferences &amp;gt; Profiles &amp;gt; General &amp;gt; +
Preferences &amp;gt; Profiles &amp;gt; General &amp;gt; Name
Preferences &amp;gt; Profiles &amp;gt; General &amp;gt; Other Actions &amp;gt; Set as Default
ダウンロードしたカラースキームを import する Import を行うと、Load Presets に新たに Japanesque が追加される。
Preferences &amp;gt; Profiles &amp;gt; Colors &amp;gt; Import
Preferences &amp;gt; Profiles &amp;gt; Colors &amp;gt; Japanesque</description>
    </item>
    
    <item>
      <title>emacsでのRuby環境(Rsenseでオムニ補完)</title>
      <link>http://tatsuyano.github.io/2013/03/26/emacs-rsense/</link>
      <pubDate>Tue, 26 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/26/emacs-rsense/</guid>
      <description>今更ですが、最近yugaiさんの「初めてのRuby」を読み始めています。すごく読みやすくて楽しいです。
そこでemacsのRuby環境もちゃんと用意することにしました。
Rsenseとは Rsenseは、rubyコードのオムニ補完(文脈を解析して行う補完)をしてくれるツールです。
emacsでのrubyのコード補完は、他にもauto-complete(単体)、auto-complete-ruby、rcodetools などあります。
※ Rsense は Java Runtime Environment (JRE) 1.5以上が必要です。JREはOSXに標準でインストールされています。
Rsense のインストール 本家サイトから最新版をwgetします。
※ emacs には el-get.le を事前にインストールしておいてください。
wget http://cx4a.org/pub/rsense/rsense-0.3.tar.bz2 tar xvzf rsense-0.3.tar.bz2 mkdir .emacs.d/opt mv rsense-0.3 .emacs.d/opt/  .rsenseの作成 次に Rsense に Rubyの環境変数を指定するための ~/.rsense を作成します。
cd $HOME/.emacs.d/opt/rsense-0.3/ chmod +x ./bin/rsense bin/rsense version &amp;gt;&amp;gt; RSense 0.3 # &amp;lt;- 今回インストールしたRsenseのバージョン # $HOME 直下に ~/.rsenseファイルを作成、環境変数が設定されている ruby ./etc/config.rb &amp;gt; ~/.rsense  Java Runtime が正しく動くか確認 生成した ~/.rsense の環境変数が正しく設定されていないと Java Runtime が動きません。</description>
    </item>
    
    <item>
      <title>el-get.elでinit-loader.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get-init-loader/</link>
      <pubDate>Tue, 19 Mar 2013 06:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get-init-loader/</guid>
      <description>インストールしたいパッケージが、el-get のパッケージリストにない場合 自分でレシピを作成(設定)し、パッケージリストに追加します。リストに追加する方法は２つあります。
 レシピ(rcpファイル)を作成し .emacs.d/elisp/el-get/el-get/recipes/ 以下にファイルを置く方法 init.el などに直接設定を記述する方法  どちらも設定する内容は一緒なので、今回は直接設定することにします。設定する内容は主に以下のようになります。
(:name {パッケージ名} :type {パッケージ配布方法: elpa, emacswiki, git, svn, http, ...} :url {パッケージURL} :after {後処理} ...)   el-getありきのinit.elに書き換えてみた  最新のinit-loader.el init-loader.elの最新ファイルは 現在gist にあるので、
まずは rawファイルのURLを確認します。
https://raw.github.com/gist/1021706/init-loader.el
レシピの追加 init.el
(setq el-get-dir &amp;quot;~/.emacs.d/elisp/el-get/&amp;quot;) (unless (require &#39;el-get nil &#39;noerror) (with-current-buffer (url-retrieve-synchronously &amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;) (goto-char (point-max)) (eval-print-last-sexp))) (setq el-get-sources &#39;( (:name init-loader :type http :url &amp;quot;https://raw.github.com/gist/1021706/init-loader.el&amp;quot; :description &amp;quot;[My Recipes] Split management init.el.&amp;quot;) )) (el-get &#39;sync)  インストール レシピが正しい場合、 M-x el-get-list-packages で init-loader が追加されているので、インストールできます。</description>
    </item>
    
    <item>
      <title>el-get.elでauto-install.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-install/</link>
      <pubDate>Tue, 19 Mar 2013 05:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-install/</guid>
      <description> まずは el-get.el のインストール が完了していることが前提になります。
インストール まずは M-x el-get-list-packages で利用できるパッケージを一覧表示します。
次に インストールしたいパッケージに「i」を押してチェックをいれ、「x」を押すと自動でインストールが始まります。
インストールしたパッケージは、 (setq el-get-dir &amp;ldquo;~/.emacs.d/elisp/el-get/&amp;ldquo;) で指定したディレクトリ直下にディレクトリ単位にインストールされます。
またインストールしたパッケージを削除する場合は、M-x el-get-remove で削除します。
auto-installでインストールしたパッケージの置場所 el-get.el でインストールしたパッケージと、auto-install.el でインストールしたパッケージを分けて管理したいので、
auto-install用のディレクトリとパスの設定をします。
.emacs.d
└── elisp
├── auto-install &amp;hellip; auto-installでインストールしたパッケージの置場所
└── el-get &amp;hellip; el-getでインストールしたパッケージの置場所
├── auto-install &amp;hellip; auto-install.elの本体。本体はel-getでインストールしたため
└── el-get &amp;hellip; el-get.el自身もまた、el-getに管理されている
auto-installの設定 init.el
(setq load-path (append (list ... (expand-file-name &amp;quot;~/.emacs.d/elisp/auto-install/&amp;quot;) ;; &amp;lt;- パスの追加 ) load-path)) ... (require &#39;auto-install) (setq auto-install-directory &amp;quot;~/.emacs.d/elisp/auto-install/&amp;quot;) ;; auto-installでインストールしたパッケージの置場所を指定  </description>
    </item>
    
    <item>
      <title>coffee-modeでauto-completeを使えるようにする</title>
      <link>http://tatsuyano.github.io/2013/03/19/coffee-mode-used-ac-dict/</link>
      <pubDate>Tue, 19 Mar 2013 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/coffee-mode-used-ac-dict/</guid>
      <description> まずは coffee-mode.el を el-get で通常通りにインストールします。
auto-complete で補完に使うdict(辞書)について 補完をするときに参照している辞書は、.emacs.d/elisp/el-get/auto-complete/dict/ 配下にあります。
デフォルトでは、coffee-mode 用のdictがないので、js2-mode 用に公開されていた辞書をインストールします。
cd .emacs.d/elisp/el-get/auto-complete/dict/ wget https://raw.github.com/sandai/dotfiles/master/.emacs.d/ac-dict/js2-mode  設定 coffee-mode でauto-complete を使えるようにし、指定した辞書で補完するようにします。
52-coffee-mode.el
(require &#39;coffee-mode) ;; デフォルトだとインデントが８スペースなので、２スペースに変更 ;; http://qiita.com/items/a8d96ae95a1838500e37 (defun coffee-custom () &amp;quot;coffee-mode-hook&amp;quot; (set (make-local-variable &#39;tab-width) 2) (setq coffee-tab-width 2)) (add-hook &#39;coffee-mode-hook &#39;(lambda() (coffee-custom))) ;; auto-complete (add-to-list &#39;ac-modes &#39;coffee-mode) ;; coffee-modeでACを使えるようにする ;; coffee-modeで、追加したjs2-modeのdict(辞書)で補完するようにする ;; wget https://raw.github.com/sandai/dotfiles/master/.emacs.d/ac-dict/js2-mode (add-hook &#39;coffee-mode-hook &#39;(lambda () (add-to-list &#39;ac-dictionary-files &amp;quot;~/.emacs.d/elisp/el-get/auto-complete/dict/js2-mode&amp;quot;) ))  </description>
    </item>
    
    <item>
      <title>gistのファイルをダウンロード(参照)する</title>
      <link>http://tatsuyano.github.io/2013/03/19/gist/</link>
      <pubDate>Tue, 19 Mar 2013 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/gist/</guid>
      <description>gistのファイルをダウンロードするには、通常 git clone を利用するが、ファイル(rawファイル)を直接 wget などしたい場合がある。
その場合は下記のURLで取得する
https://raw.github.com/gist/&amp;lt;パラメータ&amp;gt;/&amp;lt;ファイル名&amp;gt;
例)
https://gist.github.com/zqwell/1021706
↓
https://raw.github.com/gist/1021706/init-loader.el</description>
    </item>
    
    <item>
      <title>el-get.elでパッケージ管理を行う (el-get.elのインストール)</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get/</link>
      <pubDate>Tue, 19 Mar 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get/</guid>
      <description>今までパッケージを手動でインストールしていて、自分が何のパッケージをインストールしたかを
把握できなくなってきていたので、el-get.elでパッケージ管理をすることにしました。
el-get.elでのパッケージ管理の特徴 自分がel-get.elでいいなあと思ったのは、以下の２つ
 自分がどのパッケージをインストールしているのかを簡単に把握できること レシピといって、パッケージごとのインストール方法を柔軟に設定できること  emacsのバージョン emacsのバージョンは homebrew でインストールした「24.1.1」です。
emacs.dの構成 今回、今使っているemacs.dを捨てて、一から作り直すことにしました。
.emacs.d
├── conf &amp;hellip; init-loaderで分割したファイルを入れる
└── elisp &amp;hellip; 手動でパッケージを入れた場合はここに直接入れる
│　├── el-get &amp;hellip; el-get.elでインストールしたパッケージをディレクトリ単位で入れていく
│　└── auto-install &amp;hellip; auto-installでインストールした場合
│
└── init.el &amp;hellip; .emacs.elの代わり。load-pathの設定など
今回は .emacs.el は使わずに代わりに .emacs.d 直下に init.el というファイルを作成します。
また、できるかぎり el-get.el でパッケージ管理を行なっていき、インストールできなかった場合は auto-install でインストールを行うことにします。
auto-install でもインストールできなかった場合は、elispディレクトリ直下に手動でインストールしていきます。
今後のインストール方法(パッケージ管理)の優先度
1.el-get &amp;gt; 2.auto-install &amp;gt; 3.手動
el-get.elのインストール まずは el-get.el 本体のインストールから。事前に上記の .emacs.d の構成を作っておくこと。
el-get.el でインストールしたパッケージは、.emacs.d/elisp/el-get/ 直下に入れていきます。
init.el に以下の設定を入れて、emacsを起動させると自動でインストールが始まります。</description>
    </item>
    
    <item>
      <title>el-get.elでauto-complete.elをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-complete/</link>
      <pubDate>Tue, 19 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/19/emacs-el-get-auto-complete/</guid>
      <description>el-getにインストールされているパッケージリストが古かったので、レシピを更新 パッケージリストには、auto-complete.elがあるのですが、レシピが古くインストールしてもディレクトリの中は空なので、レシピを新たに設定します。
また、auto-complete.el は popup.el と fuzzy.el というelispが必須なのですが、今回 popup.el のレシピを用意し、auto-complete とは別にインストールする必要があります。
※ とりあえず fuzzy.el は別途インストールしなくても動いているので、fuzzy.el は保留。
レシピの追加 10-el-get.el
(setq el-get-dir &amp;quot;~/.emacs.d/elisp/el-get/&amp;quot;) (unless (require &#39;el-get nil &#39;noerror) (with-current-buffer (url-retrieve-synchronously &amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;) (goto-char (point-max)) (eval-print-last-sexp))) (setq el-get-sources &#39;( (:name init-loader :type http :url &amp;quot;https://raw.github.com/gist/1021706/init-loader.el&amp;quot; :description &amp;quot;[My Recipes] Split management init.el. &amp;quot;) (:name popup ;; &amp;lt;- 追加 :type github :website &amp;quot;https://github.com/auto-complete/popup-el&amp;quot; :description &amp;quot;[My Recipes] This section describes the basic data structures and operations of popups.</description>
    </item>
    
    <item>
      <title>moshを使ってみる</title>
      <link>http://tatsuyano.github.io/2013/03/17/mosh/</link>
      <pubDate>Sun, 17 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/17/mosh/</guid>
      <description>去年ぐらいから流行っているmoshを入れてみる。
moshを利用するには、クライアント、サーバー両方にmoshをインストールする必要がある。
またmosh内でsshを利用するため、sshの代価というわけではない。
centosにmoshをmake install git cloneして、インストールスクリプトを実行したほうがいいかも。。
yum --enablerepo=epel install -y protobuf-compiler protobuf-devel boost-devel wget https://github.com/downloads/keithw/mosh/mosh-1.2.3.tar.gz tar xvzf mosh-1.2.3.tar.gz cd mosh-1.2.3 ./configure make make install # インストール先 which mosh /usr/local/bin/mosh  iptablesに追加 emacs /etc/sysconfig/iptables -A INPUT -p udp -m udp --dport 60000:61000 -j ACCEPT /etc/init.d/iptables restart  macにmoshにインストール mosh(mobile-shell)をbrewでインストール
brew update brew install mobile-shell  IO::Ptyというperlモジュールも必要なので、cpanmでインストール
cpanm IO::Pty  zshrcに補完関数を追加
cat &amp;gt;&amp;gt; .zshrc # moshcompdef mosh=ssh  利用方法 利用方法はsshと同じ。</description>
    </item>
    
    <item>
      <title>アシックスストア東京に行って計測してきた</title>
      <link>http://tatsuyano.github.io/2013/03/15/asics-store-tokyo/</link>
      <pubDate>Fri, 15 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/15/asics-store-tokyo/</guid>
      <description>最近膝の痛みがひどく、一度自分のランニングスタイルを確認してみたかったので、アシックスストア東京で計測してきました。
足型測定 STATIC FOOT ID まずは足型の測定から。足が小さい(足長が短い)わりには甲高な足ｗ 我ながらかっこ悪い。
それ以外の気になるの点は、右足のかかとの傾斜角が少しついていることぐらいでしょうか。
プロネーション測定 DYNAMIC FOOT ID 今回の計測で一番の発見がこれ。自分はずっとシューズの「かかと外側のすり減り」がヒドかったので、てっきり「オーバープロネーション」になっていると思い込んでいたのですが、計測した結果「アンダープロネーション」でした。
つまり膝への負担(オーバープロネーション)ではなく、すねの筋肉などに負担がかかっているとのこと。
また店員さんいわく「かかと外側のすり減り」は正常なランニングスタイルだとのこと。
では膝の痛みの原因はなんだろう？ フォームの問題ではないとすると「筋力が足りていない」とか「オーバーワーク」ということなのでしょうか。。
とりあえず当面は、痛みをあまりひどくならないように、セーブしながら走っていこうと思います。</description>
    </item>
    
    <item>
      <title>uglify-js</title>
      <link>http://tatsuyano.github.io/2013/03/14/uglify-js/</link>
      <pubDate>Thu, 14 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/14/uglify-js/</guid>
      <description> npm install -g uglify-js  パラメータの-gは「global」の意味。「global」はnodeのインストールディレクトリ、
そうでなければカレントパッケージのルートかカレントワーキングディレクトリ。
npmの参考サイト  Manage the npm configuration file npm についてまとめてみる  uglify-jsの使い方  -b, &amp;ndash;beautify 整形(軽量化の逆) -o,&amp;ndash;output  出力ファイルの指定 &amp;ndash;overwrite 軽量化後のコードで入力ファイルを上書きします &amp;ndash;unsafe コードをより短い表現に変換  uglifyjs -o min.js jquery-1.9.1.js  </description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その４(クラス、Jquery)</title>
      <link>http://tatsuyano.github.io/2013/03/12/coffee-script-study-jquery/</link>
      <pubDate>Tue, 12 Mar 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/12/coffee-script-study-jquery/</guid>
      <description>クラス class Animal constructor:(name) - @name = name say:(word) - console.log &#34;#{@name} said: #{word}&#34; class Dog extends Animal constructor:(name) - super name say:(word) - super &#34;Bowwow, #{word}&#34; dog = new Dog(&#34;Bob&#34;) dog.say(&#34;hello&#34;)  #### 静的なプロパティ クラスの静的なプロパティを定義するには変数名の頭に@を付けます。 class Dog @TYPE_CHIHUAHUA = 1  コンパイル結果↓
var Dog; Dog = (function() { function Dog() {} Dog.TYPE_CHIHUAHUA = 1; return Dog; })();  クラスの静的なプロパティの使い方というか、そもそもJsのオブジェクト指向、クロージャの実装がしっかりと理解していない。ここは後日勉強する。 無名関数 setTimeoutなど引数に無名関数を渡したい場合は、次の行頭にカンマを付けます。
setTimeout - console.log(&#34;ok&#34;) ,1000  コンパイル結果↓
setTimeout(function() { return console.</description>
    </item>
    
    <item>
      <title>tmuxのコピーモードで、標準出力を見る方法</title>
      <link>http://tatsuyano.github.io/2013/03/12/tmux-copy/</link>
      <pubDate>Tue, 12 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/12/tmux-copy/</guid>
      <description>tmux.confに「set-window-option -g mode-mouse on」を追加する方法もあるが、
これだと、「カーソルで文字を反転させて(文字を選んで)、コピペ」ができなくなってしまう。
なので、代わりにコピーモードで標準出力を見る方法
C-z [ # コピーモード、C-n、C-pで上下に移動 q # コピーモードをぬける  </description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その３(オブジェクト)</title>
      <link>http://tatsuyano.github.io/2013/03/11/coffee-scirpt-study-object/</link>
      <pubDate>Mon, 11 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/11/coffee-scirpt-study-object/</guid>
      <description>Objectの生成 this.x の代わりに @x と書くことができる
pos = x:100 y:200 dump: - console.log &#34;x:#{@x},y:#{@y}&#34; pos.dump()  コンパイル結果↓
var pos; pos = { x: 100, y: 200, dump: function() { return console.log(&#34;x:&#34; + this.x + &#34;, y:&#34; + this.y); } };  一行で書く場合、「,」で区切る
size = width:100, height:200  コンパイル結果↓
var size; size = { width: 100, height: 100 };  #### 配列 for .. in でループが書けます。 seq = [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;] for x in seq console.</description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その２(構文)</title>
      <link>http://tatsuyano.github.io/2013/03/08/coffee-script-study/</link>
      <pubDate>Fri, 08 Mar 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/08/coffee-script-study/</guid>
      <description>Hello World $ emacs test.coffee hello = -&amp;gt; console.log(&amp;ldquo;Hello World!&amp;rdquo;)
hello() 
コンパイル coffee -&amp;gt; js。 test.jsというJsファイルが生成される
$ coffee -c test.coffee  生成したJsの実行
$ node test.js Hello World!  生成されたJsの中身
(function() { var hello; hello = function() { return console.log(&#34;Hello World!&#34;); }; hello(); }).call(this);  コンパイルせずに直接実行
$ coffee test.coffee Hello World!  coffee &amp;lt;ファイル名&amp;gt; と入力するのが面倒なので、zshのaliasを設定する
emacs $HOME/.zshrc alias -s coffee=coffee
source $HOME/.zshrc 
今後は、ファイル名を入力するだけで実行される
$ ./test.coffee Hello World!  オプション  -c (&amp;ndash;compile) .</description>
    </item>
    
    <item>
      <title>CoffeeScriptの勉強 その１(インストール、環境構築)</title>
      <link>http://tatsuyano.github.io/2013/03/08/coffee-script-emacs/</link>
      <pubDate>Fri, 08 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/08/coffee-script-emacs/</guid>
      <description>npm(node.js)でのインストール # node.jsのversionを指定 nvm ls v0.8.14 v0.9.4 current: v0.9.4 nvm use 0.9.4 Now using node v0.9.4 npm install -g coffee-script $ coffee -v CoffeeScript version 1.6.1  今後頻繁にCoffeeScriptを使いそうなので、zshrcにnode.jsのバージョンを指定しておく
$HOME/.zshrc [[ -s $HOME/.nvm/nvm.sh ]] &amp;amp;&amp;amp; nvm use 0.9.4
source $HOME/.zshrc 
emacsにcoffee-modeをインストール cd $HOME/.emacs.d/elisp git clone git://github.com/defunkt/coffee-mode.git  $HOME/.emacs.d/conf/52_coffee.el (add-to-list &amp;lsquo;load-path &amp;ldquo;~/.emacs.d/elisp/coffee-mode&amp;rdquo;) (require &amp;lsquo;coffee-mode)
;; デフォルトだとインデントが Space 8 なので、Space 2 に変更 ;; http://qiita.com/items/a8d96ae95a1838500e37 (defun coffee-custom () &amp;ldquo;coffee-mode-hook&amp;rdquo; (set (make-local-variable &amp;lsquo;tab-width) 2) (setq coffee-tab-width 2))</description>
    </item>
    
    <item>
      <title>nvmとnpmをインストールする</title>
      <link>http://tatsuyano.github.io/2013/03/07/nvm-vpm/</link>
      <pubDate>Thu, 07 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/07/nvm-vpm/</guid>
      <description>nvm(Node Version Manager) とは、node.js本体のバージョン管理するツール。
npm(Node Packaged Modules) とは、node.jsで作ったパッケージを管理するツール。
nvmをインストールするとnpmも自動でインストールされる。
nvmのインストール git clone git://github.com/creationix/nvm.git .nvm source .nvm/nvm.sh # nvmで使う環境変数などを設定する  node.js本体のインストール nvm ls-remote # 現在までにリリースされているバージョンの確認 nvm install v0.10.0 nvm ls # インストールしてあるバージョンと、現在設定してあるバージョンを確認 v0.9.4 v0.8.14 v0.10.0 current: v0.10.0 nvm use 0.10.0 # 毎回使うバージョンを指定する必要がある  node.jsを使うためには、ターミナルを立ち上げるたびに、nvm.shの読み込みと、nodeのバージョンを指定しないといけない。
なので、事前に zshrcに設定しておく。
cat &amp;gt;&amp;gt; .zshrc [[ -s $HOME/.nvm/nvm.sh ]] &amp;amp;&amp;amp; source $HOME/.nvm/nvm.sh [[ -s $HOME/.nvm/nvm.sh ]] &amp;amp;&amp;amp; nvm use 0.10.0  CoffeeScriptなどのnpm(Node Packaged Modules)のインストール方法 npm install -g coffee-script  インストールには、「ローカルインストール」と「グローバルインストール(パラメータに「g」をつける）」がある。</description>
    </item>
    
    <item>
      <title>鴻巣パンジーマラソン</title>
      <link>http://tatsuyano.github.io/2013/03/03/kounosu-pansy-marathon/</link>
      <pubDate>Sun, 03 Mar 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/03/03/kounosu-pansy-marathon/</guid>
      <description>昨日、第31回鴻巣パンジーマラソン(ハーフ)に参加してきました。
まずレース結果ですが、自己ベストを更新し1:54:05(ネット)でした！
目標は2時間切りだったので、予想外の結果でした。それでは簡単にですがレビューしたいと思います。
レース レース前のコンディション 今回のレースは、一昨年のハーフマラソンを走った時よりも、体重が3kg近く増えていたことと、足の状態に少し不安があったので、2時間を切ることを目標に考えていました。
ただ当日は睡眠もしっかり取れ、だいたい予定どおりに会場に到着できたのでコンディションは良かったです。
大会のレースコンディション 当日は風がかなり強かったですが、気温8度と適温でとてもいいコンディションでした。
スタート 〜 8km スタートから約8kmは市内地を走行。いちよ2時間を切れるように1km/5分30秒ペースで走つもりでしたが、ここでは無理をせず、流れに乗って走ることを意識しました。
8km 〜 11km 線路の高架下を通過すると畑が見えてきます。ここでは前半の流れに乗って走った分を取り戻すために、少しペースを上げて走りました。
11km 〜 13km ここからは少しジグザグに畑道を走っていきます。ここは周りが畑ということで風よけがまったくなく、向かい風のときは明らかに風圧で体力が奪われるのを感じる苦しいパートでした。
とりあえず風をもろに受けないように、近くを走っている体の大きな人の影に入るように走ってみました。
あまり効果はないと思いますが、気持ち的には幾分か楽になりました。
畑を抜けたところで、初めての給水を行いました。
本当はもう少し頻繁に水分をとったほうがいいのでしょうが、自分はトイレが気になるので必要最小限の給水をとることにしました。
13km 〜 ラスト 体力も思っていた以上に残っていたのと、タイムを良かったので、自己ベストを更新しようとペースを上げて行きました。
結果、自己ベストでゴール。想定外だったので、なんか儲けた気分でしたｗ
総評 3月で気温も暑すぎず寒すぎず、またコースもほぼフラットなので、とても走りやすかったです。
また歴史ある大会なので、大会運用も大変スムーズで素晴らしかったです。ぜひまた参加したいと思います。
ただ一点気になったのが、持物の預け所が「棚」が用意されているだけで、自己責任という形だったところ。
いちよ荷物は最小限にしてあるのですが、少し不安を感じました。
次回参加するときは、駅や近くの施設のロッカーに預けようと思います。</description>
    </item>
    
    <item>
      <title>ランナー用体幹トレーニング</title>
      <link>http://tatsuyano.github.io/2013/02/25/trunk-training/</link>
      <pubDate>Mon, 25 Feb 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/25/trunk-training/</guid>
      <description> 2/24の「西谷綾子のランドリ」で、ランナー用の筋トレについてやっていた内容を簡単にまとめておきたいと思います。
まずランナーの筋トレとは、
「ランニングするだけでは鍛えられない筋肉を補強する」ためのもの。
例えば「2時間ジョギング」するよりも「1時間40分ジョギング + 筋トレ20分」のほうが効果がある。
腹筋まわり  仰向けに寝そべる。この時腹筋に力を入れ、背骨から腰部分が浮かないようにする。
 足を90度に曲げ、クランチ状態にする。
 足を交互にゆっくり伸ばし、また戻す。この時も腰が浮かないように注意すること。
  股関節(ヒップリフト)  仰向けに寝そべる。膝を曲げ、お尻を浮かせる。この時も腹筋に力を入れ、体がまっすぐになるようにする。
 片足をまっすぐ垂直に上げる。
 ゆっくり戻す。
  全身(オーバーヘッドスクワット)  立った状態で、手を逆ハの字に上げる。
 ゆっくりスクワットを行う。  </description>
    </item>
    
    <item>
      <title>リモートリポジトリの変更を取得する(git fetch)</title>
      <link>http://tatsuyano.github.io/2013/02/25/git-fetch/</link>
      <pubDate>Mon, 25 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/25/git-fetch/</guid>
      <description> confilictを起こさないためにも、git pullは使わずにgit fetchを使ったほうがいい。
リモートリポジトリの変更を取得する
git fetch # これによって、FETCH_HEADを使って、以下のようにログや差分を見られるようになる。  リモートリポジトリのコミットのログを見る
git log FETCH_HEAD  リモートリポジトリとローカルのHEADの差分を見る
git diff HEAD FETCH_HEAD  リモートリポジトリと変更をローカルにマージする
git merge FETCH_HEAD  リモートリポジトリの変更を取得してローカルにマージする
git pull # git pull は git fetch + git merge  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 git fetch ( git pull )  </description>
    </item>
    
    <item>
      <title>作業ごとにブランチを切る(git branch)</title>
      <link>http://tatsuyano.github.io/2013/02/23/git-branch/</link>
      <pubDate>Sat, 23 Feb 2013 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/23/git-branch/</guid>
      <description>branchを切る 機能追加、バグ修正など、作業ごとにブランチを切るべき
ブランチの作成
git branch new-branch  ブランチを確認する
git branch -a * master # &amp;lt;- 現在のブランチがmasterであることがわかる new-branch remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master  作成したブランチに切り替える
git checkout new-branch Switched to branch &#39;new-branch&#39;  ブランチを作成すると同時にブランチを切り替える
git checkout -b new-branch Switched to a new branch &#39;new-branch&#39;  ブランチの削除
git branch -d new-branch Deleted branch new-branch (was 6de2d75). # 削除対象のブランチを選択していると削除できない git branch -d new-branch error: Cannot delete the branch &#39;new-branch&#39; which you are currently on.</description>
    </item>
    
    <item>
      <title>conflictしたファイルを修正しpushする</title>
      <link>http://tatsuyano.github.io/2013/02/23/git-conflict/</link>
      <pubDate>Sat, 23 Feb 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/23/git-conflict/</guid>
      <description>pullした後に、commitしたファイルdummy.txtがconflictした場合
git pull Auto-merging dummy.txt # &amp;lt;- dummy.txtがconflictして、auto-mergeされた CONFLICT (content): Merge conflict in dummy.txt Automatic merge failed; fix conflicts and then commit the result.  conflictしたファイルを修正する
emacs dummy.txt &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD local ======= remote &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 58da51ee64bf7f793167ddb40d035815e39566b4  修正後、git commit -aで再度commitしpush
git commit -a -m &#39;merge dummy&#39; [master 102b6c6] merge dummy git push  git commit -a は git add -u した後すぐにgit commitしたのと同義
conflictしているファイルの表示
git ls-files -u  </description>
    </item>
    
    <item>
      <title>master以外のbranchをリモート(origin)にpushする</title>
      <link>http://tatsuyano.github.io/2013/02/23/git-push-origin-newbranch/</link>
      <pubDate>Sat, 23 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/23/git-push-origin-newbranch/</guid>
      <description>master以外の別branchをリモートにpushする
git push origin new-branch git branch -a master * new-branch remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master remotes/origin/new-branch # &amp;lt;- 追加される  origin/master以外のリモートにあるbranchをローカルに追加する
git branch new-branch origin/new-branch # &amp;lt;- 本来ならこれでうまくいくのだが # なぜかすでにローカルにあるリポジトリから、新たに追加されたリモートのブランチが参照されていない git branch -a * master remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master # remotes/origin/new-branch &amp;lt;- 本来参照されるはずのブランチ  うまくいかないので、いったんローカルのリポジトリを破棄し、新たにcloneしなおしてみる
mv local-repository local-repository.bk git clone ssh://hoge/var/git/remote-repository.git local-repository cd local-repository/ git branch -a * master remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master remotes/origin/new-branch # &amp;lt;- 追加されている  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>Nike Flyknit Lunar1&#43;</title>
      <link>http://tatsuyano.github.io/2013/02/18/nike-flyknit-lunar-plus/</link>
      <pubDate>Mon, 18 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/18/nike-flyknit-lunar-plus/</guid>
      <description>青系のシューズがほしくて、いろいろなメーカのものを眺めていたが、つい買ってしまいました。Nike Flyknit Lunar1+。
このFlyknitシリーズは3種類、Racer、Trainer+、Lunar1+とあって、Luna1+はエントリーモデルになる。
Nikeショップの人の話しでは、Racerがサブ３、Trainer+がサブ４、Lunar1+が4〜4.5時間ぐらいが目安とのことだったのでLunar1+をチョイス。
サイズ 自分の正確なサイズは24.5〜25.0(甲高)なので、いつもはだいたい25インチを買っているのだが、このLunar1+では甲の部分に圧迫感があったので、25.5インチにした。
軽さ 人によって違うだろうが、自分がいつも履いてるadidas Boston2と較べて明らかに軽さを体感できた。ただ10km、20kmだとあまりその軽さの良さを感じない。
たぶんフルマラソンぐらいじゃないと、その軽さの恩恵を感じないと思う。
クッション性 見た目はそれなりに厚みがあるが、自分は少しクッション性は低いと感じた。
たぶんいつも履いているadidas Boston2がクッション性が高いシューズだからだと思う。ただ軽さを考えれば、十分だと思う。
ソックス 自分はシューズと同じ色に合わせたい派なので、同じNikeの「ランニング エリート リサイクル クッション ローカット タブ ソックス」のネオタークのLサイズを購入。
このソックス、実によくできていて、くるぶしの前後ろの２箇所が厚くなっており、靴ずれを防いでくれている。
Nikeはこういう細かい部分もよく考えているなあと少し感心。
総評 値段は少し高め(14,800円)のシューズではあるが、その軽さやデザイン性を考えると「買い」だったと思う。
まだ10kmちょっとしか走っていないので、もう少し走りこんでから、改めてレビューをまとめたいと思う。</description>
    </item>
    
    <item>
      <title>PhpStormのkeymapを変更し、C-hにdelete-backward-charを割り当てる</title>
      <link>http://tatsuyano.github.io/2013/02/14/phpstorm-keymap/</link>
      <pubDate>Thu, 14 Feb 2013 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/14/phpstorm-keymap/</guid>
      <description>C-h(delete-backward-char)のことを「hungry backspace」というらしい。
Preference &amp;gt; Keymap &amp;gt; Main menu &amp;gt; Navigate &amp;gt; Type Hierarchy &amp;gt; Remove ^H Preference &amp;gt; Keymap &amp;gt; hungry backspace &amp;gt; Add Keyboard Shortcut ^H  ついでにCtrl+i に設定されていた「Implement Mehtods」のショートカットを削除
Preference &amp;gt; Keymap &amp;gt; Main menu &amp;gt; Code &amp;gt; Implement Methods &amp;gt; Remove ^I  </description>
    </item>
    
    <item>
      <title>PhpStormのメモリ使用量を増やす</title>
      <link>http://tatsuyano.github.io/2013/02/14/phpstorm-memory/</link>
      <pubDate>Thu, 14 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/14/phpstorm-memory/</guid>
      <description> こちらのサイトの記事まんまなんですが、結構速くなったのでメモ。
emacs /Applications/PhpStorm.app/Contents/Info.plist &amp;lt;key&amp;gt;VMOptions.x86_64&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;-Xms128m -Xmx800m -XX:MaxPermSize=350m -XX:ReservedCodeCacheSize=64m -XX:+UseCodeCacheFlushing -XX:+UseCompressedOops&amp;lt;/string&amp;gt; ↓ &amp;lt;key&amp;gt;VMOptions.x86_64&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;-Xms256m -Xmx1024m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=128m -XX:+UseCodeCacheFlushing -XX:+UseCompressedOops&amp;lt;/string&amp;gt;  -&amp;gt; 最大791Mだったのが、1015Mになり、少し速くなりました。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Mac版PHPStormのメモリ割り当てを増やして快適に  </description>
    </item>
    
    <item>
      <title>ファイルを指定したコミットの状態に戻す(git checkout)</title>
      <link>http://tatsuyano.github.io/2013/02/10/git-checkout/</link>
      <pubDate>Sun, 10 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/10/git-checkout/</guid>
      <description>指定したファイルの、過去のコミット一覧を表示する
git log --oneline Controller/TasksController.php a8eb2ff task add,edit,delete 995bfc9 To move the program 4b5e3dd check score today 187cf30 add Tasks  現在の状態と、過去のコミットを比較する
git diff 995bfc9 Controller/TasksController.php diff --git a/Controller/TasksController.php b/Controller/TasksController.php index e6ab27a..9dc9b45 100644 --- a/Controller/TasksController.php +++ b/Controller/TasksController.php @@ -6,6 +6,7 @@ App::uses(&#39;AppController&#39;, &#39;Controller&#39;); * @property Task $Task */ class TasksController extends AppController { + public $uses = array(&#39;Task&#39;,&#39;User&#39;); /** * index method @@ -37,12 +38,19 @@ class TasksController extends AppController { * * @return void */ - public function add() { + public function add($user_id = null) { + $this-&amp;gt;User-&amp;gt;id = $user_id; + if (!</description>
    </item>
    
    <item>
      <title>MAMP環境でのCakePHPのmysql.sockの指定方法</title>
      <link>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</link>
      <pubDate>Mon, 04 Feb 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/02/04/mamp-cakephp-mysql/</guid>
      <description>worning MacにMAMPをインストールし、CakePHPの「bakeコンソール」でModelクラスを作成したさいに、mysql.sockの指定箇所が違うよと警告された
Warning Error: PDO::__construct(): [2002] No such file or directory (trying to connect via unix:///var/mysql/mysql.sock) in [/Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/Database/Mysql.php, line 149] Error: Database connection &amp;quot;SQLSTATE[HY000] [2002] No such file or directory&amp;quot; is missing, or could not be created. #0 /Applications/MAMP/htdocs/bake/lib/Cake/Model/Datasource/DboSource.php(260): Mysql-&amp;gt;connect()  MAMPを使っているので、mysql.sockは「/Applications/MAMP/tmp/mysql/mysql.sock」作成されている。
たぶん解決方法としては３つあって、
1.sockファイルをworiningに書いてある「/var/mysql/mysql.sock」に生成するようMysql側の設定をいじる。
2.「/var/mysql/mysql.sock」に「/Applications/MAMP/tmp/mysql/mysql.sock」のリンクを貼ってしまう。
3.たぶん「app/Config/database.php」に現在生成されているmysql.sockの場所を指定する。
どう考えても「３」が正しいやり方だと思うけど、なかなかそれっぽい情報が引っかからなかったがやっとあった。
Cakephp console (bake) on Mac OS with Mamp : database connection error
public $default = array( &#39;datasource&#39; = &#39;Database/Mysql&#39;, &#39;persistent&#39; = false, &#39;host&#39; = &#39;localhost&#39;, &#39;login&#39; = &#39;USERNAME&#39;, &#39;password&#39; = &#39;PASSWORD&#39;, &#39;database&#39; = &#39;DATABASE&#39;, &#39;encoding&#39; = &#39;utf8&#39;, &#39;unix_socket&#39; = &#39;/Applications/MAMP/tmp/mysql/mysql.</description>
    </item>
    
    <item>
      <title>tmuxinatorのインストール</title>
      <link>http://tatsuyano.github.io/2013/01/28/tmuxinator/</link>
      <pubDate>Mon, 28 Jan 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/01/28/tmuxinator/</guid>
      <description>RubyGemsからtmuxinatorのインストール 念のため、RubyGemsをupdateしてからインストール
gem update gem install tmuxinator  tmuxinatorがインストールされているか確認
gem which tmuxinator usr/local/Cellar/ruby/1.9.3-p0/lib/ruby/gems/1.9.1/gems/tmuxinator-0.5.0/lib/tmuxinator.rb  メッセージに従い、初期設定 echo &amp;quot;[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] &amp;amp;&amp;amp; source $HOME/.tmuxinator/scripts/tmuxinator&amp;quot; &amp;gt;&amp;gt; ~/.zshrc source ~/.zshrc  $SHELL、$EDITORの確認 設定が必須なので確認
echo $EDITOR $SHELL emacs /bin/bash  .tmuxinatorを移動させる 他のdotfile同様、Dropboxのディレクトリ配下に移動させ、リンクをはる。
ただし「.tmuxinator」をリネームして「tmuxinator」としてはいけない。
隠しファイルでないと、再度「.tmuxinator」というディレクトリが作成されてしまう。
mv .tmuxinator Dropbox/dotfile/ ln -s Dropbox/dotfile/.tmuxinator .tmuxinator  RubyGemsの環境変数をbash_profileに設定 cat .bash_profile export GEM_BIN=$(ruby -e &#39;require &amp;quot;rubygems&amp;quot;; puts Gem::bindir&#39;) export PATH=$GEM_BIN:$PATH source .bash_profile  環境変数の確認
printenv | grep ruby GEM_BIN=/usr/local/Cellar/ruby/1.9.3-p0/bin PATH=/usr/local/Cellar/ruby/1.</description>
    </item>
    
    <item>
      <title>iterm2 &#43; tmux に乗り換えた</title>
      <link>http://tatsuyano.github.io/2013/01/27/item2-tmux/</link>
      <pubDate>Sun, 27 Jan 2013 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2013/01/27/item2-tmux/</guid>
      <description>今まで頑なにTotalTerminal + KeyRemap4MacBookを使って来た私ですが、ついに乗り換えることにしました。
理由はKeyRemap4MacBookをバージョンアップしたら、一部のkey bindが使えなくなってしまったから。まあいい機会なので乗り換えたいと思います。
iterm2のバージョン iterm2の公式ページからダウンロード
ダウンロードしたファイル解凍してみるとなぜか「tmux-for-iTerm2-20130122.tar.gz」というファイルも入っている。
iterm2の公式wikiで調べてみると、tmuxを使う場合、この「iTerm2用のtmux」じゃないと細かい挙動が期待どおりに動かないっぽい（適当）。
なので、このタイミングでScreenからtmuxにも乗り換えてみることにした。
brewでlibevnetのインストール まず、こちらのサイト「Lionにiterm2とtmux と libeventをインストールする」を参考にlibenventをインストール。
brew update brew install libevent  tmuxのインストール さきほどダウンロードしたファイルを解凍し、make &amp;amp; install
tar xvzf tmux-for-iTerm2-20130122.tar.gz cd tmux ./configure make make clean sudo make install  念のためtmuxのインストール先を確認
which tmux /usr/local/bin/tmux  iterm2の初期設定 今まで、KeyRemap4MacBookでcmdとoptionを入れ替えていて、操作上はcmdにmetaキーが割り振ってある感じにして使っていたんですが、このタイミングでoptionにmetaキーを割り当てることにしました。
ただ、それ以外の操作はできるかぎりTotalTerminalと同じようにしたいので、その設定をしていきます。
バックグラウンドを白にし、透過させる Preferences &amp;gt; Profiles &amp;gt; Colors &amp;gt; Background
Preferences &amp;gt; Profiles &amp;gt; Window &amp;gt; Transparency
画面の上部からターミナルをショートカットで表示できるようにする Preferences &amp;gt; Profiles &amp;gt; Window &amp;gt; Setting for New Window &amp;gt; Style &amp;gt; Top of Screen</description>
    </item>
    
    <item>
      <title>nginxのファイルのアップロードサイズを変更する　413 Request Entity Too Large</title>
      <link>http://tatsuyano.github.io/2012/12/21/nginx-request-entity-too-large/</link>
      <pubDate>Fri, 21 Dec 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/12/21/nginx-request-entity-too-large/</guid>
      <description>サイズの大きなファイルをアップロードしようとするとタイトルのエラーが出るので、その対処方法。
nginx.conf まずはnginx.confファイルに「client_max_body_size 20M;」を追加。
私はリバースプロキシを利用しているので、2箇所に記述。
server { listen 80; server_name blog.10rane.com; client_max_body_size 20M; # 413 Request Entity Too Large ..... server { listen 8080; server_name blog.10rane.com; client_max_body_size 20M; # 413 Request Entity Too Large .....  php.ini php.iniは3箇所の変更。
# emacs /etc/php.ini upload_max_filesize = 20M post_max_size = 20M memory_limit = 128M  再起動 nginx、fast-cgi両方を再起動。
/etc/init.d/nginx restart /etc/init.d/php-fastcgi restart  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 nginx error – 413 Request Entity Too Large と出る場合は最大ファイルサイズを変更する FileをUploadするためのnginxとphp.</description>
    </item>
    
    <item>
      <title>nginxにBASIC認証とIP制限を入れる</title>
      <link>http://tatsuyano.github.io/2012/12/21/nginx-basic-authentication-limit-ip/</link>
      <pubDate>Fri, 21 Dec 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/12/21/nginx-basic-authentication-limit-ip/</guid>
      <description> Basic認証 自分のホーム以下に.htpasswdファイルを配置するとうまく認証できませんでした。
なのであまりよくありませんが面倒なので、/etc/nginx配下で、かつパーミッションは777で。
cd /etc/nginx htpasswd -c /etc/nginx/.htpasswd hoge chmod 777 .htpasswd  emacs conf.d/vh_redmine.conf location / { .... auth_basic &amp;quot;Secret Area&amp;quot;; auth_basic_user_file &amp;quot;/etc/nginx/.htpasswd&amp;quot;; }  IP制限 上から順に設定が反映されるらしく、allowより前にdenyの設定を入れてしまうとallowが反映されないので注意。
server { .... allow xxx.xxx.xxx.xxx; deny all; }  再起動 /etc/init.d/nginx restart  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 nginxでBasic認証を設定 Nginx で IPアドレスによるアクセス制限  </description>
    </item>
    
    <item>
      <title>富士山マラソン</title>
      <link>http://tatsuyano.github.io/2012/11/26/fujisan-marathon/</link>
      <pubDate>Mon, 26 Nov 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/11/26/fujisan-marathon/</guid>
      <description>はじめに 週末に今年最後のレース、「第１回富士山マラソン」に参加してきました！
まず結果ですが、速報でグロス「04:59:57」でしたw
本当にギリギリですが、いちよできれば５時間を切りたいと思っていたので嬉しかったです。
では簡単にですがレビューしたいと思います。
夜行バス はじめての遠方の大会だったので、どの方法で行くかも自分としてはポイントだったのですが、
今回は行きは「夜行バス」、帰りは「電車」で帰ることにしました。
で「夜行バス」ですが、思っていた以上に眠れず(結局１時間ぐらい)「バス」を選んだことをかなり後悔しました。
昔は普通にバスでも寝れたような気がするんですが、歳でしょうか。。
今後は絶対に「前泊」にすることにしました。
天候 １１月の山梨を舐めてました。。
１０月に参加したアクアラインマラソンがすごい夏日で、今回のレースも天気も晴れだし、
なんとなく温かいイメージがあったので、荷物を少なくするために軽装で来てしまいました。
が、すごい寒い。着替えているとき、周りのランナーが上に薄めのダウンやジャケットを着てるのをみて、焦りました。。
ちなみにスタート時はマイナス２度だったらしいです。
次回からは全天候用に準備をすることにしました。
レース スタート〜１３km 「天候」のところでも書きましたが、スタート時はマイナス2度ということで、大げさですがスタート前にリタイアしそうでしたｗ
せっかく高いジャケット持ってるのになぜ今回持っていかなかったのか。。
というわけで、体を温めるためにも少し早めのペースで走りたかったのですが、
乾いた汗で体温を持っていかれるのが怖かったので、ペースを挙げないようにスタートしました。
まずは１３kmぐらいまで市内地を走行。レースは自分としては速いペースで始まりました。
みなさんやはり寒かったんでしょうか。自分はとにかくペースに飲まれないよう、タイムを見ながら走りました。
また前回給水のし過ぎで、お腹が水っぽくなってしまったのを反省し、ここまでは給水をしませんでした。
普段走っているときは、２０km給水しなくても問題ないですし、これは正解でした。
１３km 〜 ２０km １４kmあたりで前日の寝不足が響いて、寝おちしそうになっていました。。
かなりふらふら走っているのは自分でも分かっているのですが、どうにもなりませんでした。
睡眠欲ってすごいですね。あらためて睡眠の大切さを感じました。
１５kmの地点ではじめて給水＆空いていたのでトイレに行きました。
できればトイレ行きたくないんですが、５時間ペースのうちはしょうがないんでしょうかねえ。
まあでも時間としては２分しかロスしなかったので、正解だったと思います。
それになぜかこの休憩で眠気が飛びました。不思議ｗ
２０km 〜 ３４km ２１km地点あたりから長い坂道に入るのですが、思っていた以上の急勾配にかなり動揺しました。
こんな急勾配だとしらずに直前の給水を飛ばしてしまっていたんですよね。
ただ坂の途中にも給水ポイントがあって助かりました。
あと今回給水で思ったのですが、チョコ食べると体力回復するような気になりますね。
次回からはスニッカーズを持ち歩くようにします。
この坂道を超えると、本格的な山道に入っていき、すばらしい景色を堪能できます。
山の紅葉、キレイな空、自然のニオイを感じながら走るのは本当に気持ちよかったです。
２５kmを超えたあたりから体力的にキツかったのですが、この景色のおかげで随分救われました。
あと荷物になるけど、やはり写真とりたいですね。今度はカメラも持っていこうと思います。
３４km 〜 ４０km 膝が少し痛かったのですが、下りはペースを早めて一気に降りました。
この段階だと膝の痛みより体力の低下のほうが厳しいですね。給水の度に、休む時間が長くなっていました。
走っていると、足が痛くて立ち止まって屈伸などのストレッチをしたくなるのですが、
どうせ休むなら、給水のときにしたほうが時間短縮になるなあと思いました。どうせ給水で時間を使ってしまうので。
あと「内臓疲労」はどうにもならないんですかね。今回も２、３回くらい内臓が痛くて足が止まってしまいました。
４０km 〜 ゴール 今回はフルマラソン２回目ということもあり、ラストは少し余力があったようで、思っていたより走れました。
頑張れば５時間が切れそうだということが分かっていたも良かったのかもしれません。本当にギリでしたが。
というわけでなんとか５時間を切れました。
総評 第1回大会ということでしたが、元々は「河口湖マラソン」として実績のある大会だったので、
運営はとてもスムーズですばらしかったです。また来年出たいなあと思える大会でした。
あとなにげに大会イベントの「サンプラザ中野くん」のライブがすばらしく、すこし目が潤んでしまいました。
ライブ後にCDの即売会があってCDを買いたかったのだが、その時財布を預けていたので買えず。。</description>
    </item>
    
    <item>
      <title>WALKMAN NWD-W263</title>
      <link>http://tatsuyano.github.io/2012/11/19/walkman-nwd-w263/</link>
      <pubDate>Mon, 19 Nov 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/11/19/walkman-nwd-w263/</guid>
      <description>今まで使っていた「PHILIPSのネックバンドヘッドフォン 」が少し歪んでしまい、左耳のほうが走っているとズレてとれてしまうようになったので、新しいヘッドフォンを衝動買いしてみました。
フィット感、重さについて なかなかいいと思います。5min/kmぐらいで走ってみましたがズレやかさばる感じはありませんでした。
また付属品に3種類のイヤホン（大、中、小）がついています。
重さは個人的にはまったく気になりませんでした。
走行時の操作感について 一曲ずつ曲のスキップ、ディレクトリ（アルバム）単位にスキップする機能と、ダイジェスト再生(曲の最初の部分を数秒ずつ自動で再生)で曲を選ぶようになっています。
走っている最中での操作は少しなれが必要ですが、走行中に操作する機会は少ないので問題無いと思います。
ただ「リピート機能」は欲しかったなあと思いました。
リピート機能がないので、たくさん曲を登録してしまうと目的の曲までたどり着くに時間がかかるし、
連続で聞きたい場合は事前に曲数を減らし、自前でリピートしているように曲数を調整しないといけないのはイマイチだと思いました。
曲の登録について macの場合、マウントされたwalkmanのディレクトリの中にあるMUSICディレクトリにiturnから直接D&amp;amp;Dで曲の登録ができます。
曲の再生順などを考慮し、ディレクトリや曲のタイトル部分に連番をつけるなど一手間ありますが、慣れれば問題ないとと思います。
再生できない曲について ここは買ってから別のレビューの記事でしったのですが、著作権保護のついた曲が再生できません。
なのでiturn経由で買った古い曲だと再生できない可能性があります。
お買い得度について 6500円の価値は十分あると思います。
ジョギング中にヘッドフォンがずれる、ネックリストの締め付けが気になる人は買ってみてはいかかでしょうか。</description>
    </item>
    
    <item>
      <title>MacのPHP開発環境を整える</title>
      <link>http://tatsuyano.github.io/2012/11/02/mamp-php-mac/</link>
      <pubDate>Fri, 02 Nov 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/11/02/mamp-php-mac/</guid>
      <description> はじめに 勉強のためにローカル上でのPHP開発環境を作ろうと思います。
MAMPのインストール macにapache,mysql,phpをセットにしたものをインストールするためのソフト。
M(ac) A(pache) M(ysql) P(hp)。同じ用途でXAMPPというのもありますが、私の環境ではうまく動きませんでした。
 MAMPのインストール for Mac MAMPのダウンロードサイト  有償のPro版も同時にインストールされてしまいます。今回はPHPを少し触ってみたいだけなので、無償版を使います。
emacsのPHP開発環境  php-mode.elをインストールする php-completion.elをインストールする  補完機能と色付けだけは欲しかったのでインストール。
php-mode.elだけだと、phpファイルにhtmlの記述がある(又はその逆)とインデントがくずれてしまう。
なので最終的に、「php-mode + php-completion + nXhtml』を使う形に落ち着いた。
＊php-completionはauto-completeの機能を利用している
 nXhtmlをインストールする  php-mode.elの設定(インデントと、phpファイルを開いたときのmode指定)をコメントアウト
emacs ~/.emacs.d/conf/50_php.el ;; php-mode (require &#39;php-mode) ;;(setq php-mode-force-pear t) ;PEAR規約のインデント設定にする ;;(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.php$&amp;quot; . php-mode))  実行画面 htmlとphpのコードで書かれているindex.phpを開いてみると、htmlのコードを編集すると(nXhtml/nxhtml lnValid)に
phpのコードを編集すると(PHP/nxhtml Completion AC Abbrev)にmodeが切り替わる
補完機能もちゃんと動いている
＊nXhtmlで起動するさいに下記の警告がでるが、今のところ問題なく動いているので無視する
Warning: `font-lock-syntactic-keywords&#39; is an obsolete variable (as of 24.1); use `syntax-propertize-function&#39; instead.  </description>
    </item>
    
    <item>
      <title>nXhtmlをインストールする</title>
      <link>http://tatsuyano.github.io/2012/11/01/emacs-nxhtml/</link>
      <pubDate>Thu, 01 Nov 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/11/01/emacs-nxhtml/</guid>
      <description> nXhtmlとは htmlファイルには、javascriptやphp、perlなどhtml以外の複数の言語で書かれていたりする。
このため今までは、今書いている言語に合わせて、自分でモードの切り替えを行なっていたのだが、nXhtmlを使うと、自動で今書いている言語に合わせてモードを切り替えてくれる。
インストール nXhtmlの本家サイトの、Download latest nXhtml (zip file)からzipをダウンロードし、pathの通っている階層(add-to-list &amp;lsquo;load-path &amp;ldquo;~/.emacs.d/elisp&amp;rdquo;)に移動。
wget http://ourcomments.org/Emacs/DL/elisp/nxhtml/zip/nxhtml-2.08-100425.zip tar xvzf nxhtml-2.08-100425.zip mv nxhtml .emacs.d/elisp/  .emacs.elに一行追加。
※ 00_init.elに追加するとエラーになってしまったため、やむなく.emacs.elに追加
cat &amp;gt;&amp;gt; .emacs.el (load &amp;quot;nxhtml/autostart.el&amp;quot;)  バイトコンパイル M-x nxhtmlmaint-start-byte-compilation  コンパイル時にでるwarningの対応。下記の警告が出てくるので
Warning: `font-lock-beginning-of-syntax-function’ is an obsolete variable (as of Emacs 23.3); use `syntax-begin-function’ instead.  .emacs.d/elisp/nxhtml/util/mumamo.elの「font-lock-beginning-of-syntax-function」を「syntax-begin-function」に置換し、再度コンパイル。
nXhtmlのモードについて 「nXhtml/nxhtml Invalid)」や「PHP/nxhtml Completion AC Abbrev」にするには
M-x nxhtml-mumamo  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Web開発のためのEmacsの設定 Emacs23 に nXhtml をインストールしてみる  </description>
    </item>
    
    <item>
      <title>php-mode.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/10/29/emacs-php-mode/</link>
      <pubDate>Mon, 29 Oct 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/29/emacs-php-mode/</guid>
      <description> インストール M-x auto-install-from-url &amp;lt;RET&amp;gt; http://php-mode.svn.sourceforge.net/svnroot/php-mode/tags/php-mode-1.5.0/php-mode.el  .emacsの設定、50_php.elを作成する cat &amp;gt;&amp;gt; .emacs.d/conf/50_php.el ;; php-mode (require &#39;php-mode) (setq php-mode-force-pear t) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.php$&amp;quot; . php-mode))  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 PHP開発環境 on Emacs  </description>
    </item>
    
    <item>
      <title>php-completion.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/10/29/emacs-php-completion/</link>
      <pubDate>Mon, 29 Oct 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/29/emacs-php-completion/</guid>
      <description> インストール M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: php-completion &amp;lt;RET&amp;gt;  .emacsの設定、50_php.elに追加 cat &amp;gt;&amp;gt; .emacs.d/conf/50_php.el ;; php-mode-hook (lambda () (require &#39;php-completion) (php-completion-mode t) (define-key php-mode-map (kbd &amp;quot;C-o&amp;quot;) &#39;phpcmp-complete) (make-local-variable &#39;ac-sources) (setq ac-sources &#39;( ac-source-words-in-same-mode-buffers ac-source-php-completion ac-source-filename ))))  補完はするときはC-o、又はauto-complete.elの機能で自動で補完対象が出るようになります。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 PHP開発環境 on Emacs  </description>
    </item>
    
    <item>
      <title>ちばアクアラインマラソン</title>
      <link>http://tatsuyano.github.io/2012/10/23/chiba-aqualine-marathon/</link>
      <pubDate>Tue, 23 Oct 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/23/chiba-aqualine-marathon/</guid>
      <description>日曜日、木更津で行われた「ちばアクアラインマラソン」に参加してきました。
今回が初のフルマラソンということでいろいろと気づいたこと、マラソンの感想を簡単にですが書きたいと思います。
当日は気温26℃とかなり暑いレースコンディションでした。走る前はそれほど感じなかったのですが、実際走りだすとこの暑さにかなり体力を奪われてしまいました。「暑さ対策として、帽子と日焼け止めを用意」
コースは潮浜公園をスタートし、アクアラインの「海ほたる」で折り返し、その後市内を右回りに回るコースでした。
今までマラソンを走るときに、コースの高低差というのは特に気にしたことはなかったのですが、今回は事前に把握しておくことの重要さを感じました。
というのも後半の登坂に心が折れて、危うくリタイアしそうになりました。なので次回からは「コースの高低差も含めて事前にしっかり把握する」
さてレースの雰囲気ですがまるでお祭りのような感じでした。当日は日曜だったのですが、地元の小中学生が応援に駆り出されていたりとアクアラインマラソン自体が第1回目ということもあり、町総出で盛り上げようとしてくれているのが伝わってきて大変力になりました。このあたりがハーフマラソンとかと違うなあとしみじみ思いました。
「フルマラソンの時はヘッドフォンは必要なし」
また今回のレースの目玉はなんといっても、本来渡ることのできないアクアラインを走れるということ！まるで海を渡るみたいで大変気持ちよかったです。
レース参加人数は約14000人でした。そのため上の画像のようにレース15km地点の海ほたるを超えるまでは、本当に芋洗状態で自分のペースでは走れませんでした。この時に設定タイムを守るために人をよけながら少しハイペースで走ってしまいました。
また給水場の混雑がひどく、給水するたびに30秒〜1分ほど足が止められてしまう感じで少し焦ってしまいました。
「給水、給食を自分で用意し、できる限り給水場はスキップしたほうがよさそう」
さて今回のレース、設定タイムは4時間30分、1kmを約6分ペースで走るつもりでした。ですが実際走ってみるとこれがとんだ見当違いで、実際のタイムは5時間27分というタイムで惨敗でした。。
想定以上の暑さや、アップダウンのコースも考慮に入れてもやはり認識があまかったなあとレース中かなり反省しました。
次のフルマラソンでは設定タイムを5時間とし、1kmを約7分ペースで走ろうと思います。また道が混んでいて7分以上のタイムになってしまっても追い抜いたりはしないほうがいいと思いました。
「目標タイムは5時間、1kmを約7分ペースで追い抜きはしない」
23km付近まで1km6分ペースと自分の体力以上で走ってしまったため、走りだして23kmぐらいから足が重くなってきました。そのため休む意味も込めてトイレを利用したのですが、やはりこれが大幅なタイムロスになってしまいました。
ただ実際にトイレに入ってみるとほとんどオシッコはでませんでした。この時すでにかなり内臓が痛かったので、もしかしたら体にあまり水分を吸収できない状態だったのかもしれません。
水でお腹はタプタプいっているが喉だけが乾く、そんな状態でした。次回は事前にトイレの場所を把握し、トイレの利用回数は後半の1回だけですむよう調整したいと思います(今回は4回も行って時間をかなりロスしました)。
「トイレの場所を把握。できるかぎり使わないですむよう調整する」
今回初のフルマラソン、予想以上に苦戦してしまいましたが、リタイアせずになんとか完走できたことで次につながったかなあと自分では思っています。
来月すぐに「富士山マラソン」が控えているので、今回の経験を生かし次回は歩かずに完走できるように頑張りたいと思います。</description>
    </item>
    
    <item>
      <title>GARMIN FORERUNNER 110</title>
      <link>http://tatsuyano.github.io/2012/10/01/garmin-forrunner-110/</link>
      <pubDate>Mon, 01 Oct 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/10/01/garmin-forrunner-110/</guid>
      <description>買ってしまいました「Garmin Fore Runner 110」。
Amazonでハートレートモニター付属の並行輸入品、18,900円で購入。
いやあ素晴らしいですねｗ
今までiphoneのGPSアプリを使っていたのですが、iphoneを持って走るのが億劫になり購入してしまいました。
では簡単にですがレビューします。
Garmin Fore Runner 110　でできること  1km(指定した距離)ごとにお知らせ音がなること 1km(指定した距離)ごとにペースが表示されること GPS機能で走った道のりやカロリーが確認できること 心拍数が(ハートレートモニターを使って)計測できること  できないこと  信号などで立ち止まった時に、自動で計測が止まらないこと 距離などをバイブレーションで知らせる機能がないこと  すばらしい点  操作方法がシンプル。ボタンは４つなのですが、機能毎に集約されていて使いやすい 画面が大きい。またバックライトが見やすい 見た目のわりに軽い(227g) Garmin Connect(データを管理するサイト)がすごく使いやすい  不満な点  時計とUSBを接続する方法がクリップ式になっていて、時計の画面に毎回クリップで挟んださいのゴムの後が残る  注意点  時計の画面が「Saving Activity」というメッセージが表示されてフリーズする  -&amp;gt; ボタン４つを長押しして、初期化(ただし計測した走行データはきえなかった)する。
 ChromeでGarmin Connectに接続するとPluginがないと警告が出る  -&amp;gt; Safariで開く
 Garminが認識されない  -&amp;gt;「Garmin Communicator Plugin」と「Garmin ANT Agent」をインストールし、safariで開く</description>
    </item>
    
    <item>
      <title>Emacs-Lispの変数の扱いについて</title>
      <link>http://tatsuyano.github.io/2012/09/20/emacs-lisp/</link>
      <pubDate>Thu, 20 Sep 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/09/20/emacs-lisp/</guid>
      <description> やさしいEmacs-Lisp講座(改訂版)の勉強メモ。
動的スコープ(P21) 変数(let*以外)は動的スコープとして扱われる。
つまり一度変数を宣言すると、その変数はどこからでも参照できてしまう。
変数名の衝突(P19) Emacs-Lispは処理系全体(読み込んでいるすべてのプログラム)で一つの名前空間しかない。
なのでグローバル変数にはパッケージ固有のプレフィックスをつける。
defvar(P19) defvarで変数を宣言すると、その変数の値は、defvarで再度値を代入しても更新されない(しかしsetqなどで値の代入された場合は更新されてしまう)。
Emacs-Lispでは「定数宣言」のように使っていく。
(defvar dvar 1 &amp;quot;実験用&amp;quot;) ;; -&amp;gt; 1 (defvar dvar 2) ;; -&amp;gt; 1 値が上書きされない (setq dvar 3) ;; -&amp;gt; 3 defvar以外で宣言(代入)された場合は上書きされてしまう。  set,setq(P18) 変数の代入(宣言)を行う。setqのほうは同時に複数の変数を代入できる。
(set &#39;foo 5) (setq aa 3 bb 2 cc 4)  let(P20) let式の中で初めて宣言された変数は、let式外(グローバル領域)では参照できない。
関数内だけで参照したい(ローカル変数として使いたい)場合に用いる。
グローバル変数をlet式内で一時的に変えたい場合に用いる。
本体すべてを評価したあとで、最後に評価した値を返す。
;書式&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
;(let (変数リスト)　|
; 本体) |
; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
(setq foo 5);; -&amp;gt; 5 (let ((foo 3) (fuga foo)) fuga);; -&amp;gt; 5 fugaがグローバル変数のfooで初期化されるため (let ((foo 3)) foo);; -&amp;gt; 3 let式のfooで初期化されるため foo ;; -&amp;gt; 5 let式で値が更新(代入)されても、値に影響されない fuga ;; -&amp;gt; error let式内で宣言された変数のため  let*(P21) (let* ((foo 3) (fuga foo)) fuga);; -&amp;gt; 3 fugaがlet式のfooで初期化されるため (let* ((foo 3)) foo);; -&amp;gt; 3 let式のfooで初期化されるため  </description>
    </item>
    
    <item>
      <title>MacにRictyをインストールする</title>
      <link>http://tatsuyano.github.io/2012/09/16/mac-ricky/</link>
      <pubDate>Sun, 16 Sep 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/09/16/mac-ricky/</guid>
      <description> Rictyとは 去年あたりから話題だったRictyをなんとなくインストールしてみました。
フォントの特徴は、本家サイトに詳しく書いてあるので見て頂くとして、個人的には「半角文字と全角文字の横幅の比が 1:2 に調整される」ところが素敵だなあと思います。
インストールの前に Rictyをインストール(生成する)には、事前に
1.「fontforge」がインストールされていること
2.「Inconsolata」と「Migu 1M」をダウンロードしていること
が前提となります。
fontforgeのインストール homebrewでインストールします。
brew install fontforge --use-gcc --without-python  Ricty本体のダウンロード git clone git://github.com/yascentur/Ricty.git  Inconsolata、Migu 1Mのダウンロード ダウンロード先は、先程cloneしてできたRictyディレクトリ内にしました。
cd git/Ricty wget http://levien.com/type/myfonts/Inconsolata.otf wget &#39;http://sourceforge.jp/frs/redir.php?m=iij&amp;amp;f=%2Fmix-mplus-ipa%2F56156%2Fmigu-1m-20120411-2.zip&#39; unzip migu-1m-20120411-2.zip  Rictyの生成 sh ricty_generator.sh auto  生成したフォントをコピー Macのフォントは/Library/Fonts以下で管理しているので、生成したRictyをcopy。
cp -a Ricty*.ttf /Library/Fonts  ターミナルのフォントの設定をRictyにする 他のサイトではemacs単体のみに設定していることが多かったんですが、
せっかくなんでターミナル全体に設定します。ちなみに私はTotalTerminal派です。
実行画面 見ていただくと解るように
「半角文字と全角文字の横幅の比が 1:2に調整されている」
「全角スペースが可視化されている」ことがわかります。
文字自体は少し丸っこくて初めはちょっとだけ違和感があったのですが、慣れるとすごく見やすく感じてきました。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 プログラミング用フォント Ricty Mac OS X Lion環境NetBeans IDEにプログラミング用フォントRicty導入  </description>
    </item>
    
    <item>
      <title>cpanmでDBD::mysqlをインストールしようとすると、mysql.hがないと怒られる</title>
      <link>http://tatsuyano.github.io/2012/09/04/cpanm-dbd-mysql/</link>
      <pubDate>Tue, 04 Sep 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/09/04/cpanm-dbd-mysql/</guid>
      <description> インストール cpanm DBD::mysql  しようするとエラーが。。build.logを確認してみると
emacs .cpanm/build.log ... dbdimp.h:24:49: error: mysql.h: そのようなファイルやディレクトリはありません  とのこと。ググったところ、「mysql.h」は「mysql-devel」に入っているらしいので、mysql-develをインストールし、再度 cpanm DBD::mysqlを実行。
sudo yum -y install mysql-devel ... cpanm DBD::mysql  今度は
emacs .cpanm/build.log ... make: *** [test_dynamic] エラー 255  エラーの原因がよくわからなかったので、再度で検索したところ、下記のサイトの方法で対応できました。
Mac OS XにDBD::mysqlをインストール
cd .cpanm/latest-build/DBD-mysql* perl Makefile.PL --testuser=&#39;hoge&#39; --testpassword=&#39;piyo&#39; make make test make install  mysqlの接続でしけていたんですね。勉強になりました。
参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Mac OS XにDBD::mysqlをインストール Rails3の bundle install で mysql.h が見つからないというエラー  </description>
    </item>
    
    <item>
      <title>markdown-mode.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/22/emacs-markdown/</link>
      <pubDate>Wed, 22 Aug 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/22/emacs-markdown/</guid>
      <description>インストール 本来、直接.emacs.d/elisp/以下でgit cloneして
.emacs.d/elisp/markdown-mode/ というディレクトリ構成にしたかったのですが、
あとで行う、文字色の設定が(ファイルの読み込み順序の関係で)うまくいかなかったので、
このようなディレクトリ構成になりました。
git clone git://jblevins.org/git/markdown-mode.git mv markdown.el webpage.sh .emacs.d/elisp/ rm -rf markdown-mode  emacs .emacs.d/conf/80_markdown.el ;;(add-to-list &#39;load-path &amp;quot;~/.emacs.d/elisp/markdown-mode&amp;quot;) ;; 今回elisp直下にファイルを置いたのでコメントアウト (autoload &#39;markdown-mode &amp;quot;markdown-mode.el&amp;quot; &amp;quot;Major mode for editing Markdown files&amp;quot; t) (setq auto-mode-alist (cons &#39;(&amp;quot;\\.md&amp;quot; . markdown-mode) auto-mode-alist))  文字(見出し等)に色を付ける デフォルトのままだと見出し等に色がついてなく、見にくいので
こちらのサイトを参考に色をつけてみました。
cat &amp;gt;&amp;gt; .emacs.d/conf/80_markdown.el ;; custom color (defface markdown-header-face-1 &#39;((((class color) (background light)) (:foreground &amp;quot;DeepPink1&amp;quot; :underline &amp;quot;DeepPink1&amp;quot; :weight bold)) (((class color) (background dark)) (:foreground &amp;quot;DeepPink1&amp;quot; :underline &amp;quot;DeepPink1&amp;quot; :weight bold))) &amp;quot;Face for level-1 headers.</description>
    </item>
    
    <item>
      <title>perltidyをインストールし、emacsでも使えるように設定する</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-perltidy/</link>
      <pubDate>Tue, 21 Aug 2012 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-perltidy/</guid>
      <description>はじめに perltidyとはperlのソースを指定したフォーマットに整形してくれるツールです。
インストール 私の環境はCentOSなので、yumでインストールします。
macとCentOS両方同じ方法でインストールしたいので、Perlモジュールのperltidyを使用することにします。
cpanm Perl::Tidy  フォーマットを指定する ホームディレクトリに「.perltidyrc」というファイルを生成し、フォーマットを指定します。
以下の設定は、書籍「Perl Best Practices」のものらしいです。。
cat &amp;gt; .perltidyrc -l=78 # Max line width is 78 cols -i=4 # Indent level is 4 cols -ci=4 # Continuation indent is 4 cols -st # Output to STDOUT -se # Errors to STDERR -vt=2 # Maximal vertical tightness -cti=0 # No extra indentation for closing brackets -pt=1 # Medium parenthesis tightness -bt=1 # Medium brace tightness -sbt=1 # Medium square brace tightness -bbt=1 # Medium block brace tightness -nsfs # No space before semicolons -nolq # Don&#39;t outdent long quoted strings -wbb=&amp;quot;% + - * / x !</description>
    </item>
    
    <item>
      <title>flymakeを設定し、perlのシンタックスチェックをする</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-flymake/</link>
      <pubDate>Tue, 21 Aug 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-flymake/</guid>
      <description>はじめに perlのシンタックスチェックをflymakeで行うには、事前に「set-perl5lib.el」をインストールする必要があります。
set-perl5lib.elのインストール cd .emacs.d/elisp/ wget http://svn.coderepos.org/share/lang/elisp/set-perl5lib/set-perl5lib.el  .emacsの設定 ;; flymake for perl (require &#39;flymake) (require &#39;set-perl5lib) ;; http://svn.coderepos.org/share/lang/elisp/set-perl5lib/set-perl5lib.el (defvar flymake-perl-err-line-patterns &#39;((&amp;quot;\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]&amp;quot; 2 3 nil 1))) (defconst flymake-allowed-perl-file-name-masks &#39;((&amp;quot;\\.pl$&amp;quot; flymake-perl-init) (&amp;quot;\\.pm$&amp;quot; flymake-perl-init) (&amp;quot;\\.t$&amp;quot; flymake-perl-init) )) (defun flymake-perl-init () (let* ((temp-file (flymake-init-create-temp-buffer-copy &#39;flymake-create-temp-inplace)) (local-file (file-relative-name temp-file (file-name-directory buffer-file-name)))) (list &amp;quot;perl&amp;quot; (list &amp;quot;-wc&amp;quot; local-file)))) (defun flymake-perl-load () (interactive) (set-perl5lib) (defadvice flymake-post-syntax-check (before flymake-force-check-was-interrupted) (setq flymake-check-was-interrupted t)) (ad-activate &#39;flymake-post-syntax-check) (setq flymake-allowed-file-name-masks (append flymake-allowed-file-name-masks flymake-allowed-perl-file-name-masks)) (setq flymake-err-line-patterns flymake-perl-err-line-patterns) (flymake-mode t)) (add-hook &#39;cperl-mode-hook &#39;(lambda () (flymake-perl-load))) (defun next-flymake-error () (interactive) (flymake-goto-next-error) (let ((err (get-char-property (point) &#39;help-echo))) (when err (message err)))) (global-set-key &amp;quot;\M-e&amp;quot; &#39;next-flymake-error)  実行画面 参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！</description>
    </item>
    
    <item>
      <title>init-loader.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/21/emacs-init-loader/</link>
      <pubDate>Tue, 21 Aug 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/21/emacs-init-loader/</guid>
      <description> インストール M-x auto-install-from-url &amp;lt;RET&amp;gt; http://coderepos.org/share/browser/lang/elisp/init-loader/init-loader.el  とりあえず.emacs.elをコピーし、00_init.elを作成 cp -a .emacs.el .emacs.d/conf/00_init.el  .emacsの設定 今後は、.emacs.d/conf/以下に、設定ごとのファイルを設置していくので、
.emacsには、読み込み先のみを設定する。
;; load-path (add-to-list &#39;load-path &amp;quot;~/.emacs.d/elisp&amp;quot;) (require &#39;init-loader) (init-loader-load &amp;quot;~/.emacs.d/conf&amp;quot;)  ファイルを分割する さきほど生成した00_init.elを設定ごとにファイルを分割していく。
tree . ├── 00_init.el ├── 10_auto_install.el ├── 50_autocomplete.el ├── 50_perl.el ├── 60_flymake.el ├── 80_markdown.el └── 80_serial_number.pl  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Perl Hacks on Emacs emacsでinit-loaderを導入してみた  </description>
    </item>
    
    <item>
      <title>perl-completion.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-perl-completion/</link>
      <pubDate>Mon, 20 Aug 2012 04:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-perl-completion/</guid>
      <description> はじめに すでにauto-intall.elがインストールされている前提で話をすすめます。
auto-installのインストール手順はこちらをご覧ください。
インストール手順 emacsを起動し、
M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: perl-completionn &amp;lt;RET&amp;gt;  auto-isntall-batchを実行、次にインストールしたいパッケージ名(perl-completion)を入力します。
すると自動で複数ソースのダウンロードが始まります。
ダウンロードし終わると「モード行」に
Type C-c C-c to continue; Type C-c C-d for view diff; Type C-c C-q to quit.  というメッセージが出てくるので、「C-c C-c」と入力し、ダウンロードしたソースを順番にコンパイルしていきます。
すべてコンパイルし終えると、以下のようなメッセージが表示され、インストールが完了します。
Installation is completed.  .emacsの設定 cperl-mode時に、auto-completion(とauto-complete)を有効にするように設定します。
;; perl-completion (add-hook &#39;cperl-mode-hook (lambda () (require &#39;auto-complete) (require &#39;perl-completion) (add-to-list &#39;ac-sources &#39;ac-source-perl-completion) (perl-completion-mode t)))  実行画面 </description>
    </item>
    
    <item>
      <title>anything.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-anything/</link>
      <pubDate>Mon, 20 Aug 2012 03:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-anything/</guid>
      <description>はじめに すでにauto-intall.elがインストールされている前提で話をすすめます。
auto-installのインストール手順はこちらをご覧ください。
##インストール手順
emacsを起動し、
M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: anything &amp;lt;RET&amp;gt;  auto-isntall-batchを実行、次にインストールしたいパッケージ名(anything)を入力します。
すると自動で複数ソースのダウンロードが始まります。
ダウンロードし終わると「モード行」に
Type C-c C-c to continue; Type C-c C-d for view diff; Type C-c C-q to quit.  というメッセージが出てくるので、「C-c C-c」と入力し、ダウンロードしたソースを順番にコンパイルしていきます。
すべてコンパイルし終えると、以下のようなメッセージが表示され、インストールが完了します。
Installation is completed.  インストールされるソース一覧 cd .emacs.d/elisp/ tree . ├── anything-auto-install.el ├── anything-auto-install.elc ├── anything-complete.el ├── anything-complete.elc ├── anything-config.el ├── anything-config.elc ├── anything-grep.el ├── anything-grep.elc ├── anything-gtags.el ├── anything-gtags.elc ├── anything-ipa.el ├── anything-ipa.elc ├── anything-match-plugin.</description>
    </item>
    
    <item>
      <title>auto-complete.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-auto-complete/</link>
      <pubDate>Mon, 20 Aug 2012 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-auto-complete/</guid>
      <description> はじめに すでにauto-intall.elがインストールされている前提で話をすすめます。
auto-installのインストール手順はこちらをご覧ください。
またauto-installを使わずに、手動でインストール、コンパイルしたい場合は
下記サイト(auto-complete.elの開発者さんが説明してくれています)をご参照ください。
「Emacsのトラノマキ」連載第09回「auto-completeを使おう」
インストール手順 emacsを起動し、
M-x auto-install-batch &amp;lt;RET&amp;gt; Extension name: auto-complete development version &amp;lt;RET&amp;gt;  auto-isntall-batchを実行、次にインストールしたいパッケージ名(auto-complete development version)を入力します。
すると自動で複数ソースのダウンロードが始まります。
ダウンロードし終わると「モード行」に
Type C-c C-c to continue; Type C-c C-d for view diff; Type C-c C-q to quit.  というメッセージが出てくるので、「C-c C-c」と入力し、ダウンロードしたソースを順番にコンパイルしていきます。
すべてコンパイルし終えると、以下のようなメッセージが表示され、インストールが完了します。
Installation is completed.  ##. emacsの設定
;; auto-complete (require &#39;auto-complete) (require &#39;auto-complete-config) ; 必須ではないですが一応 (global-auto-complete-mode t)  実行画面 参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 「Emacsのトラノマキ」連載第09回「auto-completeを使おう」
  </description>
    </item>
    
    <item>
      <title>auto-install.elをインストールする</title>
      <link>http://tatsuyano.github.io/2012/08/20/emacs-auto-install/</link>
      <pubDate>Mon, 20 Aug 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/20/emacs-auto-install/</guid>
      <description> anything.elやperl-completion.elを簡単にインストールできるauto-install.elをインストールします。
emacs.d以下の構成 .emacs.d以下の構成はPerl Hacks on Emacsに習い、以下のようにします。
.emacs.d ├── conf … init-loader.elで使う。 ├── elisp … auto-install.elでインストールしたソースや、手動でダウンロードしたソースの置場所。 └── site … それ以外のライブラリの置場所。  ダウンロード cd .emacs.d/elisp/ wget http://www.emacswiki.org/emacs/download/auto-install.el  .emacsの設定 ;; emacs起動時に、読み込むソース(auto-installなど)の置場所を指定します。 (add-to-list &#39;load-path &amp;quot;~/.emacs.d/elisp&amp;quot;) ;; auto-installでインストールしたソースの置場所を指定します。 (require &#39;auto-install) (setq auto-install-directory &amp;quot;~/.emacs.d/elisp/&amp;quot;)  参考サイト 以下のサイトを参考にさせていただきました。ありがとうございます！
 Perl Hacks on Emacs auto-install.el のインストール  </description>
    </item>
    
    <item>
      <title>スポニチフィットラン 皇居 RUNNING FESTA</title>
      <link>http://tatsuyano.github.io/2012/08/05/suponichi-fitrun-running-festa/</link>
      <pubDate>Sun, 05 Aug 2012 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2012/08/05/suponichi-fitrun-running-festa/</guid>
      <description>先月（7月）、久々に皇居の10kmレース「スポニチフィットラン 皇居 RUNNING FESTA」に出場しました。
タイムは以前出場時よりも、5kgの体重増と猛暑だったこともあり、約4分も遅くなってしまいました。。
今回はそのリベンジということで、2ヶ月連続で「スポニチフィットラン 皇居 RUNNING FESTA（第19回）」に出場しました。
※今回写真は撮れなかったので、以前に撮影した写真を代用。
前日にバナナマンのライブを見たせいか寝付けず、結局朝の6時ぐらいに就寝。8時起床と最悪のコンディション。
寝ぼけていたのか、受付＆着替える施設がある小川町ではなく、レース会場の竹橋に向かってしまい、急遽Uターン。
レース会場まで全力でダッシュしスタート2分前に着くといういい加減な気持ちでレースに参加。
いちよスタートは切れたものの、運営者さんのご好意で自分だけ4分遅れでスタートさせてもらうという形になってしまい、
大変迷惑をかけてしまいました。本当に反省しています。
結局タイムは54分台というリベンジどころかさらに悪くなるという最悪な結果に。。
まあ自業自得ということなのでしょう。以前はしっかりレース前の調整をしていたのですが、最近慣れてきたせいか
すごくお座なりになってしまっているので、これを最後にしっかりコンディションを作れるよう調整をしようと思います。</description>
    </item>
    
  </channel>
</rss>