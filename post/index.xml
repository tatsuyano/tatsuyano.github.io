<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on blog.10rane.com</title>
    <link>http://tatsuyano.github.io/post/</link>
    <description>Recent content in Posts on blog.10rane.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 06 Jan 2016 10:40:00 +0900</lastBuildDate>
    <atom:link href="http://tatsuyano.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SwiftからObjective-Cを呼ぶ方法</title>
      <link>http://tatsuyano.github.io/2016/01/06/how-to-call-objective-c-from-swift/</link>
      <pubDate>Wed, 06 Jan 2016 10:40:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2016/01/06/how-to-call-objective-c-from-swift/</guid>
      <description>

&lt;p&gt;Swiftで開発していて、Objective-Cのライブラリを使いたいケースがよくあります。
試しに、&lt;a href=&#34;https://github.com/TheLevelUp/LUKeychainAccess&#34;&gt;LUKeychainAccess&lt;/a&gt;というKeychain ServicesのラッパークラスををSwiftから呼び出したいと思います。
&lt;em&gt;今回はLUKeychainAccessのインストールは、CocoaPodなどを使わず手動で行います&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;実装の流れ:0097856035acae65dbe27799660c00e8&#34;&gt;実装の流れ&lt;/h3&gt;

&lt;p&gt;実装の流れは以下のようになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Swiftのプロジェクトを作成し、Objective-Cのライブラリを追加&lt;/li&gt;
&lt;li&gt;ブリッジファイルを作成し、Objective-Cのライブラリのをimport&lt;/li&gt;
&lt;li&gt;SwiftのからObjective-Cのコードを呼び出す&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;swiftのプロジェクトを作成し-objective-cのライブラリを追加:0097856035acae65dbe27799660c00e8&#34;&gt;Swiftのプロジェクトを作成し、Objective-Cのライブラリを追加&lt;/h3&gt;

&lt;p&gt;まずは、いつもどおりSwiftのプロジェクトを作成します。
テンプレートは「SingleViewApplication」、プロジェクト名は「LUKeychainFromSwift」で作成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-call-objective-c-from-swift_001.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;次にダウンロードしたLUKeychainAccessのヘッダーファイルなどが入っているディレクトリ(LUKeychainAccess/LUKeychainAccess)をD&amp;amp;Dで、プロジェクトにコピーします。
今回はプロジェクト内にライブラリを追加したいので、&lt;code&gt;Copy items if needed&lt;/code&gt;と&lt;code&gt;Create groups&lt;/code&gt;にチェックを入れてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-call-objective-c-from-swift_002.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;ライブラリを追加すると、自動で&lt;code&gt;Build Phases &amp;gt; Compile Sources&lt;/code&gt; に&lt;code&gt;LUKeychainAccess.m&lt;/code&gt;と&lt;code&gt;LUKeychainServices.m&lt;/code&gt;が追加されます。
追加されていない場合は手動で追加してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-call-objective-c-from-swift_003.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;ブリッジファイルを作成し-objective-cのライブラリをimport:0097856035acae65dbe27799660c00e8&#34;&gt;ブリッジファイルを作成し、Objective-Cのライブラリをimport&lt;/h3&gt;

&lt;p&gt;ブリッジファイルを作成して、呼び出したいライブラリ(ヘッダーファイル)を指定(import)します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;File &amp;gt; New &amp;gt; File... &amp;gt; Header File&lt;/code&gt; からヘッダーファイルを選択し、ブリッジファイル「LUKeychainFromSwift-Bridging-Header.h」を作成します。
作成したブリッジファイルにimport先のライブラリ(&lt;code&gt;LUKeychainAccess.h&lt;/code&gt;)を指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-call-objective-c-from-swift_004.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;※ 今回は自前でObjective-Cのクラスを実装しないので、手動でブリッジファイルを用意しましたが、
新規にObjective-Cのファイルを作成することで、自動でブリッジファイルを作成することが可能です。くわしくは下記サイトを確認してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://easyramble.com/setup-bridging-header-easily.html&#34;&gt;Bridging Headerのファイル作成と設定を簡単に行う手順&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;build-setting-に作成したブリッジファイルを指定する:0097856035acae65dbe27799660c00e8&#34;&gt;Build Setting に作成したブリッジファイルを指定する&lt;/h3&gt;

&lt;p&gt;次に&lt;code&gt;Build Setting &amp;gt; Swift Compiler - Code Generation &amp;gt; Objective-C Bridgeing Header&lt;/code&gt;に作成したブリッジファイル名を設定します。
以上で設定は完了です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-call-objective-c-from-swift_005.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;swiftのからobjective-cのコードを参照する:0097856035acae65dbe27799660c00e8&#34;&gt;SwiftのからObjective-Cのコードを参照する&lt;/h3&gt;

&lt;p&gt;設定が正常に完了していれば、コード補完が機能されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-call-objective-c-from-swift_006.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;ためしに実行してみると、Keychain Servicesに保存した値が引っ張ってこれることが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-call-objective-c-from-swift_007.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:0097856035acae65dbe27799660c00e8&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://crunchtimer.jp/blog/technology/swift/3312/&#34;&gt;Objective-CプログラムをSwiftから呼び出す方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://easyramble.com/setup-bridging-header-easily.html&#34;&gt;Bridging Headerのファイル作成と設定を簡単に行う手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/24002369/how-to-call-objective-c-code-from-swift/24005242#24005242&#34;&gt;How to call Objective C code from Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ch3cooh.jp/entry/20130204/1359942207&#34;&gt;Undefined symbols for architecture armv7:〜という警告が出たときの対策方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>aglioを使ってmarkdownからAPIドキュメントとStubを作成する</title>
      <link>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</link>
      <pubDate>Tue, 15 Sep 2015 15:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/09/15/to-create-the-api-documentation-and-the-stub-from-markdown-using-aglio/</guid>
      <description>

&lt;p&gt;仕事で簡単なAPIを実装する必要があったので、簡単にAPIドキュメントを公開したり、ドキュメントからStubを自動で用意する方法を調べてみた。&lt;/p&gt;

&lt;p&gt;で、&lt;a href=&#34;http://dackdive.hateblo.jp/entry/2015/08/07/181723&#34;&gt;こちらの記事&lt;/a&gt;にやりたいことがまんま載っていた(ありがとうございます！)ので、
記事を参考に&lt;a href=&#34;https://github.com/tatsuyano/aglio-template&#34;&gt;自分用のテンプレート&lt;/a&gt;を用意した。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;blueprint:8e9313d6f2703a165c9d67a103a4eac0&#34;&gt;Blueprint&lt;/h3&gt;

&lt;p&gt;Blueprintの記述は下記をページを参照。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apiaryio/api-blueprint/blob/master/Tutorial.md&#34;&gt;API Blueprint Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apiaryio/api-blueprint/tree/master/examples&#34;&gt;API Blueprint examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;api-mockの起動をgulpに設定する:8e9313d6f2703a165c9d67a103a4eac0&#34;&gt;api-mockの起動をgulpに設定する&lt;/h3&gt;

&lt;p&gt;以下のように設定し、&lt;code&gt;$ gulp mock&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp    = require(&#39;gulp&#39;),
    aglio   = require(&#39;gulp-aglio&#39;),
    ApiMock = require(&#39;api-mock&#39;);

var TEMPLATE_FILES = [&#39;apidocs/*.md&#39;],
LAYOUT_FILE    = &#39;apidocs/layout.md&#39;,
PUBLISHED_DIR  = &#39;published&#39;;

gulp.task(&#39;api-mock&#39;, function () {
  var mockServer = new ApiMock({
    blueprintPath: PUBLISHED_DIR + &#39;/index.md&#39;,
    options: {
      port: 3000
    }
  });
  mockServer.run();
});

gulp.task(&#39;mock&#39;, [&#39;api-mock&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;vagrantで使う場合-ポートを開ける:8e9313d6f2703a165c9d67a103a4eac0&#34;&gt;Vagrantで使う場合、ポートを開ける&lt;/h3&gt;

&lt;p&gt;vagrant上からaglioとapi-mockを使うには、デフォルトだと&lt;code&gt;8088&lt;/code&gt;と&lt;code&gt;3000&lt;/code&gt;を開ける必要があるので、&lt;code&gt;Vagrant&lt;/code&gt;ファイルに以下の設定を加える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 3000, host: 3000
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 8088, host: 8088
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;APIドキュメントを閲覧　 =&amp;gt; &lt;code&gt;http://localhost:8088&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;StubでAPIのテストをする =&amp;gt; &lt;code&gt;http://localhost:3000/questions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;postでjsonのテストをする:8e9313d6f2703a165c9d67a103a4eac0&#34;&gt;POSTでJSONのテストをする&lt;/h3&gt;

&lt;p&gt;GETの場合は、ブラウザからそのままAPIをそのまま叩けばいいが、POSTの場合は curl を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -v -H &amp;quot;Accept: application/json&amp;quot; -H &amp;quot;Content-type: application/json&amp;quot; -X POST \
-d &#39;{&amp;quot;name&amp;quot;: &amp;quot;hoge&amp;quot; }&#39; \
http://localhost:3000/user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしくはChromeアプリの&lt;a href=&#34;https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo/related&#34;&gt;Advanced REST client&lt;/a&gt;などを使ってテストする。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:8e9313d6f2703a165c9d67a103a4eac0&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dackdive.hateblo.jp/entry/2015/08/07/181723&#34;&gt;APIドキュメント作成ツールならApiary.ioよりaglioの方が良かった&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tatsuyano/aglio-template&#34;&gt;GitHub: aglio-template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apiaryio/api-blueprint/blob/master/Tutorial.md&#34;&gt;API Blueprint Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apiaryio/api-blueprint/tree/master/examples&#34;&gt;API Blueprint examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takuya71.hatenablog.com/entry/2012/11/10/143415&#34;&gt;curl を使って JSONデータをPOSTする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo/related&#34;&gt;Advanced REST client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>package化したboxを使うときによく出るエラー</title>
      <link>http://tatsuyano.github.io/2015/08/28/errors-out-when-using-to-package-the-box/</link>
      <pubDate>Fri, 28 Aug 2015 19:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/28/errors-out-when-using-to-package-the-box/</guid>
      <description>

&lt;p&gt;&lt;code&gt;vagrant package&lt;/code&gt;コマンドでパッケージ化したboxで仮想環境を作成(&lt;code&gt;vagrant up&lt;/code&gt;)するさいによく出るエラーをまとめました。&lt;/p&gt;

&lt;h2 id=&#34;an-error-occurred-while-downloading-the-remote-file-モートファイルのダウンロード中にエラーが発生しました:cce2e29dfeda9f5936787415d1f692b6&#34;&gt;An error occurred while downloading the remote file(モートファイルのダウンロード中にエラーが発生しました)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;An error occurred while downloading the remote file. The error
message, if any, is reproduced below. Please fix this error and try
again.

Couldn&#39;t open file xxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;解決方法&lt;/em&gt;&lt;br&gt;
パッケージ(コピー)元のboxと同じ設定のbox(パッケージ化したboxで生成した仮想環境)がバッティングしている？
パッケージ元の仮想環境を&lt;code&gt;vagrant destroy&lt;/code&gt;して削除する。
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;authentication-failure-retrying-認証の失敗-再試行:cce2e29dfeda9f5936787415d1f692b6&#34;&gt;Authentication failure. Retrying&amp;hellip;(認証の失敗。再試行)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection timeout. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;解決方法&lt;/em&gt;&lt;br&gt;
&lt;code&gt;vagrant up&lt;/code&gt;したさいに生成される秘密鍵と、パッケージしたbox(ゲストOS)に設定してある公開鍵がマッチしないためにエラーになる。
&lt;code&gt;vagrant ssh-config&lt;/code&gt;で表示される秘密鍵から公開鍵を生成し、公開鍵を設定する。&lt;/p&gt;

&lt;p&gt;1.秘密鍵を確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh-config
...
  IdentityFile xxxx/vagrant_private_key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.公開鍵を生成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -yf xxxx/vagrant_private_key &amp;gt; public_key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.ゲストOSに生成した公開鍵を設定する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh

vagrant at localhost in ~
$ vi /home/vagrant/.ssh/authorized_keys # 生成した公開鍵を設定する
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考サイト:cce2e29dfeda9f5936787415d1f692b6&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/megane42/items/1d8ae7444d8c1b10bbd7&#34;&gt;Vagrant で作った VM にやってはいけない2つのこと&lt;/a&gt;
&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-following-ssh-command-responded-with-a-non-zero-exit-status-sshコマンドがゼロ以外の終了ステータスで応答しました:cce2e29dfeda9f5936787415d1f692b6&#34;&gt;The following SSH command responded with a non-zero exit status(SSHコマンドがゼロ以外の終了ステータスで応答しました)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;The following SSH command responded with a non-zero exit status.
Vagrant assumes that this means the command failed!

ARPCHECK=no /sbin/ifup eth1 2&amp;gt; /dev/null

Stdout from the command:

Device eth1 does not seem to be present, delaying initialization.


Stderr from the command:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;解決方法&lt;/em&gt;&lt;/br&gt;
MACアドレスとのマッピングを無効にし、再起動&lt;code&gt;vagrant reload&lt;/code&gt;する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh

vagrant at localhost in ~
$ sudo ln -s -f /dev/null /etc/udev/rules.d/70-persistent-net.rules
$ exit

$ vagrant reload
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考サイト-1:cce2e29dfeda9f5936787415d1f692b6&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tarr1124/items/8276e609c0f7cdec79e7&#34;&gt;macで作られたvagrant boxをもらったときに出るネットワークエラーの対処法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.monochromegane.com/blog/2013/04/06/vagrant-network-error/&#34;&gt;Vagrantのネットワークが起動しないときは&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>YAPC::Asia2015に行ってきた</title>
      <link>http://tatsuyano.github.io/2015/08/22/yapc-asia-2015/</link>
      <pubDate>Sat, 22 Aug 2015 08:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/22/yapc-asia-2015/</guid>
      <description>&lt;p&gt;6年ぶりに&lt;a href=&#34;http://yapcasia.org/2015/&#34;&gt;YAPC&lt;/a&gt;に行ってきた。思っていた以上に混んでいて、
メイン会場以外での人気のセッションだと、部屋にも入れないほどの盛況ぶりだった。&lt;/p&gt;

&lt;p&gt;前の会社の同僚も結構来ていてみたいだったので、顔を合わせたら声かけようと思っていたが、
見ていたセッションがまったくかぶらず、開発言語が変わると(自分はPerlから今はPHPをメインで使っている)、
こうも趣向が変わるのかと少し切なかった。&lt;/p&gt;

&lt;p&gt;2日目は1日目の失敗を踏まえ、なるべく部屋を移動しないよう工夫してみたが、結局ランチセッションは逃した。&lt;/p&gt;

&lt;p&gt;予定していたセッションは半分ぐらいしか聞けなかったが、セッションを聞いているうち、無性にプログラミングがしたくなったので途中で帰った。&lt;/p&gt;

&lt;p&gt;セッションの自体は&lt;a href=&#34;https://www.youtube.com/channel/UCTqv2OjSox70MM7iYftlsIw&#34;&gt;Youtube&lt;/a&gt;などにすぐに上がるし、
ただ見たいだけなら直接行くメリットは実はあまりないんだけど、こうやって熱に当てられることで頑張ろうと思えるところが、
イベントのイイトコなのかなと思う。&lt;/p&gt;

&lt;p&gt;最後に楽しいイベント、ありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>台湾に旅行に行ってきた</title>
      <link>http://tatsuyano.github.io/2015/08/13/i-went-to-travel-to-taiwan/</link>
      <pubDate>Thu, 13 Aug 2015 14:40:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/13/i-went-to-travel-to-taiwan/</guid>
      <description>

&lt;p&gt;7月末に3泊4日で台湾旅行に行ってきた。
海外旅行は10年ぶりぐらいだったので、ツアーにするか迷ったけど、もういい大人なので、自由旅行で台北を中心に淡水、九份などを回ってきた。&lt;/p&gt;

&lt;h2 id=&#34;台北:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;台北&lt;/h2&gt;

&lt;p&gt;ガイド本などを見ると、台湾は親日で日本語も結構通じるみたいな事が書いてあったが、それは観光地など特定のポイントの話で、
それ意外は普通に日本語は通じなかった(当たり前か)。なのでチケットを買うにも四苦八苦したが、なんとかホテル(王朝大酒店)に到着。&lt;/p&gt;

&lt;p&gt;写真では伝わらないかもしれないが、今まで一番大きなホテルでテンションがかなり上がった。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;
&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;
&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;また平日ということもあり原チャの数が凄かった。日本の感覚で歩いていると事故りそうなので、注意が必要。&lt;/p&gt;

&lt;h3 id=&#34;台北101:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;台北101&lt;/h3&gt;

&lt;p&gt;初日は雨が降っていたので、遠出はせずに先に台北101で買い物をすることにした。
高さ509メートルという世界第二位の高さは圧巻だった。大きな建物というだけで、十分観光名所として成立するのだなあとなんか関心した。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;
&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;展望台から見た夜景。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_06.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;臨江街観光夜市:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;臨江街観光夜市&lt;/h3&gt;

&lt;p&gt;台北101の近くの余市。「臭豆腐」という台湾のソウルフードの匂いがなかなかきつい。
旅行前は余市で臭豆腐を食べるつもりだったが、ちょっときつそうだったので断念。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_07.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;
&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_08.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;龍山寺:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;龍山寺&lt;/h3&gt;

&lt;p&gt;有名なパワースポット？らしいお寺。参拝のルールが解らず、周りのやり方を眺めていたら、親切なおせっかいおばさんがやり方を教えてくれた。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_09.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;中正紀念堂:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;中正紀念堂&lt;/h3&gt;

&lt;p&gt;とにかく広い。平日で人も少なかったこともあり、なおさら感じたのかもしれない。
広場で遠くを眺めていると、以前行った中国を思い出した。やはり台湾も中国なのだなあと改めて感じた。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_10.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;この写真はgoogleフォトが自動で写真を連結してパノラマ化した写真。このクオリティならもう広角カメラは必要ないかもしれない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_11.jpg&#34; width=&#34;100%&#34;&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;淡水:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;淡水&lt;/h2&gt;

&lt;p&gt;台北からMRT(電車)で約一時間くらい。日本で言うところの横浜っぽいところ。夜景が綺麗ということで18時くらいまで粘ったがなかなか日は落ちず。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_12.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;故宮博物院:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;故宮博物院&lt;/h2&gt;

&lt;p&gt;主に陶器や、翡翠などの美術品を中心に展示している博物館。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_13.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;九份:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;九份&lt;/h2&gt;

&lt;p&gt;今回一番楽しみにしていた九份。元々炭鉱の町ということで、山の中の一部分に町がある感じ。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_14.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;
&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_15.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;日が暮れてくると、幻想的な雰囲気になってくる。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/i-went-to-travel-to-taiwan_16.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;感想:e89997e94bc192fd44ba1ad874ba37de&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;今回は台北を中心にひと通り回れてとても楽しかった。
初めは久々の海外旅行ということもあり、言葉が通じず苦労したが、2日目からは電車移動も覚え、かなり自由な旅行を満喫できた。&lt;/p&gt;

&lt;p&gt;ただ英語がもう少しまともに聞き取れれば(話せれば)、もっと楽しかったなあと強く思った。
次回海外に行く時までに、もう少し英語を勉強しようと思う(小並感)。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EmacsにternをインストールしてjQueryを補完する</title>
      <link>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</link>
      <pubDate>Thu, 06 Aug 2015 16:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/08/06/how-to-install-and-setup-tern/</guid>
      <description>

&lt;p&gt;EmacsでjQueryの補完をするには、&lt;a href=&#34;http://ternjs.net/&#34;&gt;Tern&lt;/a&gt;というツールを使うことで実現できる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;ternのインストール:fbb0e51f3f221aa6ee9a86ae15128c18&#34;&gt;Ternのインストール&lt;/h3&gt;

&lt;p&gt;まずはTern本体をインストール。このTernとEmacs(tern-mode)が裏で通信しながら補完を行う。
Rubyでいうところのrobeと同じ形。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g tern
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;tern-tern-auto-completeのインストール:fbb0e51f3f221aa6ee9a86ae15128c18&#34;&gt;tern、tern-auto-completeのインストール&lt;/h3&gt;

&lt;p&gt;自分はCaskで管理しているので、Caskファイルに追加し、インストール。
&lt;code&gt;tern-auto-complate&lt;/code&gt;は「auto-complate」を使ってpopupで補完候補を表示する。&lt;/p&gt;

&lt;p&gt;Cask&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(depends-on &amp;quot;tern&amp;quot;)
(depends-on &amp;quot;tern-auto-complete&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「js2-mode」が起動したら&lt;code&gt;tern-mode&lt;/code&gt;と&lt;code&gt;tern-auto-complate&lt;/code&gt;も起動するよう設定する。&lt;/p&gt;

&lt;p&gt;init_loader/03_javascript.el&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(autoload &#39;js2-mode &amp;quot;js2-mode&amp;quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\.js$&amp;quot; . js2-mode))
(add-hook &#39;js2-mode-hook
          (lambda ()
            (tern-mode t)))
 
(eval-after-load &#39;tern
   &#39;(progn
      (require &#39;tern-auto-complete)
      (tern-ac-setup)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;tern-configの設定:fbb0e51f3f221aa6ee9a86ae15128c18&#34;&gt;tern-configの設定&lt;/h3&gt;

&lt;p&gt;ホーム直下に&lt;code&gt;.tern-config&lt;/code&gt;というJsonファイルを設定する。ここで補完するライブラリなどを指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;libs&amp;quot;: [
    &amp;quot;browser&amp;quot;,
    &amp;quot;jquery&amp;quot;
  ],
  &amp;quot;plugins&amp;quot;: {
     &amp;quot;node&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;tern-modeの実行:fbb0e51f3f221aa6ee9a86ae15128c18&#34;&gt;tern-modeの実行&lt;/h3&gt;

&lt;p&gt;正常にインストールが完了すると、以下のようにポップアップで補完が出るようになる。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-install-and-setup-tern_01.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:fbb0e51f3f221aa6ee9a86ae15128c18&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ternjs.net/doc/demo.html&#34;&gt;Tern demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://syati.info/?p=2163&#34;&gt;emacs で javascript なら js2-mode, tern-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuki.tdiary.net/20150120.html&#34;&gt;Emacs の JavaScript 開発環境を整備する(Tern編)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacsにflymake-jshintをインストールする</title>
      <link>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</link>
      <pubDate>Tue, 28 Jul 2015 11:51:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/28/how-to-install-and-setup-jshint/</guid>
      <description>

&lt;p&gt;今読んでいる &lt;a href=&#34;http://www.oreilly.co.jp/books/9784873116730/&#34;&gt;シングルページWebアプリケーション&lt;/a&gt; の
サンプルコードが「JSLint」を使っていたので、インストールしようと思ったが
「JSHint」のほうが良さそうなのでEmacsに「flymake-jshint」をCask経由でインストールした。&lt;/p&gt;

&lt;h3 id=&#34;jshintのインストール:f7ec3808b192c40a23b60d0e92adce7b&#34;&gt;JSHintのインストール&lt;/h3&gt;

&lt;p&gt;まずはnpmでJSHint本体をインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g jshint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;flymake-jshintのインストール:f7ec3808b192c40a23b60d0e92adce7b&#34;&gt;flymake-jshintのインストール&lt;/h3&gt;

&lt;p&gt;自分はCaskで管理しているので、Caskファイルに追加しインストール。
flymake-jshintは「js2-mode」に必須のようなので、インストールしていない場合は先にインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Cask
(depends-on &amp;quot;flymake-jshint&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSHintのパスを通し、js2-modeが起動したら、JSHintがロードするよう設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# init_loader/03_javascript.el
(setq exec-path (append exec-path &#39;(&amp;quot;~/.anyenv/envs/ndenv/shims/&amp;quot;)))
(add-hook &#39;js2-mode-hook &#39;(lambda ()
                              (require &#39;flymake-jshint)
                              (flymake-jshint-load)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;jshintの実行:f7ec3808b192c40a23b60d0e92adce7b&#34;&gt;JSHintの実行&lt;/h3&gt;

&lt;p&gt;正常にインストールが完了すると、タイポなどミスがあると以下のようにポップアップで警告が出るようになる。
うまくいかない場合は&lt;code&gt;M-x flymake-jshint-load&lt;/code&gt;で手動でJSHintを起動し、エラーを確認すること。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/how-to-install-and-setup-jshint_01.png&#34; alt=&#34;&#34; /&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:f7ec3808b192c40a23b60d0e92adce7b&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.node.ws/?p=1379&#34;&gt;JSLint から JSHint をフォークした理由(翻訳)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://safx-dev.blogspot.jp/2013/05/emacsflymake-jshintjavascript.html&#34;&gt;Emacsでflymake-jshintを利用してリアルタイムでのJavaScript文法チェックができるようにする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugoに独自ドメインを適応したので、sitemap.xmlを置換する</title>
      <link>http://tatsuyano.github.io/2015/07/26/replacing-sitemap-of-hugo/</link>
      <pubDate>Sun, 26 Jul 2015 21:15:01 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/26/replacing-sitemap-of-hugo/</guid>
      <description>&lt;p&gt;Hugoに独自ドメインを適応したところ、自動生成されるsitemap.xmlが&lt;br /&gt;
Github pagesのURLで生成されていたので、deploy.shにsedコマンドを追加した。&lt;/p&gt;

&lt;p&gt;sedコマンドで上書き置換(sed -i)したら、バックアップファイルが自動で生成&lt;br /&gt;
されるを止めるのはどうしたらいいのだろうか。。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/tatsuyano/57c42f1b050402abd7ea.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>ブログをGhostからHugoに移行した</title>
      <link>http://tatsuyano.github.io/2015/07/25/switch-hugo/</link>
      <pubDate>Sat, 25 Jul 2015 18:15:01 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/07/25/switch-hugo/</guid>
      <description>

&lt;p&gt;今までaws上でブログ(Ghost)を運用していたが、無料期間が終わったら月2000円&lt;br /&gt;
ちょっとかかったので、またGithub Pages上にブログを移行させた。&lt;/p&gt;

&lt;p&gt;以前はGithub PagesでOctopressを使っていたが、最近はHugoというのが流行っているらしいので使ってみた。&lt;/p&gt;

&lt;p&gt;記事が思いの外多かったので、エクスポート用のコードをrubyで書いた。&lt;br /&gt;
コードを書くのに思ったより時間がかかったが、久々にrubyを使って楽しかった。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/tatsuyano/2e74910f360ad1887de2.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;参考サイト:6703deb5cdbafca18cdf6d5cce74fef9&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hori-ryota.com/blog/create-blog-with-hugo-and-circleci/&#34;&gt;HugoとCircleCIでGitHub PagesにBlogを公開してみたら超簡単だった&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://machortz.github.io/posts/usinghugo/&#34;&gt;Hugoを使ってみたときのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yoheimuta/items/8a619cac356bed89a4c9&#34;&gt;Hugo + Github Pages + Wercker CI = ¥0（無料）でコマンド 1 発&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jsのスコープについて</title>
      <link>http://tatsuyano.github.io/2015/06/08/for-the-scope-of-the-js/</link>
      <pubDate>Mon, 08 Jun 2015 02:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/08/for-the-scope-of-the-js/</guid>
      <description>

&lt;h2 id=&#34;グローバルスコープとローカルスコープしかない:12cd6967166e7d3f6ae4d2a16d321c1d&#34;&gt;グローバルスコープとローカルスコープしかない&lt;/h2&gt;

&lt;p&gt;Jsには2種類のスコープしかない。グローバルスコープ内で宣言した変数をグローバル変数、ローカルスコープ内で宣言した変数をローカル変数という。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スクリプト全体(トップレベル)で有効なグローバル変数

&lt;ul&gt;
&lt;li&gt;プログラム終了時までメモリを確保してしまう&lt;/li&gt;
&lt;li&gt;多用すると、名前がバッティングする可能性がある
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;関数内でのみ有効なローカル変数

&lt;ul&gt;
&lt;li&gt;関数終了時にメモリが開放される&lt;/li&gt;
&lt;li&gt;宣言時に&lt;code&gt;var&lt;/code&gt;をつけないと、*グローバル変数*として認識されてしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var hoge = &#39;global&#39;;  // =&gt; グローバル変数

function func () {
  var fuga = &#39;local&#39;; // =&gt; ローカル変数、必ずvarをつける
  console.log(fuga);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

また、他言語のようにブロックスコープは存在しない。

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (true) {
  var hoge = &#39;block&#39;;
}

console.log(hoge); // =&gt; block ブロック内で宣言した変数も参照できてしまう
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## 変数の巻き上げ(hoisting)

Jsには「変数の巻き上げ」という概念がある。

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var hoge = &#39;global&#39;;

function func() {
  console.log(hoge); // =&gt; undefined なぜか global と出力されない

  var hoge = &#39;local&#39;;
  console.log(hoge); // =&gt; local 期待どおりの出力
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一回目の&lt;code&gt;console.log(hoge);&lt;/code&gt;で、なぜか&lt;code&gt;undefined&lt;/code&gt;が出力されている。これが「変数の巻き上げ」の挙動。&lt;/p&gt;

&lt;p&gt;何が起きているかというと、Jsでは、&lt;em&gt;関数内のどこで変数宣言をしても、関数の先頭で、宣言のみしたと認識されてしまうため。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;つまり上記のコードは以下のように処理されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var hoge = &#39;global&#39;;

function func() {
  var hoge; // 初期値は入っていない。宣言のみ
  console.log(hoge); // =&gt; 初期値が入っていないので、undefined

  hoge = &#39;local&#39;;
  console.log(hoge); // =&gt; 値が入っているので、local
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを防ぐには、変数宣言は、*関数の先頭*で行うようにする。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:12cd6967166e7d3f6ae4d2a16d321c1d&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;グローバル変数は多用しない&lt;/li&gt;
&lt;li&gt;変数宣言時は、必ず var をつける&lt;/li&gt;
&lt;li&gt;ローカル変数は、関数の先頭で宣言する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考サイト:12cd6967166e7d3f6ae4d2a16d321c1d&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tacamy.hatenablog.com/entry/2012/12/30/191125&#34;&gt;JavaScript のスコープを理解する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/14/091700069/091700002/&#34;&gt;JavaScriptのスコープを理解しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://analogic.jp/hoisting/&#34;&gt;知らないと怖い「変数の巻き上げ」とは？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連記事:12cd6967166e7d3f6ae4d2a16d321c1d&#34;&gt;関連記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/06/08/for-function-of-js/&#34;&gt;Jsの関数について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jsの関数について</title>
      <link>http://tatsuyano.github.io/2015/06/08/for-function-of-js/</link>
      <pubDate>Mon, 08 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/08/for-function-of-js/</guid>
      <description>

&lt;p&gt;Jsには主に「Function文」と「Function式(関数リテラル)」という２つの関数の宣言方法がある。
※本当は「Functionコンストラクタ」という方法もあるが、あまり実用的ではないので省略。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#39;language-javascript&#39;&gt;// Function文
function func () {
  console.log(&#39;statements&#39;);
}

// Function式
var func = function func() {
  console.log(&#39;expression&#39;);
};

//関数の呼び出し方法は同じ
func();
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

違いは評価のタイミング。「Function文」は関数が静的な構造として宣言される。つまり、Jsの実行環境がコードを解析するタイミングで関数が静的に登録され、これにより「関数をどこで定義していても呼び出せる」ようになります。


&lt;pre&gt;&lt;code class=&#39;language-javascript&#39;&gt;func(); // =&gt; 宣言前に読み出してもエラーにならない

function func () {
  console.log(&#39;statements&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

逆に「Function式」は、変数に代入された段階で評価される。そのため、宣言後に呼び出さないとエラーになる。

&lt;pre&gt;&lt;code class=&#39;language-javascript&#39;&gt;func(); // =&gt; TypeError: undefined is not a function

var func = function func () {
  console.log(&#39;expression&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## 無名関数

「無名関数」とは、Function式の関数名を省略した形
。Function式を使う場合は、主に無名関数が使われる。

&lt;pre&gt;&lt;code class=&#39;language-javascript&#39;&gt;// 無名関数
var func = function () {
  console.log(&#39;expression&#39;);
};

func();
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

## 即時関数

「即時関数」とは、関数を()で囲んだ状態で実行することで、関数宣言と同時にその関数を実行する書き方です。

&lt;pre&gt;&lt;code class=&#39;language-javascript&#39;&gt;// 即時関数
(function () {
  console.log(&#39;Hello&#39;);
})();

// ()();の代わりに、().call(this);とも書ける
(function () {
  console.log(&#39;Hello&#39;);
}).call(this);

// 即時関数に引数を渡す場合
(function (val,val2) {
  console.log(val + &#39; &#39; + val2);
})(&#39;Hello&#39;,&#39;World&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即時関数を使うことで、関数内で宣言した変数のスコープは、関数内でしか使えないようになる。
つまり、ブロックスコープと同じ効果となる。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:faca702768e957c2e4fade9d48317c0a&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;変数宣言は無名関数を使う&lt;/li&gt;
&lt;li&gt;即時関数を使えば、ブロックスコープと同じ効果が得られる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考サイト:faca702768e957c2e4fade9d48317c0a&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/14/091700069/091700001/&#34;&gt;現代プログラマの必須知識、JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/amachang/20080208/1202448348&#34;&gt;(function(){})() と function(){}()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連記事:faca702768e957c2e4fade9d48317c0a&#34;&gt;関連記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/06/08/for-the-scope-of-the-js/&#34;&gt;Jsのスコープについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>webpackを使ってes6-promiseを読み込む</title>
      <link>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</link>
      <pubDate>Wed, 03 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/</guid>
      <description>

&lt;p&gt;最近勉強中のPromiseですが、現段階(15/06/03)ではIE11に対応していません。
PromiseをIEに対応させるためには、es6-promiseというNode.jsのライブラリをフロントエンドで読み込む必要があります。&lt;/p&gt;

&lt;p&gt;しかしNode.jsのライブラリは、そのままではフロントエンドで使えないので、
webpackでフロントエンド向けにBuildする必要があります。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-webpackは他にも多くの機能がありますが、ここではNode.jsのモジュールをフロントエンドで使うため方法のみにフォーカスします。-&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;webpackを使うための準備:bf105b025d29d59e69f389ae56581628&#34;&gt;webpackを使うための準備&lt;/h3&gt;

&lt;p&gt;まずは本体のインストール。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;次に適当なディレクトリを作成します。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir webpack-sample &amp;amp;&amp;amp; cd webpack-sample
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;今回使うライブラリ(es6-promise)をディレクトリにインストールします。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install es6-promise
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;ライブラリはglobalではなく、ディレクトリ直下(/webpack-sample/node_modules)にインストールしてください。&lt;/p&gt;

&lt;h3 id=&#34;jsのbuild方法:bf105b025d29d59e69f389ae56581628&#34;&gt;JsのBuild方法&lt;/h3&gt;

&lt;p&gt;次に(Node.jsの)ライブラリを読み込むJs(main.js)をビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ webpack main.js bundle.js
Hash: de7b4a8a87c6e52d026f
Version: webpack 1.9.10
Time: 109ms
    Asset     Size  Chunks             Chunk Names
bundle.js  40.1 kB       0  [emitted]  main
   [0] ./main.js 255 bytes {0} [built]
   + 6 hidden modules
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

BuildしたJs(bundle.js)は、main.jsが依存しているライブラリ(es6-promise等)も含んだ一つのファイルに圧縮されます。
このJsのみをHTMLに読み込むだけで、Node.jsが利用できるようになります。

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;script&amp;nbsp;src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

&lt;b&gt;main.js&lt;/b&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;
var Promise = require(&#39;es6-promise&#39;).Promise;

var promise = function(code) {
    return new Promise(function (resolve,reject) {
        resolve(&#39;Hello Promise !!&#39;);
    });
}

promise().then(function (result) {
    console.log(result);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

### 確認

今回は、node.jsのhttp-serverを使って確認しようと思います。

* [Node.jsのhttp-serverっていうコマンドラインのウェブサーバーが便利](https://firegoby.jp/archives/5706)

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g http-server
$ http-server -p 4000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サーバー起動し、IEのconsoleにメッセージが表示されれば、確認OKです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/159938/blog_images/use-webpack-to-read-the-es6-promise_01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:bf105b025d29d59e69f389ae56581628&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webpack.github.io/&#34;&gt;webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jakearchibald/es6-promise&#34;&gt;es6-promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ameblo.jp/ca-1pixel/entry-11884453208.html&#34;&gt;RequireJS等はもう古い。WebPackとは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thujikun.github.io/blog/2014/12/07/webpack/&#34;&gt;Webpackを使い倒す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.twopipe.com/front-end/2014/12/22/react-webpack-env.html&#34;&gt;ReactとStylusをwebpackで使うための開発環境構築&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:bf105b025d29d59e69f389ae56581628&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/&#34;&gt;Promiseを使って、非同期処理を任意のタイミングで実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Promiseを使って、非同期処理を任意のタイミングで実行する</title>
      <link>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</link>
      <pubDate>Tue, 02 Jun 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/06/02/use-the-promise-to-perform-the-async-processing-at-anytime/</guid>
      <description>

&lt;p&gt;Promiseを使って、非同期処理を任意の順番で実行するサンプル。
ES5でも順番を指定して実行する事ができるが、Promiseを使うと綺麗に実装できる。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;http://gist-it.appspot.com/https://github.com/tatsuyano/study-es6promise/blob/master/sample01-nodejs.js&#34;&gt;
&lt;/script&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:4211bdcec880eb9ef23695a021bec295&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://azu.github.io/promises-book/&#34;&gt;JavaScript Promiseの本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/ja/tutorials/es6/promises/&#34;&gt;JavaScript Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jakearchibald/es6-promise&#34;&gt;es6-promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://babeljs.io/repl/&#34;&gt;Babel repl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連する記事:4211bdcec880eb9ef23695a021bec295&#34;&gt;関連する記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsuyano.github.io/2015/06/03/use-webpack-to-read-the-es6-promise/&#34;&gt;webpackを使ってes6-promiseを読み込む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails4の非公開情報をdotenvで管理する</title>
      <link>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</link>
      <pubDate>Wed, 13 May 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/05/13/dotenv-manages-secret-of-rails4/</guid>
      <description>

&lt;p&gt;TwitterのAPIキーなど、公開したくない情報をどこに設定すればいいか調べたところ、
&lt;code&gt;config/secrets.yml&lt;/code&gt;に設定して、&lt;code&gt;.gitignore&lt;/code&gt;して使うようなので、設定してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;# config/secrets.yml
development:
  twitter_api_key: hogefuga.....

# 呼び出し側
key = Rails.application.secrets.twitter_api_key
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

しかしherokuを利用する場合、この`secrets.yml`というファイル自体必須なので、`.gitignore`するわけにはいきません。

* [How to solve error &#34;Missing secret_key_base   for production environment&#34; on
Heroku](http://stackoverflow.com/questions/23180650/how-to-solve-error-missing-secret-key-base-for-production-environment-on-h)

## dotenv-railsの設定

そこで検討した結果、`dotenv-rails`というGemを使うことにしました。
このGemを使うと、アプリケーションごとに環境変数(非公開情報)が設定できるようになり、
`secrets.yml`に公開したくない情報を設定しなくても良くなります。

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;# Gemfile
gem &#39;dotenv-rails&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まず、アプリケーションのディレクトリの直下に&lt;code&gt;.env&lt;/code&gt;というファイルを作成し、環境変数を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;# .env
TWITTER_API_KEY=&#34;hogehoge&#34;
TWITTER_API_SECRET=&#34;fugafuga&#34;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;読み出す時は、以下のように指定します。
&lt;pre&gt;&lt;code class=&#39;language-ruby&#39;&gt;puts ENV[&amp;lsquo;TWITTER_API_KEY&amp;rsquo;] # =&amp;gt; &amp;ldquo;hogehoge&amp;rdquo;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;最後に&lt;code&gt;.env&lt;/code&gt;ファイルを&lt;code&gt;.gitignore&lt;/code&gt;します。&lt;br /&gt;
以上で完了です。&lt;/p&gt;

&lt;h2 id=&#34;herokuに環境変数を設定する:51a96cd6c0e962b72bbcd741a4bc7fd0&#34;&gt;herokuに環境変数を設定する&lt;/h2&gt;

&lt;p&gt;ちなみに、herokuに環境変数を設定するには以下のように指定します。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#39;language-bash&#39;&gt;$ heroku config:add TWITTER_API_KEY=&amp;ldquo;hogehoge&amp;rdquo;    &amp;ndash;app アプリ名
$ heroku config:add TWITTER_API_SECRET=&amp;ldquo;fugafuga&amp;rdquo; &amp;ndash;app アプリ名
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:51a96cd6c0e962b72bbcd741a4bc7fd0&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xoyip.hatenablog.com/entry/2014/04/09/214405&#34;&gt;Rails4.1のsecrets.ymlはfigaroと違うの？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://railsguides.jp/security.html#%E5%88%A9%E7%94%A8%E7%92%B0%E5%A2%83%E3%81%AE%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3&#34;&gt;Rails セキュリティガイド 10 利用環境のセキュリティ
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jangajan.com/blog/2014/10/05/secrets-dot-yml-on-heroku-in-rails4-dot-1/&#34;&gt;Rails4.1でherokuへのデプロイに失敗(Missing &amp;lsquo;secret_key_base&amp;rsquo;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://t4traw.github.io/20141215/study-rails-secrets-yml.html&#34;&gt;RailsチュートリアルをRails(4.1)で勉強する：secret_key_baseからsecrets.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/closer/items/f8d8ba00ae86d7051764&#34;&gt;環境によって変わる設定値はdotenvを使うと便利&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>jquery-readyselectorとbower-railsを使って、ページ単位でJsを管理する</title>
      <link>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</link>
      <pubDate>Tue, 28 Apr 2015 01:00:00 +0900</pubDate>
      
      <guid>http://tatsuyano.github.io/2015/04/28/using-jquery-readyselector-and-bower-rails-to-manage-js-on-a-page-by-page/</guid>
      <description>

&lt;p&gt;ページごとに読み込むJsを制限したいなあと思って、ググってみたところいろいろ出てくる。
ただ、今回はできるかぎりシンプルにやりたかったので&lt;code&gt;jquery-readyselector&lt;/code&gt;というJqueryプラグインを使うことにした。&lt;/p&gt;

&lt;p&gt;このプラグインはBowerで管理されている(Node)モジュールみたいなので、まずは&lt;code&gt;bower-rails&lt;/code&gt;をインストールして、
&lt;code&gt;bower-rails&lt;/code&gt;経由で&lt;code&gt;jquery-readyselector&lt;/code&gt;をインストールすることにした。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;bower-railsを使うには、事前にBowerをインストールしておく必要がある&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;bower-railsのインストール:81d2c341e61d33f963f82806634eede6&#34;&gt;bower-railsのインストール&lt;/h2&gt;

&lt;p&gt;まずはGemfileの設定し、インストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat Gemfile
gem &amp;quot;bower-rails&amp;quot;

$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;次に、Nodeモジュールを管理するための設定ファイル(Gemfileみたいなもの)の形式を決める。
形式はjson形式の&lt;code&gt;bower.json&lt;/code&gt;の場合か、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g bower_rails:initialize json
      create  bower.json
      create  config/initializers/bower_rails.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DSL形式の&lt;code&gt;Bowerfile&lt;/code&gt;のどちらか選べる。今回はこちらの方法を選択。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$  rails g bower_rails:initialize
      create  Bowerfile
      create  config/initializers/bower_rails.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;
&lt;code&gt;bower-rails&lt;/code&gt;の設定は&lt;code&gt;config/initializers/bower_rails.rb&lt;/code&gt;で行う。
今回は特に設定なし(デフォルトのまま)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BowerRails.configure do |bower_rails|
   # Tell bower-rails what path should be considered as root. Defaults to Dir.pwd
   # bower_rails.root_path = Dir.pwd

   # Invokes rake bower:install before precompilation. Defaults to false
   # bower_rails.install_before_precompile = true

   # Invokes rake bower:resolve before precompilation. Defaults to false
   # bower_rails.resolve_before_precompile = true

   # Invokes rake bower:clean before precompilation. Defaults to false
   # bower_rails.clean_before_precompile = true

   # Invokes rake bower:install:deployment instead rake bower:install. Defaults to false
   # bower_rails.use_bower_install_deployment = true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;jquery-readyselectorのインストール:81d2c341e61d33f963f82806634eede6&#34;&gt;jquery-readyselectorのインストール&lt;/h2&gt;

&lt;p&gt;まずはインストールするNodeモジュールを設定し、インストールの実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat Bowerfile
asset &#39;jquery-readyselector&#39;

$ bundle exec rake bower:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;すると&lt;code&gt;vendor/assets&lt;/code&gt;配下に&lt;code&gt;bower_components&lt;/code&gt;というディレクトリが生成され、
その中にNodeモジュールがインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ll vendor/assets/bower_components/
query-readyselector/
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower-rails&lt;/code&gt;でインストールしたNodeモジュールは、&lt;code&gt;bower-rails&lt;/code&gt;側で管理したかったので、gitignore した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .gitignore
vendor/assets/bower_components/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;インストールしたNodeモジュールのpathを設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat config/application.rb
config.assets.paths &amp;lt;&amp;lt; Rails.root.join(&#39;vendor&#39;, &#39;assets&#39;, &#39;bower_components&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;次に&lt;code&gt;jquery-readyselector&lt;/code&gt;を&lt;code&gt;application.js&lt;/code&gt;に読み込む。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat app/assets/javascripts/application.js
//= require jquery-readyselector
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;最後にbodyタグに、アクセスされた時の&lt;code&gt;コントローラ名&lt;/code&gt;と&lt;code&gt;アクション名&lt;/code&gt;をclassに設定するようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emacs app/views/layouts/application.html.erb
&amp;lt;body class=&amp;quot;&amp;lt;%= controller_name -%&amp;gt; &amp;lt;%= action_name -%&amp;gt;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;ページ別にjsが読み込まれているか確認:81d2c341e61d33f963f82806634eede6&#34;&gt;ページ別にJsが読み込まれているか確認&lt;/h2&gt;

&lt;p&gt;まずは適当なページ&lt;code&gt;http://localhost:3000/books&lt;/code&gt;を用意する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g scaffold Book title:string price:integer
...
app/assets/javascripts/books.coffee
...

$ rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;次に生成されたJs(coffee)に、ページ単位(action単位)にコードを書く。
&lt;code&gt;http://localhost:3000/books&lt;/code&gt;にアクセスした時のみ、&lt;code&gt;alert&lt;/code&gt;がでれば成功。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emacs app/assets/javascripts/books.coffee
$(&#39;.books.index&#39;).ready -&amp;gt;
  alert(&#39;book#index&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考サイト:81d2c341e61d33f963f82806634eede6&#34;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mah-lab.com/2014/04/14/bower-rails/&#34;&gt;Railsで外部JavaScriptライブラリなどのAssetを管理するなら、bower-railsが便利&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rharriso/bower-rails&#34;&gt;bower-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hello-world.jp.net/javascript/1673/&#34;&gt;bodyにclassを付けて特定のページでのみjsが動作するようにする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
